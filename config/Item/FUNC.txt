/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ambitui.Test;

import ambitui.Telnet.TelnetOper;
import ambitui.AmbitUIView;
import ambitui.BaseClass;
import ambitui.ComPort;
import ambitui.ConfigFile.StationInfo;
import ambitui.FileTimeForFoundAndUpdate;
import ambitui.Tcp.TcpClient;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.sun.jndi.url.iiop.iiopURLContext;
import com.sun.org.apache.bcel.internal.generic.IFEQ;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.AbstractList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *  请把你测试项目需要用到的方法放到Testcmd里
 * @author lihaibin
 */
public class TestScript extends methodOfTestScript {

    public TestScript(AmbitUIView apv) {
        super(apv);
//        this.apv = apv;
//        to = new TelnetOper(apv, 1, 1);
//        po = new ProcessOper(apv);
    }

    public boolean ping(String ip, int times) {
        if (po.ping(ip, times)) {
            return true;
        }
        return false;
    }

    public boolean ping(String ip, String eth, int times) {
        if (po.ping(ip, eth, times)) {
            return true;
        }
        return false;
    }

    public boolean getSN(int timeout, String str) {
        resultLog = "Pass";
        QuestionWindow qw = new QuestionWindow(timeout);
        qw.start(str);
        boolean ret = qw.getResult(timeout);
        if (!ret) {
            resultLog = "Fail";
        }
        return ret;
    }

    public boolean pingIP(StationInfo si, int i, int id) {

        resultLog = si.ii.socketIp[i];
        int num = si.ii.diagCmdTime[i] / 5 + 1;

//        String cmd = "arp -a -N 192.168.1.20";
//        String cmd[] = si.ii.cmd[i].split(",");
//        for (int j = 0; j < cmd.length; j++) {
//            cmd[j] = "arp -a -N " + cmd[j];
//
//        }
//        boolean bool = false;
//        for (int j = 0; j < si.ii.diagCmdTime[i]; j++) {
//            String line = "";
//            Process p;
//            for (int s = 0; s < cmd.length; s++) {
//                try {
//                    p = Runtime.getRuntime().exec(cmd[s]);
//
//                    BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream(), "GB2312"));
//                    while ((line = br.readLine()) != null) {
//                        addLog(line, 3, id);
//                        bool = true;
//                    }
//                } catch (IOException ex) {
//                    Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
//                }
//                if (bool) {
//                    break;
//                }
//            }
//
//            if (!bool) {
//                try {
//                    Thread.sleep(1000);
//                    continue;
//                } catch (InterruptedException ex) {
//                    Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            } else {
//                break;
//            }
//        }
//        if (!bool) {
//            addLog("Ping " + si.ii.socketIp[i] + " Fail!", id);
//            return false;
//        }

        for (int j = 0; j < num; j++) {


            if (ping(si.ii.socketIp[i], 5)) {
                addLog("Ping " + si.ii.socketIp[i] + " PASS!", id);
//                resultLog = "PASS";
                return true;
            }

        }

        addLog("Ping " + si.ii.socketIp[i] + " Fail!", id);
        return false;
    }

    public boolean pingIP2(StationInfo si, int i, int id) {

        resultLog = si.ii.socketIp[i];
        try {
            if (!pingIP(si, i, id)) {
                addLog("Ping " + si.ii.socketIp[i] + " Failed!", id);
                return false;
            }
            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet:".concat(si.ii.socketIp[i]).concat(" Failed!"), id);
                return false;
            }

            to.readUntil(si.ii.diagCmd[i], 1);


            for (int j = 0; j <= 3; j++) {
                to.sendCommand(si.ii.cmd[i]);
//                if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], id)) {
//                    addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
//                    return false;
//                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (!to.connect(si.ii.socketIp[i])) {
                    addLog("Telnet:".concat(si.ii.socketIp[i]).concat(" Failed!"), id);
                    addLog("CMD " + si.ii.cmd[i] + " OK!", id);
                    break;
                }
                if (j == 3) {
                    addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                    return false;
                }
            }
            if (!pingIP(si, i, id)) {
                addLog("Ping " + si.ii.socketIp[i] + " Failed!", id);
                return false;
            }
            addLog("Ping " + si.ii.socketIp[i] + " ok!", id);
            return true;
        } catch (Exception ex) {
            Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            addLog("Failed ".concat(ex.toString()), id);
            return false;
        }
    }

    public boolean pingGoldenIP(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        int hz = Integer.parseInt(si.ii.Cut0[i].trim());
        String ip = apv.getGoldenIP(hz);
        if (ip == null || ip.equals("")) {
            ip = si.ii.socketIp[i];
        }
        addLog("getGolden IP: " + ip, id);
        int num = si.ii.diagCmdTime[i] / 2 + 1;
//        //apv.phase_items = new JSONObject[1];
//        //apv.phase_items[0] = new JSONObject();
//        //apv.phase_items[0].put("name", "ping");
//        //apv.phase_items[0].put("ip", si.ii.socketIp[i]);
        for (int j = 0; j < num; j++) {

            if (ping(ip, 2)) {
                addLog("Ping " + ip + " PASS!", id);
                resultLog = "PASS";
                return true;
            }

        }

        addLog("Ping " + si.ii.socketIp[i] + " Fail!", id);
        return false;
    }

    public boolean generateNodeFromBarcode(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        apv.addLog(apv.getPatternSfis_Te(), id);
//        apv.addLog(apv.this_sfis_te, id);
        apv.addLog(apv.getPatternTe_Sfis(), id);
//        apv.addLog(apv.model[id - 1], id);
        resultLog = "PASS";
        return true;
    }

    public boolean VerifyCct(StationInfo si, int i, int id) {
        resultLog = "FAIL";
//        apv.addLog(apv.getPatternSfis_Te(), id);
////        apv.addLog(apv.this_sfis_te, id);
//        apv.addLog(apv.getPatternTe_Sfis(), id);
        resultLog = "PASS";
        return true;
    }

    public boolean checkPnName(StationInfo si, int i, int id) {
        resultLog = "810-01100";

        apv.addLog("get pnNmae=" + resultLog, id);

//        if (!apv.getSfisStatus()) {
//            addLog("cancelled  tiem", id);
//            return true;
//        }
//        if (apv.ApiModel.equals("debug")) {
//            addLog("cancelled  tiem", id);
//            return true;
//        }
//      
////        apv.addLog(apv.this_sfis_te, id);
//        apv.addLog(apv.getPatternTe_Sfis(), id);
//        resultLog = "PASS";
        return true;
    }

    public boolean getMacFromShopFloor(StationInfo si, int i, int id) {
        resultLog = macTranslate(apv.ethMac[id - 1]).toLowerCase();
        addLog("get mac=" + macTranslate(apv.ethMac[id - 1]).toLowerCase(), id);
        if (!apv.getSfisStatus()) {
            addLog("cancelled  tiem", id);
            resultLog = "PASS";
            return true;
        }
        if (apv.mlbSn[id - 1].length() != 16) {
            String sn = apv.mlbSn[id - 1];
//            if (sn.length() < 8) {
//                sn = apv.sn[id - 1];
//            }

            //----吧SN变成16位
            try {
                Process p = Runtime.getRuntime().exec("cmd /c  " + si.ii.cmd[i] + " " + sn);
                addLog("cmd /c  " + si.ii.cmd[i] + " " + sn, id);
                String line = "";
                BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream(), "GB2312"));
                while ((line = br.readLine()) != null) {
                    line = line.trim();
                    addLog("new HHSN=" + line, id);
                    if (line.contains(apv.mlbSn[id - 1]) && line.length() == 16) {
                        apv.mlbSn[id - 1] = line;
                    }

                }
                if (apv.mlbSn[id - 1].length() != 16) {
                    addLog("mlbsn eero " + apv.mlbSn[id - 1], id);
                    return false;
                } else {
                    addLog("send sfis " + apv.mlbSn[id - 1], id);
                    apv.sendSfis(apv.mlbSn[id - 1]);
                }
                //    Process pro = Runtime.getRuntime().exec("cmd /c open.bat");
            } catch (IOException ex) {
                addLog(ex.toString(), id);
                return false;
            }
        }

        return true;

    }

    public boolean LableMac(StationInfo si, int i, int id) {
        resultLog = macTranslate(apv.ethMac[id - 1]).toLowerCase();
        if (!apv.getSfisStatus()) {
            addLog("cancelled  tiem", id);
            resultLog = "PASS";
            return true;
        }
        addLog("sfis mac=" + apv.ethMac[id - 1], id);
        String mac = JOptionPane.showInputDialog(null, "Please enter MAC on lable", "lable mac check", JOptionPane.PLAIN_MESSAGE).trim();
        addLog("get mac=" + mac, id);
        if (mac.equalsIgnoreCase(apv.ethMac[id - 1])) {
            return true;
        }
        return false;

    }

    public boolean FixtureControl(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        ComPort cp = new ComPort(apv, id);

        try {
            for (int j = 0; j < 3; j++) {
                if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
                    cp.close();
                    continue;
                }
//                si.ii.errorCode[i] = errorCode[0];
//                si.ii.errorDes[i] = errorDes[0];
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    return false;
                }
                cp.readms(1);
                String cmd[] = si.ii.cmd[i].split(",");
                for (int k = 0; k < cmd.length; k++) {
                    if (!cp.writeAndReadUntil(cmd[k] + "\r\n", si.ii.spec[i], si.ii.diagCmdTime[i])) {
//                        resultLog = "PASS";
//                        return true;
//                    } else {
                        addLog("cmd " + si.ii.cmd[i] + " FAIL!", id);
//                        if (cp.readAll.contains("FAIL")) {
//                            si.ii.errorCode[i] = errorCode[1];
//                            si.ii.errorDes[i] = errorDes[1];
//                        }
                        addLog(cp.readAll, 2, id);
                        return false;
                    }
                    if (k == 0) {
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            return false;
                        }
                    }

                }
                if (si.ii.diagCmd[i].length() > 1) {
                    addLog(si.stationName, id);
                    if (si.stationName.equals("FRTT")) {
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException ex) {
                            return false;
                        }
                    }
                    if (!cp.writeAndReadUntilToUpperCase(si.ii.diagCmd[i] + "\r\n", si.stationName, si.ii.diagCmdTime[i])) {   //获取治具编号
                        addLog("CMD " + si.ii.diagCmd[i] + " Fail!", id);
                        return false;
                    }
                    String str[] = cp.readAll.split("\n");
                    for (int k = 0; k < str.length; k++) {
                        String string = str[k].trim().toUpperCase();
                        if (string.contains(si.stationName)) {
                            apv.setLbStationname(string.trim());
                        }

                    }

//                addLog(cp.readAll, id);

                }
                resultLog = "PASS";
                return true;

            }
//            si.ii.errorCode[i] = errorCode[2];
//            si.ii.errorDes[i] = errorDes[2];
        } finally {
            cp.close();
            if (si.ii.itemDes[i].toUpperCase().contains("OPEN")) {
                resultLog = "PASS";
                return true;
            }

        }
        return false;
    }

    public boolean FixtureControl_booster(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        ComPort cp = new ComPort(apv, id);

        try {
            for (int j = 0; j < 3; j++) {
                if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
                    cp.close();
                    continue;
                }
//                si.ii.errorCode[i] = errorCode[0];
//                si.ii.errorDes[i] = errorDes[0];
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    return false;
                }
                cp.read();

                String cmd[] = si.ii.cmd[i].split(",");
                for (int k = 0; k < cmd.length; k++) {
                    if (!cp.writeAndReadUntil(cmd[k] + "\r\n", "}", si.ii.diagCmdTime[i])) {
                        addLog("cmd " + cmd[k] + " FAIL!", id);

//                        addLog(cp.readAll, 2, id);
                        return false;
                    }
                    if (!fixtureBooster(cp.readAll, cmd[k], si.ii.spec[i])) {
                        return false;
                    }
                    if (k == 0) {
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            return false;
                        }
                    }

                }
                if (si.ii.diagCmd[i].length() > 1) {
                    if (!cp.writeAndReadUntilToUpperCase(si.ii.diagCmd[i] + "\r\n", "}", si.ii.diagCmdTime[i])) {   //获取治具编号
                        addLog("CMD " + si.ii.diagCmd[i] + " Fail!", id);
                        return false;
                    }
                    if (!fixtureBooster(cp.readAll, si.ii.diagCmd[i], si.stationName)) {
                        return false;
                    }
                }
                resultLog = si.ii.spec[i];
                return true;

            }
//            si.ii.errorCode[i] = errorCode[2];
//            si.ii.errorDes[i] = errorDes[2];
        } finally {
            cp.close();
            if (si.ii.itemDes[i].toUpperCase().contains("OPEN")) {
                resultLog = "PASS";
                return true;
            }

        }
        return false;
    }
    int FixtureStatus = 0;

    public boolean fixtureBooster(String read, String cmd, String spec) {
        String details[] = read.split("\r\n");
        for (int i = 0; i < details.length; i++) {
            if (details[i].contains("command")) {
                if (!details[i].contains(cmd)) {
                    return false;
                }
            }
            if (details[i].contains("result")) {
                if (!details[i].contains(spec)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean fixtureBooster1(String read, String cmd, String spec) {

        int start = read.indexOf("{");
        int end = read.indexOf("}");
        if (end < start) {
            return false;
        }
        String jsonString = read.substring(start, end + 1);
        System.out.println(jsonString);
        JSONObject json = JSON.parseObject(jsonString);
        String command = json.getString("command");
        addLog(command);
        if (!command.equals(cmd)) {
            return false;
        }

        String result = json.getString("result");
        addLog(result);
        if (result.contains(spec)) {
            return true;
        }
        return false;
    }

    public boolean bluetoothTransmitPowerTest(StationInfo si, int i, int id) {
        resultLog = "overtime";
        String fileDetails = "";
        apv.IQlog.clear();
        String path = apv.srfBLELitePointPath;
        boolean result = false;
        if (!path.endsWith(File.separator)) {
            path += File.separator;
        }
        String IQlogPath = path + si.ii.Cut0[i];
        try {
            //------------------------run  iQ----------------------------------
            Thread.sleep(2000);
            File IQLogFile = null;

            IQLogFile = new File(IQlogPath);
            if (IQLogFile.exists()) {
                System.gc();
                IQLogFile.delete();
            }
            if (IQLogFile.exists()) {
                this.addLog(IQlogPath + "\r\nDelete fail", id);
//                apv.showConfirmDialog( IQlogPath + "\r\nDelete fail");
                return false;
            }
            if (!apv.IQconfig.runinBLENmae.containsKey(apv.IQconfig.getIQport())) {
                this.addLog("not have " + apv.IQconfig.getIQport(), id);
                return false;
            }
            String runBat = apv.IQconfig.runinBLENmae.get(apv.IQconfig.getIQport());

            addLog("IQ cmd: " + runBat, id);
            String cmd = "cmd /c " + runBat;

            this.addLog(cmd, id);
            Runtime.getRuntime().exec(cmd);
            Thread.sleep(5000);
            IQLogFile = new File(IQlogPath);
            if (!IQLogFile.exists()) {
                this.addLog("not have " + IQlogPath, id);
                return false;
            }

            if (!readIQlogItem(IQLogFile, si.ii.diagCmdTime[i], si.ii.diagCmd5[i])) {
                this.addLog(si.ii.diagCmd2[i] + " erro", id);
                return false;
            }

            fileDetails = ParseIQLog(IQLogFile);
            resultLog = "PASS";
            result = true;
            return result;


        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        } finally {

            //-------------------------close dut command---------------
            to.disconnect();
            if (!result) {
                String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
                String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
                String IqNewPath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + File.separator + date + File.separator + apv.hostName + File.separator;;
                String fileName = apv.mlbSn[id - 1] + "_" + apv.sn[id - 1] + "_" + si.ii.itemDes[i] + "_" + Time + "_" + resultLog + ".txt";
                saveIQlog(IqNewPath, fileName, fileDetails);
            }
        }

    }

//    
//    public boolean bluetoothTransmitPowerTest1(StationInfo si, int i, int id) {
//        apv.IQlog.clear();
//        String[] errorCode = si.ii.errorCodeLimit[i].split(",");
//        String[] errorDes = si.ii.errorDesLimit[i].split(",");
//        si.ii.errorCode[i] = errorCode[1];
//        si.ii.errorDes[i] = errorDes[1];
//        boolean result = true;
//
//        String log = "";
//        String Items = "";
//        StringBuilder sqlItem = new StringBuilder();
//        StringBuilder sqlValue = new StringBuilder();
//        API_BLE_Desense.clear();
//        StringBuilder grrValue = new StringBuilder();
//        StringBuilder grrItem = new StringBuilder();
//        String datelog[] = si.ii.Cut0[i].split(",");
//        if (errorDes.length != 3 || errorCode.length != 3) {
//            addLog("ambitconfig.txt erro, ERR_CODE and ERR_CODE_DES's  length both  must be five", id);
//            return false;
//        }
//        resultLog = "FAIL";
//        String path = si.ii.diagCmd1[i];
//        if (!path.endsWith(File.separator)) {
//            path += File.separator;
//        }
//        String IQlogPath = path + si.ii.diagCmd2[i];
//        String pathLossPath = path + si.ii.diagCmd3[i];
//        String newPathLossPath = path + si.ii.diagCmd4[i];
//        if (!to.connect(si.ii.socketIp[i])) {
//            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
//            return false;
//        }
//        to.readAll(1);
//
//        //------------------------run  iQ----------------------------------
//        String fileDetails = "";
//        try {
//            Thread.sleep(2000);
//            File IQLogFile = null;
//
//            IQLogFile = new File(IQlogPath);
//            if (IQLogFile.exists()) {
//                IQLogFile.delete();
//            }
//            if (IQLogFile.exists()) {
//                apv.showConfirmDialog(id, IQlogPath + "\r\nDelete fail");
//                return false;
//            }
//            File pathLoss = new File(newPathLossPath);
//            if (pathLoss.exists()) {
//                pathLoss.delete();
//            }
//            if (pathLoss.exists()) {
//                apv.showConfirmDialog(id, newPathLossPath + "\r\nDelete fail");
//                return false;
//            }
//            String port = "-" + apv.getIQport() + ".bat";
//            String cmd = si.ii.diagCmd[i].replace(".bat", port);
//            this.addLog(cmd, id);
//            Runtime.getRuntime().exec(cmd);
//            Thread.sleep(5000);
//
//            if (!IQLogFile.exists()) {
//                this.addLog("not have " + IQlogPath, id);
//                return false;
//            }
////            File IQLogFile = new File("BLE.txt");
////            String pathLossPath = "path_loss_BT.csv";
////            String newPathLossPath = "path_loss_BT1.csv";
//            if (!readIQlogItem(IQLogFile, si.ii.diagCmdTime[i], si.ii.diagCmd5[i])) {
//                this.addLog(si.ii.diagCmd2[i] + " erro", id);
//                si.ii.errorCode[i] = errorCode[0];
//                si.ii.errorDes[i] = errorDes[0];
//                return false;
//            }
//
//            ParseIQLog(IQLogFile);
//            //------------------------判断TX-----------------------
//            for (Object key : apv.IQlog.keySet()) {
//                String item = (String) key;
////            System.out.println(item);
//                String[] details = (String[]) apv.IQlog.get(item);   //按行获取
//                for (int j = 0; j < details.length; j++) {
//                    String string = details[j];
//                    if (string.contains("[Failed]")) {
//                        result = false;
//                        if (item.contains("TX_LE")) {
//                            si.ii.errorCode[i] = errorCode[1] + ".1";
//                            si.ii.errorDes[i] = errorDes[1] + ".Tx";
//                            addLog(si.ii.errorDes[i], id);
////                            result= false;
//                        } else if (item.contains("TX_MULTI_VERIFICATION")) {
//                            si.ii.errorCode[i] = errorCode[2] + ".1";
//                            si.ii.errorDes[i] = errorDes[2] + ".Tx";
//                            addLog(si.ii.errorDes[i], id);
////                            result= false;
//                        } else {
////                            result= false;
//                        }
//                    }
//
//                }
//
//            }
//// -------------------------更新PathLoss-----------------------------------
////            String PathLog = si.ii.diagCmd2[i];
//
//            File file = new File(pathLossPath);         //旧 PathLoss
//
////            IQLogFile = new File(IQ_Log);
//            IQ_PathLoss a = new IQ_PathLoss(this, id);
//            addLog(pathLossPath, id);
//
////            this.addLog(file.getPath(), id);
//            a.readPathLoss(file);
//
//            String fileDetails1 = a.readIQlog(IQLogFile, 2, si.ii.diagCmd5[i]);
//
//            a.ParseIQLog(fileDetails1);
//            if (a.readBLEPathLossAndSetPathloss()) {     //如果修改成功就执行保存文件
//                a.savePathLoss(newPathLossPath);
//            } else {
//                this.addLog(newPathLossPath + " erro", id);
//                return false;
//            }
//            addLog("Updating PathLoss OK", id);
//// -------------------------跑RX-----------------------------------
//
//
////            String datelog[] = si.ii.Cut0[i].split(",");
//            fileDetails = "";
//            //      ------------------------run  iQ----------------------------------
//
//            readIQlog1(IQLogFile, si.ii.diagCmdTime[i]);
//            fileDetails = ParseIQLog(IQLogFile);
//            if (apv.IQlog.containsKey("RESERT")) {
//                int error = 1;
//                this.addLog(" IQ end of run", id);
//                String[] details = (String[]) apv.IQlog.get("RESERT");
//                for (int j = 0; j < details.length; j++) {
//                    if (details[j].contains("RX_VERIFY_PER")) {
//                        error = 2;
//                    }
//                    if (details[j].contains("F A I L") || (details[j].contains("[Failed]"))) {
//                        if (result) {
//                            si.ii.errorCode[i] = errorCode[error];
//                            si.ii.errorDes[i] = errorDes[error];
//                            addLog(si.ii.errorDes[i], id);
//                            result = false;
//                        }
//
//                    }
//                }
//
//
//            } else {
//                si.ii.errorCode[i] = "3.5.4";
//                si.ii.errorDes[i] = "Device.Bluetooth.Timeout";
//
//                this.addLog(" log_all.txt erro", id);
//                result = false;
//            }
//
//            Map txRxPower = new TreeMap();
//            ArrayList<String> powerName = new ArrayList<String>();
//            try {
////                String datelog[] = si.ii.cmd[i].split(",");
//                if (apv.IQlog.containsKey("RESERT")) {    //寻找测试项目
//
//                    String[] details = (String[]) apv.IQlog.get("RESERT");
//                    addLog("get test item: ", id);
//
//                    for (int j = 0; j < details.length; j++) {
////                    error = details[j];
//
//                        if (details[j].contains("TX_") || details[j].contains("RX_")) {
//                            String powerItem = details[j].substring(0, details[j].indexOf(":")).trim();
//                            String frequency = PatternStarts(details[j], "\\b\\d{4}\\b").trim();
////                            int chain = Integer.valueOf(PatternStarts(details[j], "(?<=ANT)\\d").trim()) - 1;
////                            String data_rate = PatternStarts(details[j], "(?<= " + frequency + " ).+(?=ANT)").trim();
////                        System.out.println(data_rate);
//                            String name = frequency;
//
//                            if (!apv.IQlog.containsKey(powerItem.trim())) {    //寻找测试项目
//                                addLog(powerItem, id);
//                                addLog("FAIL! " + name, id);
//                                return false;
//                            }
//                            ArrayList<String> detailsAll = new ArrayList<String>();
//                            String[] details1 = (String[]) apv.IQlog.get(powerItem);   //获取内容
//                            for (int k = 0; k < details1.length; k++) {
//                                detailsAll.add(details1[k]);
////                        if (details1[k].contains(si.ii.spec[i])) {    //遍历每行判断PASSfail
////                            bool = false;
////                        }
//                            }
//                            if (txRxPower.containsKey(name)) {
//                                details1 = (String[]) txRxPower.get(name);
//                                for (int k = 0; k < details1.length; k++) {
//                                    detailsAll.add(details1[k]);
//                                }
//                            } else {
//                                powerName.add(name);
//                            }
//                            txRxPower.put(name, detailsAll.toArray(new String[detailsAll.size()]));
//                        }
//
//                    }
//                } else {
//                    this.addLog(" read wifi IQ log.txt erro", id);
//
//                }
//                String[] PowerName = powerName.toArray(new String[powerName.size()]);
//
//
//                apv.phase_items = new JSONObject[PowerName.length];
//                Iterator iter = txRxPower.entrySet().iterator();
//                int num = -1;
//                while (iter.hasNext()) {
//                    num++;
//
//                    Map.Entry entry = (Map.Entry) iter.next();
//                    String[] details = (String[]) entry.getValue();
//                    String frequency = (String) entry.getKey();
//
//                    double value = -999;                         //实际
//                    double LOSS_DB = 0;
////            String radio = "0";
//                    String limit_min = "null";
//                    String limit_max = "null";
//                    String rx_per = "-99";
//                    String lg = "";
//                    String rx_power = "";
//                    String per_limit_max = "";
//                    String per_limit_min = "";
//                    String item = "";
//
//                    for (int k = 0; k < details.length; k++) {
//
//                        if (details[k].startsWith("POWER_AVG_DBM  ") || details[k].startsWith("POWER_RMS_AVG_VSA1") || details[k].startsWith("POWER_AVERAGE ") || details[k].startsWith("POWER_AVERAGE_DBM")) {
////                        System.out.println(details[i]);
//                            String str = details[k].split(":")[1];
////                        System.out.println(str);
//                            value = Double.parseDouble(str.substring(0, str.lastIndexOf("dBm")).trim());
//                            str = details[k].substring(details[k].indexOf("("));
//                            if (!str.contains("(,);")) {
//                                if (!str.contains("(,")) {
//                                    limit_min = str.substring(1, str.indexOf(","));
//                                }
//                                if (!str.contains(",)")) {
//                                    limit_max = str.substring(str.indexOf(",") + 1, str.indexOf(")"));
//                                }
//                            }
////                        System.out.println(spec+"");
//                        } else if (details[k].startsWith("PER ") || details[k].startsWith("PER_VALUE ")) {
//
//                            String str = details[k].split(":")[1];
//                            rx_per = str.substring(0, str.lastIndexOf("%")).trim();
//                            String spec = details[k].substring(details[k].indexOf("(") + 1, details[k].indexOf(")")).replace(" ", "");
//                            if (details[k].contains("(,)")) {
//                                per_limit_min = "null";
//                                per_limit_max = "null";
//                            } else if (details[k].contains("(,")) {
//                                per_limit_min = "null";
//                                per_limit_max = spec.substring(1);
//                            } else if (details[k].contains(",)")) {
//                                per_limit_min = spec.substring(0, spec.indexOf(","));
//                                per_limit_max = "null";
//                            } else {
//                                per_limit_min = spec.split(",")[0];
//                                per_limit_max = spec.split(",")[1];
//                            }
//
//                        } else if (details[k].startsWith("CABLE_LOSS_DB  ") && details[k].contains("dB")) {
//                            String str = details[k].split(":")[1];
//                            LOSS_DB = Double.parseDouble(str.substring(0, str.lastIndexOf("dB")).trim());
//                        } else if (details[k].startsWith("RX_POWER_LEVEL  ") && details[k].contains("dB") && !details[k].contains("0.00")) {
//                            String str = details[k].split(":")[1];
//                            rx_power = str.substring(0, str.lastIndexOf("dB")).trim();
//                        } else if (details[k].startsWith("POWER_LEVEL_DBM  ") && details[k].contains("dB")) {
//                            String str = details[k].split(":")[1];
//                            rx_power = str.substring(0, str.lastIndexOf("dB")).trim();
//                        }
//
//
//
//                    }
//
////                    apv.phase_items[num] = new JSONObject();
////                    apv.phase_items[num].put("frequency", frequency);
////                    apv.phase_items[num].put("measured_power", value);
////                    apv.phase_items[num].put("absolute_power", value);
////                    apv.phase_items[num].put("rx_per", rx_per);
////                    apv.phase_items[num].put("per", rx_per);
////                    apv.phase_items[num].put("path_loss", LOSS_DB);
////                    apv.phase_items[num].put("unit", "dBm");
////                    apv.phase_items[num].put("limit_min", limit_min);
////                    apv.phase_items[num].put("limit_max", limit_max);
//                    StringBuilder apiDetails = new StringBuilder();
//                    apiDetails.append("radio:").append("0").append(",");
//                    apiDetails.append("chain:").append("0").append(",");
//                    apiDetails.append("frequency:").append(frequency).append(",");
//                    apiDetails.append("rx_power:").append(rx_power).append(",");
//                    apiDetails.append("per:").append(rx_per).append(",");
//                    apiDetails.append("path_loss:").append(LOSS_DB).append(",");
//                    apiDetails.append("unit:").append("percent").append(",");
//                    apiDetails.append("limit_min:").append(per_limit_min).append(",");
//                    apiDetails.append("limit_max:").append(per_limit_max).append(",");
//                    //API_BLE_Desense.put(frequency, apiDetails.toString());
//
//
////1
//                    ///String json = apv.phase_items[num].toString().replace("\"", "");
////                    System.out.println(json);
////                    json = json.replace("{", "");
////                    json = json.replace("}", "");
////                    String str[] = json.split(",");
//                    for (int j = 0; j < str.length; j++) {
//                        String string[] = str[j].split(":");
//                        for (int k = 0; k < datelog.length; k++) {
//                            if (datelog[k].equals(string[0])) {
//                                lg += "," + string[1];
//                                item += "," + string[0];
//                                sqlItem.append(",").append("BLE-").append(frequency).append(string[0]);
//                                sqlValue.append(",").append(string[1]);
//                            }
////
//
//                        }
////                        for (int k = 0; k < datelog.length; k++) {
//
////                        }
//
//                    }
//                    Items += "," + frequency + item;
//
//                    log += ",PASS" + lg;
//                    grrItem.append(frequency).append(",");
//                    grrValue.append(rx_per).append(",");
//
//                }
//
//            } catch (Exception e) {
//
//                e.printStackTrace();
//                addLog(e.toString(), id);
//            }
//
//
//
//
//
//
//
//
//            if (result) {
//                apv.testGrrLog.append(grrValue.toString());
//                apv.testGrrItem.append(grrItem.toString());
//                resultLog = "PASS";
//                return true;
//            } else {
//                resultLog = "FAIL";
//                return false;
//            }
//
//        } catch (Exception ex) {
//            ex.printStackTrace();
//            return false;
//        } finally {
//            if (si.ii.testLog[i] == null) {
//                si.ii.testLog[i] = apv.testLog[id - 1];
//            }
//
//            si.ii.resultType[i] = si.ii.itemDes[i] + Items;
//            apv.testLog[id - 1] = si.ii.testLog[i] + resultLog + log;
//            si.ii.testItem[i] = sqlItem.toString();
//            si.ii.testValue[i] = sqlValue.toString();
//            //-------------------------close dut command---------------
//
//            to.sendCommand("qcatestcmd -i wifi0 --tx off --phyId 0");
//            to.sendCommand("qcatestcmd -i wifi0 --tx off --phyId 1");
//            to.sendCommand("qcatestcmd -i wifi0 --tx off --phyId 2");
//
//
//            try {
//                Runtime.getRuntime().exec("taskkill /f /t /im  IQfactRun_Console.exe");
//
//            } catch (IOException ex) {
//                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            try {
//                Thread.sleep(1000);
//
//            } catch (InterruptedException ex) {
//                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            to.disconnect();
//            String sn = apv.sn[id - 1];
//            if (sn.equals("")) {
//                sn = apv.mlbSn[id - 1];
//            }
//            String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
//            String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
//            String filePath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + File.separator + date + File.separator + apv.hostName + File.separator;
//            File fnewpath = new File(filePath); //文件新（目标）地址 
//            if (!fnewpath.exists()) //判断文件夹是否存在 
//            {
//                fnewpath.mkdirs();
//            }
//            String fileName = apv.mlbSn[id - 1] + "_" + apv.sn[id - 1] + "_" + si.ii.name[i] + "_" + Time + "_" + resultLog + ".txt";
//            String ftpPath = filePath.replaceAll("\\\\", "/");
//            filePath = filePath + fileName;
//            try {
//
//                if (apv.uc.ftpFlag == 1) {
//
//                    if (!apv.ftp.writeftpFile(ftpPath, fileName, fileDetails)) {
//                        apv.showConfirmDialog(id, ftpPath + fileName + "\r\n save fail");
//                    } else {
//                        addLog(ftpPath + fileName + " save server OK", id);
//                    }
//
//                } else {
//                    if (!saveIQlog(filePath, fileDetails)) {
//                        apv.showConfirmDialog(id, filePath + "\r\n save fail");
//                    } else {
//                        addLog(filePath + " save server OK", id);
//                    }
//                }
//
//                fileName = apv.mlbSn[id - 1] + "_" + apv.sn[id - 1] + "_" + si.ii.name[i] + "_" + Time + "_" + resultLog + ".txt";
//
//                apv.setZipFile(fileName, new File(IQlogPath));
//                if (!saveIQlog(filePath, fileDetails)) {
//                    apv.showConfirmDialog(id, filePath + "\r\n save fail");
//                } else {
//                    addLog(fileName + " save zip OK", id);
//                }
//                if (apv.uc.ftp1Flag == 1) {
//                    if (!apv.ftp1.writeftpFile(ftpPath, fileName, fileDetails)) {
//                        addLog("ftp1  save fail", id);
//                    }
//                }
//            } catch (Exception e) {
//                e.printStackTrace();
//                apv.showConfirmDialog(id, filePath + "\r\n save fail\r\n" + e.getLocalizedMessage());
//                return false;
//            }
//            resultLog = "";
//
//        }
//
//    }
//
//    
    public boolean BLE_START(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String path = si.ii.diagCmd1[i];

        if (!path.endsWith(File.separator)) {
            path += File.separator;
        }
        try {
            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);
            //-------------------------IQ start dut command---------------
            File CmdFile = new File(si.ii.cmd1[i]);
            if (!CmdFile.exists()) {
                this.addLog("not have file " + si.ii.cmd1[i], id);
                return false;
            }
            BufferedReader br = null;
            String iqLogLine = "";

            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
            while ((iqLogLine = br.readLine()) != null) {
                for (int j = 0; j < 5; j++) {
                    if (!to.sendCommandAndRead(iqLogLine, si.ii.cmd2[i], si.ii.diagCmdTime[i])) {
                        addLog("CMD " + iqLogLine + " Fail!", id);
                        return false;
                    }
                    if (iqLogLine.trim().equals("startble")) {
                        if (!to.getString.contains("Starting device firmware FAILED")) {
                            j = 5;
                        }
                    } else {
                        j = 5;
                    }
                }
            }
            if (to.readUntil("hb", si.ii.diagCmdTime[i])) {
            }
            resultLog = "PASS";
            return true;
        } catch (IOException e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean BluetoothTxTest(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String spec_fail[] = si.ii.cmd[i].split(",");
        String itemSpec[] = si.ii.Cut1[i].split(",");
        String nameSpec[] = si.ii.name[i].split(",");

        List<String> itemName = new ArrayList<String>();
        List<String> JsonName = new ArrayList<String>();
        List<String> Frequence = new ArrayList<String>();
        String Value[] = null;
        boolean Result[] = null;
        String TxPower[] = null;
        double CableLoss[] = null;

        String Spec[] = si.ii.spec[i].split(",");
//        if (!apv.getAPIJsonConfig(JsonName[0], si, i)) {    //通过apiName获取规格信息
//            addLog("JsonName:" + JsonName[0] + "  fail ", id);
//            return false;
//        }
        String path = apv.srfBLELitePointPath;
        boolean result = true;
        if (!path.endsWith(File.separator)) {
            path += File.separator;
        }
//        String pathLossPath = path + si.ii.diagCmd3[i];
        String newPathLossPath = path + si.ii.diagCmd4[i];
        String fileDetails = "";
        String IQlogPath = path + si.ii.Cut0[i];
        File IQLogFile = new File(IQlogPath);
        if (!IQLogFile.exists()) {
            this.addLog("not have " + IQlogPath, id);
            return false;
        }
        fileDetails = ParseIQLog(IQLogFile);
        try {

            File pathLoss = new File(newPathLossPath);
            if (pathLoss.exists()) {
                System.gc();
                pathLoss.delete();
            }
            if (pathLoss.exists()) {
                this.addLog(newPathLossPath + "\r\nDelete fail", id);
                result = false;
                String errorDes = "ble_delete";
                if (apv.allErrorCode.containsKey(errorDes)) {
                    si.ii.errorCode[i] = apv.allErrorCode.get(errorDes);
                    si.ii.errorDes[i] = errorDes;
                } else {
                    addLog(" not have this errorCode\t" + si.ii.errorDes[i]);
                    apv.showConfirmDialog(" not have this errorCode\t" + si.ii.errorDes[i]);
                }
                return false;
            }
            //------------------------判断TX-----------------------
            for (Object key : apv.IQlog.keySet()) {
                String item = (String) key;
                addLog("IQ   Ttem:" + item);
                for (int j = 0; j < itemSpec.length; j++) {
                    if (item.contains(itemSpec[j])) {


                        itemName.add(item);
                        String frequency = PatternStarts(item, "\\b\\d{4}\\b").trim();
                        Frequence.add(frequency);
                        String name = nameSpec[j] + frequency;

                        addLog("json Name:" + name);
                        JsonName.add(name);
                    }
                }
            }
            Result = new boolean[JsonName.size()];
            TxPower = new String[JsonName.size()];
            CableLoss = new double[JsonName.size()];

            Value = new String[JsonName.size()];
            // 尋找測試項目
            for (int j = 0; j < itemName.size(); j++) {
                if (!apv.IQlog.containsKey(itemName.get(j))) {
                    continue;
                }


                if (!apv.getAPIJsonConfig(JsonName.get(j), si, i)) {    //通过apiName获取规格信息
                    addLog("JsonName:" + JsonName.get(j) + "  fail ", id);
                    result = false;
                    return false;
                }

                String[] details = (String[]) apv.IQlog.get(itemName.get(j));   //按行获取
                Result[j] = true;
                TxPower[j] = "";
                CableLoss[j] = -99;
                Value[j] = "";

                for (int a = 0; a < details.length; a++) {
                    String string = details[a];

                    for (int m = 0; m < spec_fail.length; m++) {
                        if (string.contains(spec_fail[m])) {

                            result = false;
                            Result[j] = false;
                            break;
                        }
                    }
                    if (details[a].contains(si.ii.Cut2[i])) {
                        TxPower[j] = details[a].substring(details[a].indexOf(":") + 1, details[a].indexOf("dBm")).trim();

                    }
                    if (details[a].contains(si.ii.Cut3[i])) {
                        String cableLoss = details[a].substring(details[a].indexOf(":") + 1, details[a].indexOf("dB")).trim();
                        CableLoss[j] = Double.parseDouble(cableLoss);
                    }
                    for (int k = 0; k < Spec.length; k++) {

                        if (details[a].contains(Spec[k])) {
                            k = 99;
                            Value[j] = details[a].substring(details[a].indexOf(":") + 1, details[a].indexOf(si.ii.units[i])).trim();
                            String lower_limit = details[a].substring(details[a].indexOf("(") + 1, details[a].indexOf(",")).trim();
                            String upper_limit = details[a].substring(details[a].indexOf(",") + 1, details[a].indexOf(")")).trim();
                            addLog("get value=" + Value[j], id);
                            addLog("lower_limit=" + lower_limit, id);
                            addLog("upper_limit=" + upper_limit, id);
                            if (Value[j].equals("")) {
                                return false;
                            }
                            if ("".equals(si.ii.limitDown[i])) {
                                si.ii.limitDown[i] = lower_limit;
                            }
                            if ("".equals(si.ii.limitUp[i])) {
                                si.ii.limitUp[i] = upper_limit;
                            }
                            if (!lower_limit.equals(si.ii.limitDown[i])) {
                                addLog("json lower_limit=" + si.ii.limitDown[i], id);
                                apv.showMessage(null, "json lower_limit != IQ lower_limit");
                                Result[j] = false;
                                result = false;
                                return false;
                            }
                            if (!upper_limit.equals(si.ii.limitUp[i])) {
                                addLog("json upper_limit=" + si.ii.limitUp[i], id);
                                apv.showMessage(null, "json upper_limit != IQ upper_limit");

                                Result[j] = false;
                                result = false;
                                return false;
                            }

                        }
                    }

                }
                addLog("json Name:" + JsonName.get(j));
                addLog("IQ   Ttem:" + itemName.get(j));
                addLog("  TxPower:" + TxPower[j]);
                addLog("CableLoss:" + CableLoss[j]);
                addLog("    Value:" + Value[j]);
                if (TxPower[j].equals("") || CableLoss[j] == -99 || Value[j].equals("")) {
                    result = false;
                    return false;
                }
                double value = Double.parseDouble(Value[j]);
                double txPower = Double.parseDouble(TxPower[j]);
                CableLoss[j] = CableLoss[j] - (value - txPower);
            }

// -------------------------更新PathLoss-----------------------------------
            File file = new File(newPathLossPath);
            String[] frequence = new String[Frequence.size()];
            Frequence.toArray(frequence);
            if (!SetPathloss(frequence, CableLoss, file)) {
                addLog("Updating PathLoss fail", id);
                result = false;
                return false;
            }
            addLog("Updating PathLoss OK", id);
            if (result) {
                resultLog = "PASS";
            }
            return result;
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        } finally {
            StringBuilder log = new StringBuilder();
            StringBuilder Items = new StringBuilder();
            String[] Name = new String[JsonName.size()];
            JsonName.toArray(Name);
            apv.addApiJson(Name, Value, Result, i, id);
            for (int j = 0; j < JsonName.size(); j++) {
                Items.append(",").append(JsonName.get(j));
                log.append(",").append(Value[j]);
            }



            if (!result) {
                String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
                String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
                String IqNewPath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + File.separator + date + File.separator + apv.hostName + File.separator;;
                String fileName = apv.mlbSn[id - 1] + "_" + apv.sn[id - 1] + "_" + si.ii.itemDes[i]
                        + "_" + Time + "_" + resultLog + ".txt";
                saveIQlog(IqNewPath, fileName, fileDetails);
            }
            resultLog = "";
        }

    }

    public boolean BluetoothTxTestSweep(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String spec_fail[] = si.ii.cmd[i].split(",");
        String itemSpec[] = si.ii.Cut1[i].split(",");
        String nameSpec[] = si.ii.name[i].split(",");

        List<String> itemName = new ArrayList<String>();
        List<String> JsonName = new ArrayList<String>();
        List<String> Frequence = new ArrayList<String>();
        String Value[] = null;
        boolean Result[] = null;
        String TxPower[] = null;
        double CableLoss[] = null;

        String Spec[] = si.ii.spec[i].split(",");
//        if (!apv.getAPIJsonConfig(JsonName[0], si, i)) {    //通过apiName获取规格信息
//            addLog("JsonName:" + JsonName[0] + "  fail ", id);
//            return false;
//        }
        String path = apv.srfBLELitePointPath;
        boolean result = true;
        if (!path.endsWith(File.separator)) {
            path += File.separator;
        }
//        String pathLossPath = path + si.ii.diagCmd3[i];
        String newPathLossPath = path + si.ii.diagCmd4[i];
        String fileDetails = "";
        String IQlogPath = path + si.ii.Cut0[i];
        File IQLogFile = new File(IQlogPath);
        if (!IQLogFile.exists()) {
            this.addLog("not have " + IQlogPath, id);
            return false;
        }
        fileDetails = ParseIQLog(IQLogFile);
        try {

            File pathLoss = new File(newPathLossPath);
            if (pathLoss.exists()) {
                pathLoss.delete();
            }
            if (pathLoss.exists()) {
                this.addLog(newPathLossPath + "\r\nDelete fail", id);
                result = false;
                String errorDes = "ble_delete";
                if (apv.allErrorCode.containsKey(errorDes)) {
                    si.ii.errorCode[i] = apv.allErrorCode.get(errorDes);
                    si.ii.errorDes[i] = errorDes;
                } else {
                    addLog(" not have this errorCode\t" + si.ii.errorDes[i]);
                    apv.showConfirmDialog(" not have this errorCode\t" + si.ii.errorDes[i]);
                }
                return false;
            }
            //------------------------判断TX-----------------------
            for (Object key : apv.IQlog.keySet()) {
                String item = (String) key;
                addLog("IQ   Ttem:" + item);
                for (int j = 0; j < itemSpec.length; j++) {
                    if (item.contains(itemSpec[j])) {


                        itemName.add(item);
                        String frequency = PatternStarts(item, "\\b\\d{4}\\b").trim();
                        Frequence.add(frequency);
                        String name = nameSpec[j] + frequency;

                        addLog("json Name:" + name);
                        JsonName.add(name);
                    }
                }
            }
            Result = new boolean[JsonName.size()];
            TxPower = new String[JsonName.size()];
            CableLoss = new double[JsonName.size()];

            Value = new String[JsonName.size()];
            // 尋找測試項目
            for (int j = 0; j < itemName.size(); j++) {
                if (!apv.IQlog.containsKey(itemName.get(j))) {
                    continue;
                }


//                if (!apv.getAPIJsonConfig(JsonName.get(j), si, i)) {    //通过apiName获取规格信息
//                    addLog("JsonName:" + JsonName.get(j) + "  fail ", id);
//                    result = false;
//                    return false;
//                }

                String[] details = (String[]) apv.IQlog.get(itemName.get(j));   //按行获取
                Result[j] = true;
                TxPower[j] = "";
                CableLoss[j] = -99;
                Value[j] = "";

                for (int a = 0; a < details.length; a++) {
                    String string = details[a];

                    for (int m = 0; m < spec_fail.length; m++) {
                        if (string.contains(spec_fail[m])) {

                            result = false;
                            Result[j] = false;
                            break;
                        }
                    }
                    if (details[a].contains(si.ii.Cut2[i])) {
                        TxPower[j] = details[a].substring(details[a].indexOf(":") + 1, details[a].indexOf("dBm")).trim();

                    }
                    if (details[a].contains(si.ii.Cut3[i])) {
                        String cableLoss = details[a].substring(details[a].indexOf(":") + 1, details[a].indexOf("dB")).trim();
                        CableLoss[j] = Double.parseDouble(cableLoss);
                    }
                    for (int k = 0; k < Spec.length; k++) {

                        if (details[a].contains(Spec[k])) {
                            k = 99;
                            System.out.println(details[a]);
                            Value[j] = details[a].substring(details[a].indexOf(":") + 1, details[a].indexOf("dBm")).trim();
                            String lower_limit = details[a].substring(details[a].indexOf("(") + 1, details[a].indexOf(",")).trim();
                            String upper_limit = details[a].substring(details[a].indexOf(",") + 1, details[a].indexOf(")")).trim();
                            addLog("get value=" + Value[j], id);
                            addLog("lower_limit=" + lower_limit, id);
                            addLog("upper_limit=" + upper_limit, id);
                            if (Value[j].equals("")) {
                                return false;
                            }
//                            if ("".equals(si.ii.limitDown[i])) {
//                                si.ii.limitDown[i] = lower_limit;
//                            }
//                            if ("".equals(si.ii.limitUp[i])) {
//                                si.ii.limitUp[i] = upper_limit;
//                            }
//                            if (!lower_limit.equals(si.ii.limitDown[i])) {
//                                addLog("json lower_limit=" + si.ii.limitDown[i], id);
//                                apv.showMessage(null, "json lower_limit != IQ lower_limit");
//                                Result[j] = false;
//                                result = false;
//                                return false;
//                            }
//                            if (!upper_limit.equals(si.ii.limitUp[i])) {
//                                addLog("json upper_limit=" + si.ii.limitUp[i], id);
//                                apv.showMessage(null, "json upper_limit != IQ upper_limit");
//
//                                Result[j] = false;
//                                result = false;
//                                return false;
//                            }

                        }
                    }

                }
                addLog("json Name:" + JsonName.get(j));
                addLog("IQ   Ttem:" + itemName.get(j));
                addLog("  TxPower:" + TxPower[j]);
                addLog("CableLoss:" + CableLoss[j]);
                addLog("    Value:" + Value[j]);
                if (TxPower[j].equals("") || CableLoss[j] == -99 || Value[j].equals("")) {
                    result = false;
                    return false;
                }
                double value = Double.parseDouble(Value[j]);
                double txPower = Double.parseDouble(TxPower[j]);
                CableLoss[j] = CableLoss[j] - (value - txPower);
            }

// -------------------------更新PathLoss-----------------------------------
            File file = new File(newPathLossPath);
            String[] frequence = new String[Frequence.size()];
            Frequence.toArray(frequence);
            if (!SetPathloss(frequence, CableLoss, file)) {
                addLog("Updating PathLoss fail", id);
                result = false;
                return false;
            }
            addLog("Updating PathLoss OK", id);
            if (result) {
                resultLog = "PASS";
            }
            return result;
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        } finally {
            StringBuilder log = new StringBuilder();
            StringBuilder Items = new StringBuilder();
//            String[] Name = new String[JsonName.size()];
//            JsonName.toArray(Name);
//            apv.addApiJson(Name, Value, Result, i);
//            for (int j = 0; j < JsonName.size(); j++) {
//                Items.append(",").append(JsonName.get(j));
//                log.append(",").append(Value[j]);
//            }



            if (!result) {
                String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
                String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
                String IqNewPath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + File.separator + date + File.separator + apv.hostName + File.separator;;
                String fileName = apv.mlbSn[id - 1] + "_" + apv.sn[id - 1] + "_" + si.ii.itemDes[i]
                        + "_" + Time + "_" + resultLog + ".txt";
                saveIQlog(IqNewPath, fileName, fileDetails);
            }
            resultLog = "";
        }

    }

    public boolean BluetoothRxTest(StationInfo si, int i, int id) {
        apv.IQlog.clear();
        resultLog = "overtime";
        String spec_fail[] = si.ii.cmd[i].split(",");
        String[] apiName = null;
        String Value[] = null;
        boolean Result[] = null;

        List<String> iqItem = new ArrayList<String>();

        String spec[] = si.ii.spec[i].split(",");
//        if (!apv.getAPIJsonConfig(JsonName[0], si, i)) {    //通过apiName获取规格信息
//            addLog("JsonName:" + JsonName[0] + "  fail ", id);
//            return false;
//        }
        String path = apv.srfBLELitePointPath;
        if (!path.endsWith(File.separator)) {
            path += File.separator;
        }
        String IQlogPath = path + si.ii.Cut0[i];
        //------------------------run  iQ----------------------------------
        String fileDetails = "";
        try {

            File IQLogFile = null;

            IQLogFile = new File(IQlogPath);

            if (!IQLogFile.exists()) {
                this.addLog("not have " + IQlogPath, id);
                return false;
            }

// -------------------------跑RX-----------------------------------
            fileDetails = "";
            readIQlog(IQLogFile, si.ii.diagCmdTime[i]);
            fileDetails = ParseIQLog(IQLogFile);

            if (apv.IQlog.containsKey("RESERT")) {   //找出IQ 測試項目
                String[] details = (String[]) apv.IQlog.get("RESERT");
                for (int j = 0; j < details.length; j++) {
//                    if (details[j].contains("F A I L") || (details[j].contains("[Failed]"))) {
//                        addLog(details[j], id);
//                        result = false;
//                    }
//                    for (int k = 0; k < itemName.length; k++) {
                    if (details[j].contains(si.ii.Cut1[i])) {
                        String Item = details[j].substring(0, details[j].indexOf(":")).trim();
                        addLog(Item, id);
                        iqItem.add(Item);
                    }
//                    }
                }
            } else {
                resultLog = "FAIL";
                return false;
            }
            apiName = new String[iqItem.size()];
            Value = new String[iqItem.size()];
            Result = new boolean[iqItem.size()];
            for (int j = 0; j < iqItem.size(); j++) {
//                 boolean result = true;
//                if (!apv.getAPIJsonConfig(JsonName[j], si, i)) {    //通过apiName获取规格信息
//                    addLog("JsonName:" + JsonName[j] + "  fail ", id);
//                    return false;
//                }
                if (!apv.IQlog.containsKey(iqItem.get(j))) {
                    this.addLog("not have " + iqItem.get(j), id);
//                    result = false;
                    return false;
                }
                Result[j] = true;
                // addLog("JsonName:" + JsonName[j], id);
                String[] details = (String[]) apv.IQlog.get(iqItem.get(j));
                String lower_limit = "";
                String upper_limit = "";
                String rxPower = "";
                String frequency = "f" + PatternStarts(iqItem.get(j), "\\b\\d{4}\\b").trim();
//                boolean stt =false;
                for (int k = 0; k < details.length; k++) {

                    if (details[k].contains(si.ii.Cut2[i])) {
                        if (details[k].contains("(")) {
                            continue;
                        } else if (details[k].contains(",")) {
                            continue;
                        } else if (details[k].contains(")")) {
                            continue;
                        } else if (!rxPower.equals("")) {
                            continue;
                        }
                        rxPower = details[k].substring(details[k].lastIndexOf(":") + 1, details[k].indexOf("dBm")).trim();
                        apiName[j] = si.ii.name[i] + frequency + "_p" + rxPower;
                        addLog(apiName[j], id);
                        if (!apv.getAPIJsonConfig(apiName[j], si, i)) {    //通过apiName获取规格信息
                            addLog("JsonName:" + apiName[j] + "  fail ", id);
                            break;
                        }
                    }
                    if (apiName[j] == null) {
                        continue;
                    }
                    for (int l = 0; l < spec.length; l++) {
                        if (details[k].startsWith(spec[l])) {
                            for (int m = 0; m < spec_fail.length; m++) {
                                if (details[k].contains(spec_fail[m])) {
                                    addLog(details[k], id);
                                    Result[j] = false;
                                    break;
                                }
                            }
                            l = 99;
                            int startIndex = details[k].indexOf(":") + 1;
                            int endIndex = details[k].indexOf(si.ii.units[i]);
                            Value[j] = details[k].substring(startIndex, endIndex).trim();
                            lower_limit = details[k].substring(details[k].indexOf("(") + 1, details[k].indexOf(",")).trim();
                            upper_limit = details[k].substring(details[k].indexOf(",") + 1, details[k].indexOf(")")).trim();
                        }
                    }


                }
                addLog("get value=" + Value[j], id);
                addLog("lower_limit=" + lower_limit, id);
                addLog("upper_limit=" + upper_limit, id);
                if ("".equals(si.ii.limitDown[i])) {
                    si.ii.limitDown[i] = lower_limit;
                }
                if ("".equals(si.ii.limitUp[i])) {
                    si.ii.limitUp[i] = upper_limit;

                }
                if (!lower_limit.equals(si.ii.limitDown[i])) {
                    addLog("json lower_limit=" + si.ii.limitDown[i], id);
                    addLog("json lower_limit != IQ lower_limit", id);
                    apv.showConfirmDialog("json lower_limit != IQ lower_limit");
                    Result[j] = false;
//                    result = false;
                    continue;
                }
                if (!upper_limit.equals(si.ii.limitUp[i])) {
                    addLog("json upper_limit=" + si.ii.limitUp[i], id);
                    addLog("json upper_limit != IQ upper_limit", id);
                    apv.showConfirmDialog("json upper_limit != IQ upper_limit");
                    Result[j] = false;
//                    result = false;
                    continue;
                }
//                Result[j] = result;
            }


            for (int j = 0; j < Result.length; j++) {
                if (!Result[j]) {
                    resultLog = "FAIL";
                    return false;
                }
            }

            resultLog = "PASS";
            return true;

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            StringBuilder log = new StringBuilder();
            StringBuilder Items = new StringBuilder();
            apv.addApiJson(apiName, Value, Result, i, id);
            for (int j = 0; j < apiName.length; j++) {
                Items.append(",").append(apiName[j]);
                log.append(",").append(Value[j]);
            }


            //-------------------------close dut command---------------
//            apv.addApiJson(apiName, Value, Result, i);
            to.sendCommand("qcatestcmd -i wifi0 --tx off --phyId 0");
            to.sendCommand("qcatestcmd -i wifi0 --tx off --phyId 1");
            to.sendCommand("qcatestcmd -i wifi0 --tx off --phyId 2");
            try {
                Runtime.getRuntime().exec("taskkill /f /t /im  IQfactRun_Console.exe");


            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
            String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
            String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
            String IqNewPath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + File.separator + date + File.separator + apv.hostName + File.separator;;
            String fileName = apv.mlbSn[id - 1] + "_" + apv.sn[id - 1] + "_" + si.ii.itemDes[i] + "_" + Time + "_" + resultLog + ".txt";
            saveIQlog(IqNewPath, fileName, fileDetails);
            resultLog = "";
        }
        return false;
    }

    public boolean BluetoothRxTestSweep(StationInfo si, int i, int id) {
        apv.IQlog.clear();
        resultLog = "overtime";
        String[] apiName = null;
        String Value[] = null;
        boolean Result[] = null;
        List<String> iqItem = new ArrayList<String>();
        String path = apv.srfBLELitePointPath;
        if (!path.endsWith(File.separator)) {
            path += File.separator;
        }
        String IQlogPath = path + si.ii.Cut0[i];
        //------------------------run  iQ----------------------------------
        String fileDetails = "";
        try {

            File IQLogFile = null;

            IQLogFile = new File(IQlogPath);

            if (!IQLogFile.exists()) {
                this.addLog("not have " + IQlogPath, id);
                return false;
            }

// -------------------------跑RX-----------------------------------
            fileDetails = "";
            readIQlog(IQLogFile, si.ii.diagCmdTime[i]);
            fileDetails = ParseIQLog(IQLogFile);

            if (apv.IQlog.containsKey("RESERT")) {   //找出IQ 測試項目
            } else {
                resultLog = "FAIL";
                return false;
            }
            resultLog = "PASS";
            return true;

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {



            //-------------------------close dut command---------------
            apv.addApiJson(apiName, Value, Result, i, id);
            to.sendCommand("qcatestcmd -i wifi0 --tx off --phyId 0");
            to.sendCommand("qcatestcmd -i wifi0 --tx off --phyId 1");
            to.sendCommand("qcatestcmd -i wifi0 --tx off --phyId 2");
            try {
                Runtime.getRuntime().exec("taskkill /f /t /im  IQfactRun_Console.exe");


            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
            String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
            String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
            String IqNewPath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + File.separator + date + File.separator + apv.hostName + File.separator;;
            String fileName = apv.mlbSn[id - 1] + "_" + apv.sn[id - 1] + "_" + si.ii.itemDes[i] + "_" + Time + "_" + resultLog + ".txt";
            saveIQlog(IqNewPath, fileName, fileDetails);
            resultLog = "";
        }
        return false;
    }

    public boolean RunBLEScrip(StationInfo si, int i, int id) {
        resultLog = "outTime";
        apv.IQlog.clear();
        File IQLogFile = null;
        boolean getlog = false;

        if (!to.connect(si.ii.cmd1[i])) {
            addLog("Telnet " + si.ii.cmd1[i] + " Fail!", id);
            return false;
        }
        to.readUntil(si.ii.diagCmd[i], 1);
        //-------------------------start dut command---------------
        File CmdFile = new File(si.ii.cmd2[i]);
        if (!CmdFile.exists()) {
            this.addLog("not have file " + si.ii.cmd2[i], id);
            return false;
        }
        BufferedReader br = null;
        String iqLogLine = "";
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
            while ((iqLogLine = br.readLine()) != null) {
//                this.addLog(iqLogLine, 1, id);
                if (!to.sendCommandAndRead(iqLogLine, si.ii.diagCmd3[i], si.ii.diagCmdTime[i])) {
//                    this.//addLog(to.getString, 1, id);
                    addLog("CMD " + iqLogLine + " Fail!", id);

                    return false;
                }
//                this.//addLog(to.getString, 1, id);
            }

        } catch (IOException e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

        IQLogFile = new File(si.ii.cmd3[i]);             //查看IQ是否跑完
        //保存文件路径
        String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
        String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
        String filePath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + date + File.separator + apv.hostName + File.separator;

        String fileDetails = null;
        try {

            if (!ping(si.ii.socketIp[i], 5)) {
                addLog("Ping  IQ" + si.ii.socketIp[i] + " FAIL!", id);
                return false;
            }
            addLog("****************************************", id);
            addLog(IQLogFile.getPath(), id);
            if (IQLogFile.exists()) {
                System.gc();
                IQLogFile.delete();
            }
            if (IQLogFile.exists()) {
                this.addLog(IQLogFile.getName() + "\r\nDelete fail", id);
                apv.showConfirmDialog(IQLogFile.getName() + "\r\nDelete fail");
                System.exit(0);
                return false;
            }
            if (!apv.IQconfig.runinBLENmae.containsKey(apv.IQconfig.getIQport())) {
                this.addLog("not have " + apv.IQconfig.getIQport(), id);
                return false;
            }
            String runBat = apv.IQconfig.runinBLENmae.get(apv.IQconfig.getIQport());

//
            addLog("IQ cmd: " + runBat, id);
            String cmd = "cmd /c " + runBat;

            addLog("IQ cmd: " + cmd, id);

            Runtime.getRuntime().exec(cmd);
            Thread.sleep(3000);
//            IQLogFile = new File("BLE.TXT");
            if (!IQLogFile.exists()) {
                this.addLog("not have " + IQLogFile.getName(), id);

            }
            getlog = true;
            File fnewpath = new File(filePath); //文件新（目标）地址 
            if (!fnewpath.exists()) //判断文件夹是否存在 
            {
                fnewpath.mkdirs();
            }
            //保存文件路径
            this.addLog(IQLogFile.getName(), id);
            readIQlog(IQLogFile, si.ii.diagCmdTime[i]);
//            readIQlog(IQLogFile, filePath, si.ii.diagCmdTime[i]);

            fileDetails = ParseIQLog(IQLogFile);
//            ParseIQLog(fileDetails);
            if (apv.IQlog.containsKey("RESERT")) {
                resultLog = "PASS";

                String[] details = (String[]) apv.IQlog.get("RESERT");

                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains("[Failed]")) {
                        addLog(details[j], id);
                        resultLog = "FAIL";
                        if (details[j].contains("INSERT_DUT")) {
//                            si.ii.errorDeses[i] = "INSERT_DUT FAIL!";
                            return false;
                        }
                    }
                }
                if (si.ii.diagCmd2[i].equals("1") && resultLog.equals("FAIL")) {
                    addLog("wifi IQ result fail", id);
                    return false;
                }
                addLog("read wifi IQ log OK", id);
//                resultLog = "PASS";
                return true;
            } else {
                if (iqLogFailedItem.contains("XTAL_CALIBRATION")) {
                    si.ii.errorCode[i] = "10.1";
                    si.ii.errorDes[i] = "WiFiCalibration.CrystalCalibration";
                    return false;
                } else if (iqLogFailedItem.contains("TX_CALIBRATION")) {
                    String[] details = (String[]) apv.IQlog.get(iqLogFailedItem);
//                    String details = "";
//                    addLog("Fail: " + details[s], id);
                    String frequency = "Freq:";
//                    int chain = 0;
                    for (int k = 0; k < details.length; k++) {
                        try {
//                            chain = Integer.parseInt(details[s].substring(details[s].lastIndexOf(":") + 1, details[s].lastIndexOf(" ")).trim()) - 1;
                            frequency = details[k].substring(details[k].indexOf(frequency) + frequency.length(), details[k].indexOf(",txChainMask")).trim();
                            break;
                        } catch (Exception e) {
                            continue;
                        }

                    }

                    return false;
                } else {
                    this.addLog(" read wifi IQ log.txt erro", id);
                    return false;
                }
            }


        } catch (Exception e) {
            e.printStackTrace();
            this.addLog(e.toString(), id);
            return false;
        } finally {

            to.disconnect();
            try {
                Runtime.getRuntime().exec("taskkill /f /t /im  IQfactRun_Console.exe");







            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
            String sn = apv.sn[id - 1];
            if (sn.equals("")) {
                sn = apv.mlbSn[id - 1];
            }
            String fileName = apv.mlbSn[id - 1] + "_" + si.ii.name[i] + "_" + Time + "_" + resultLog + ".txt";
            String ftpPath = filePath.replaceAll("\\\\", "/");
//            filePath = filePath + fileName;
            if (!getlog) {
                return false;
            }
            try {
//                fileName = apv.mlbSn[id - 1] + "_" + si.ii.name[i] + "_" + Time + "_" + resultLog + ".txt";
                if (fileDetails != null && fileDetails.length() > 1) {
                    apv.setZipFile(fileName, IQLogFile);
                    if (apv.uc.ftpFlag == 1) {
                        if (apv.ftp.writeftpFile(ftpPath, fileName, fileDetails)) {
                            addLog(ftpPath + fileName + " save OK", id);
                        } else {
                            apv.showConfirmDialog(ftpPath + fileName + "\r\n save fail");
                        }
                    } else {
                        if (saveIQlog(filePath + fileName, fileDetails)) {
                            addLog(filePath + fileName + " save OK", id);
                        } else {
                            apv.showConfirmDialog(filePath + fileName + "\r\n save fail");
                        }
                    }


                }
            } catch (Exception e) {
                e.printStackTrace();
                apv.showConfirmDialog(filePath + "\r\n save fail\r\n" + e.getLocalizedMessage());
                return false;
            }
            if (resultLog.equals("outTime")) {
                resultLog = "FAIL";
            }


        }

    }

    public boolean ambitRunWifiIQScrip(StationInfo si, int i, int id) {
        resultLog = "overtime";

        apv.IQlog.clear();
        File IQLogFile = null;
        boolean getlog = false;
        String litepoint = apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut0[i];
//        String Bin_2G = apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut1[i];
//        String Bin_5G = apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut2[i];
//        String Bin_6G = apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut3[i];

        String qmslLogsPath = apv.mbftWiFiLitePointPath + File.separator + "log";
        IQLogFile = new File(litepoint);             //查看IQ是否跑完


        //保存文件路径
//        String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
//        String filePath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + date + File.separator + apv.hostName + File.separator;


        try {
            try {
                Runtime.getRuntime().exec("wmic process where name=\"IQfactRun_Console.exe\" call terminate");
                Thread.sleep(500);
            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
//            
            String[] IQ_File_name = {"log"};
            String[] IQ_File_Path = {litepoint};
//            if (!ping(si.ii.socketIp[i], 5)) {
//                addLog("Ping  IQ" + si.ii.socketIp[i] + " FAIL!", id);
//                return false;
//            }
            addLog(IQLogFile.getPath(), id);
            for (int j = 0; j < IQ_File_Path.length; j++) {    //刪除文件
                File IQ_File = new File(IQ_File_Path[j]);
                addLog("Delete " + IQ_File_name[j]);
                if (IQ_File.exists()) {
                    System.gc();
                    IQ_File.delete();
                }
                if (IQ_File.exists()) {
                    addLog(IQ_File.getPath() + "\tDelete fail", id);
                    apv.showConfirmDialog(IQ_File.getPath() + "\r\nDelete fail");
                    System.exit(0);
                }
            }

//            if (!deleteFilesInFolder(qmslLogsPath, si.ii.Cut4[i])) {  //刪除文件夾的文件
////                addLog(qmslLogsPath + "\tDelete fail", id);
//                String errorDes = "wifi_delete";
//                if (apv.allErrorCode.containsKey(errorDes)) {
//                    si.ii.errorCode[i] = apv.allErrorCode.get(errorDes);
//                    si.ii.errorDes[i] = errorDes;
//                } else {
//                    addLog(" not have this errorCode\t" + si.ii.errorDes[i]);
//                    apv.showConfirmDialog(" not have this errorCode\t" + si.ii.errorDes[i]);
//                }
//                System.exit(0);
//                return false;
//            }
//            deleteFilesInFolder(date, IQResult);                   //刪除文件夾的文件

            if (!apv.IQconfig.runinWifiNmae.containsKey(apv.IQconfig.getIQport())) {
                this.addLog("not have " + apv.IQconfig.getIQport(), id);
                return false;
            }
            String runBat = apv.IQconfig.runinWifiNmae.get(apv.IQconfig.getIQport());

            addLog("IQ cmd: " + runBat, id);
            String cmd = "cmd /c " + runBat;
            Runtime.getRuntime().exec(cmd);
            Thread.sleep(3000);
            if (!IQLogFile.exists()) {
                this.addLog("not have " + IQLogFile.getName(), id);
                return false;
            }

            if (readIQResult(IQLogFile, si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                resultLog = "PASS";
                return true;
            }
            try {
                Runtime.getRuntime().exec("wmic process where name=\"IQfactRun_Console.exe\" call terminate");
                Thread.sleep(500);
            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;

        } catch (Exception e) {
            e.printStackTrace();
            this.addLog(e.toString(), id);
            return false;
        } finally {
//            to.disconnect();
        }

    }

    public boolean ambitRunWifiIQScrip1(StationInfo si, int i, int id) {
        resultLog = "overtime";

        apv.IQlog.clear();
        File IQLogFile = null;
        boolean getlog = false;
        String litepoint = apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut0[i];
        String Bin_2G = apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut1[i];
        String Bin_5G = apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut2[i];
        String Bin_6G = apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut3[i];

        String qmslLogsPath = apv.mbftWiFiLitePointPath + File.separator + "log";
        IQLogFile = new File(litepoint);             //查看IQ是否跑完


        //保存文件路径
        String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
        String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
        String filePath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + date + File.separator + apv.hostName + File.separator;
        String IQResult = resultLog;
        String fileDetails = null;

        try {
            String[] IQ_File_name = {"log", "Bin_2G", "Bin_5G", "Bin_6G"};
            String[] IQ_File_Path = {litepoint, Bin_2G, Bin_5G, Bin_6G};
            if (!ping(si.ii.socketIp[i], 5)) {
                addLog("Ping  IQ" + si.ii.socketIp[i] + " FAIL!", id);
                return false;
            }
            addLog(IQLogFile.getPath(), id);
            for (int j = 0; j < IQ_File_Path.length; j++) {    //刪除文件
                File IQ_File = new File(IQ_File_Path[j]);
                addLog("Delete " + IQ_File_name[j]);
                if (IQ_File.exists()) {
                    System.gc();
                    IQ_File.delete();
                }
                if (IQ_File.exists()) {
                    addLog(IQ_File.getPath() + "\tDelete fail", id);
                    apv.showConfirmDialog(IQ_File.getPath() + "\r\nDelete fail");
                    System.exit(0);
                    String errorDes = "wifi_delete";
                    if (apv.allErrorCode.containsKey(errorDes)) {
                        si.ii.errorCode[i] = apv.allErrorCode.get(errorDes);
                        si.ii.errorDes[i] = errorDes;
                    } else {
                        addLog(" not have this errorCode\t" + si.ii.errorDes[i]);
                        apv.showConfirmDialog(" not have this errorCode\t" + si.ii.errorDes[i]);
                    }
                    return false;
                }
            }

            if (!deleteFilesInFolder(qmslLogsPath, si.ii.Cut4[i])) {  //刪除文件夾的文件
                addLog(qmslLogsPath + "\tDelete fail", id);
                String errorDes = "wifi_delete";
                if (apv.allErrorCode.containsKey(errorDes)) {
                    si.ii.errorCode[i] = apv.allErrorCode.get(errorDes);
                    si.ii.errorDes[i] = errorDes;
                } else {
                    addLog(" not have this errorCode\t" + si.ii.errorDes[i]);
                    apv.showConfirmDialog(" not have this errorCode\t" + si.ii.errorDes[i]);
                }
                return false;
            }
//            deleteFilesInFolder(date, IQResult);                   //刪除文件夾的文件

            if (!apv.IQconfig.runinWifiNmae.containsKey(apv.IQconfig.getIQport())) {
                this.addLog("not have " + apv.IQconfig.getIQport(), id);
                return false;
            }
            String runBat = apv.IQconfig.runinWifiNmae.get(apv.IQconfig.getIQport());

            addLog("IQ cmd: " + runBat, id);
            String cmd = "cmd /c " + runBat;
            Runtime.getRuntime().exec(cmd);
            Thread.sleep(3000);
            if (!IQLogFile.exists()) {
                this.addLog("not have " + IQLogFile.getName(), id);
                return false;
            }

            getlog = true;
            File fnewpath = new File(filePath); //文件新（目标）地址 
            if (!fnewpath.exists()) //判断文件夹是否存在 
            {
                fnewpath.mkdirs();
            }
            //保存文件路径1
            IQResult = readIQResult(IQLogFile, si.ii.diagCmdTime[i]);
//            readIQlog(IQLogFile, filePath, si.ii.diagCmdTime[i]);

            fileDetails = ParseIQLog(IQLogFile);
//            ParseIQLog(fileDetails);
            if (apv.IQlog.containsKey("RESERT")) {
                resultLog = "PASS";

                String[] details = (String[]) apv.IQlog.get("RESERT");

                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains("[Failed]")) {
                        addLog(details[j], id);
                        resultLog = "FAIL";
                        if (details[j].contains("INSERT_DUT")) {
//                            si.ii.errorDeses[i] = "INSERT_DUT FAIL!";
                            return false;
                        }
                    }
                }
                if (si.ii.diagCmd2[i].equals("1") && resultLog.equals("FAIL")) {
                    addLog("wifi IQ result fail", id);
                    return false;
                }
                addLog("read wifi IQ log OK", id);
//                resultLog = "PASS";
                return true;
            } else {

                if (iqLogFailedItem.contains("TEST_VERIFY EVM POWER")) {
                    String frequency = PatternStarts(iqLogFailedItem, "\\b\\d{4}\\b").trim();
                    String str = iqLogFailedItem.substring(iqLogFailedItem.indexOf("MCS"));
                    String mcs = str.substring(0, str.indexOf(" ")).trim();
                    str = iqLogFailedItem.substring(iqLogFailedItem.indexOf("BW-") + 3);
                    String bw = str.substring(0, str.indexOf(" ")).trim();
                    str = iqLogFailedItem.substring(iqLogFailedItem.indexOf("ANT"));
                    String ANT = str.substring(str.indexOf("ANT") + 3).trim();
                    String JsonName = "WIFI_TX_POWER_F" + frequency + "_BW" + bw + "_" + mcs + "_A" + ANT;

                    String errorDes = JsonName.toLowerCase();
                    addLog("errorDes： " + errorDes, id);
                    if (apv.setErrorCode(errorDes, i)) {
                        si.ii.errorCode[i] = errorDes;
                    }
                    return false;
                } else if (iqLogFailedItem.contains("TEST_VERIFY PER")) {
                    String frequency = PatternStarts(iqLogFailedItem, "\\b\\d{4}\\b").trim();
                    String BW = "BW" + iqLogFailedItem.substring(iqLogFailedItem.indexOf("BW-") + 3, iqLogFailedItem.indexOf("ANT")).trim();

                    String JsonName = "WIFI_RX_PER_F" + frequency + "_" + BW + "_P";
                    String errorDes = JsonName.toLowerCase();
                    addLog("errorDes： " + errorDes, id);
                    if (apv.setErrorCode(errorDes, i)) {
                        si.ii.errorCode[i] = errorDes;
                    }

                    return false;
                } else if (iqLogFailedItem.contains("TEST_RUN")) {
                    String errorDes = "wifi_ofdma";
                    addLog("errorDes： " + errorDes, id);
                    if (apv.setErrorCode(errorDes, i)) {
                        si.ii.errorCode[i] = errorDes;
                    }
                    return false;
                } else if (iqLogFailedItem.contains("TX_CALIBRATION")) {
                    String errorDes = iqLogFailedItem.substring(iqLogFailedItem.indexOf(".") + 1).toLowerCase();
                    addLog("errorDes： " + errorDes, id);
                    if (apv.setErrorCode(errorDes, i)) {
                        si.ii.errorCode[i] = errorDes;
                    }
                    return false;
                } else {

                    this.addLog(" read wifi IQ log.txt erro", id);
                    return false;
                }
            }


        } catch (Exception e) {
            e.printStackTrace();
            this.addLog(e.toString(), id);
            return false;
        } finally {

            to.disconnect();
            try {
                Runtime.getRuntime().exec("taskkill /f /t /im  IQfactRun_Console.exe");



            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }


            String sn = apv.sn[id - 1];
            if (sn.equals("")) {
                sn = apv.mlbSn[id - 1];
            }
            String fileName = apv.mlbSn[id - 1] + "_" + si.ii.name[i] + "_" + si.ii.itemDes[i] + "_" + Time + "_" + IQResult + ".txt";
            String ftpPath = filePath.replaceAll("\\\\", "/");
//            filePath = filePath + fileName;
            if (!getlog) {
                return false;
            }
            try {
//                fileName = apv.mlbSn[id - 1] + "_" + si.ii.name[i] + "_" + Time + "_" + resultLog + ".txt";
                if (fileDetails != null && fileDetails.length() > 1) {
                    apv.setZipFile(fileName, IQLogFile);
//                    if (apv.uc.ftpFlag == 1) {
                    if (apv.ftp.writeftpFile(ftpPath, fileName, fileDetails)) {
                        addLog(ftpPath + fileName + " save OK", id);
                    } else {
                        apv.showConfirmDialog(ftpPath + fileName + "\r\n save fail");
                    }
                    File qmslLogsfile = LongFileName(qmslLogsPath, si.ii.Cut4[i]);
                    if (qmslLogsfile == null) {
                        addLog("not found file" + si.ii.Cut4[i], id);
                        apv.showConfirmDialog("not found file" + si.ii.Cut4[i]);
                        return false;
                    } else {
                        String qmslLogsfileName = apv.mlbSn[id - 1] + "_" + si.ii.name[i] + "_QMSL_LOGS_" + Time + "_" + IQResult + ".txt";

                        if (apv.ftp.writeftpFile(qmslLogsfile, ftpPath, qmslLogsfileName)) {
                            addLog(ftpPath + qmslLogsfileName + " save OK", id);
                        } else {
                            apv.showConfirmDialog(ftpPath + qmslLogsfileName + "\r\n save fail");
                        }
                    }
                }
                if (IQResult.equals("PASS")) {
                    String[] IQ_File_Path = {Bin_2G, Bin_5G, Bin_6G};
                    String[] IQ_File_name = {si.ii.Cut1[i], si.ii.Cut2[i], si.ii.Cut3[i]};
                    String fileBinPath = si.logPath + File.separator + "IQ" + File.separator + "Bin" + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + date + File.separator + apv.hostName + File.separator;
                    fileBinPath = fileBinPath.replaceAll("\\\\", "/");
                    for (int j = 0; j < IQ_File_Path.length; j++) {
                        File IQ_File = new File(IQ_File_Path[j]);
                        String IQ_File_Name = apv.mlbSn[id - 1] + "_" + IQ_File_name[j];
                        if (apv.ftp.writeftpFile(IQ_File, fileBinPath, IQ_File_Name)) {
                            addLog(fileBinPath + IQ_File_Name + " save OK", id);
                        } else {
                            apv.showConfirmDialog(fileBinPath + IQ_File_Name + "\r\n save fail");
                        }


                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
                apv.showConfirmDialog(filePath + "\r\n save fail\r\n" + e.getLocalizedMessage());
                return false;
            }
            if (resultLog.equals("outTime")) {
                resultLog = "FAIL";
            }


        }

    }

    public boolean ambitRunWifiIQScripSweep(StationInfo si, int i, int id) {
        resultLog = "overtime";

        apv.IQlog.clear();
        File IQLogFile = null;
        boolean getlog = false;
        String litepoint = apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut0[i];
        String Bin_2G = apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut1[i];
        String Bin_5G = apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut2[i];
        String Bin_6G = apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut3[i];
        String qmslLogsPath = apv.mbftWiFiLitePointPath + File.separator + "log";
        IQLogFile = new File(litepoint);             //查看IQ是否跑完


        //保存文件路径
        String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
        String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
        String filePath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + date + File.separator + apv.hostName + File.separator;
        String IQResult = resultLog;
        String fileDetails = null;

        try {
            String[] IQ_File_Path = {litepoint, Bin_2G, Bin_5G, Bin_6G};
            if (!ping(si.ii.socketIp[i], 5)) {
                addLog("Ping  IQ" + si.ii.socketIp[i] + " FAIL!", id);
                return false;
            }
            addLog(IQLogFile.getPath(), id);
            for (int j = 0; j < IQ_File_Path.length; j++) {    //刪除文件
                File IQ_File = new File(IQ_File_Path[j]);
                if (IQ_File.exists()) {
                    System.gc();
                    IQ_File.delete();
                }
                if (IQ_File.exists()) {
                    addLog(IQ_File.getPath() + "\tDelete fail", id);
                    apv.showConfirmDialog(IQ_File.getPath() + "\r\nDelete fail");
                    System.exit(0);
                    String errorDes = "wifi_delete";
                    if (apv.allErrorCode.containsKey(errorDes)) {
                        si.ii.errorCode[i] = apv.allErrorCode.get(errorDes);
                        si.ii.errorDes[i] = errorDes;
                    } else {
                        addLog(" not have this errorCode\t" + si.ii.errorDes[i]);
                        apv.showConfirmDialog(" not have this errorCode\t" + si.ii.errorDes[i]);
                    }
                    return false;
                }
            }


//            deleteFilesInFolder(date, IQResult);                   //刪除文件夾的文件

            if (!apv.IQconfig.runinWifiNmae.containsKey(apv.IQconfig.getIQport())) {
                this.addLog("not have " + apv.IQconfig.getIQport(), id);
                return false;
            }
            String runBat = apv.IQconfig.runinWifiNmae.get(apv.IQconfig.getIQport());

            addLog("IQ cmd: " + runBat, id);
            String cmd = "cmd /c " + runBat;
            Runtime.getRuntime().exec(cmd);
            Thread.sleep(3000);
            if (!IQLogFile.exists()) {
                this.addLog("not have " + IQLogFile.getName(), id);
                return false;
            }

            getlog = true;
            File fnewpath = new File(filePath); //文件新（目标）地址 
            if (!fnewpath.exists()) //判断文件夹是否存在 
            {
                fnewpath.mkdirs();
            }
            //保存文件路径

            IQResult = readIQResult(IQLogFile, si.ii.diagCmdTime[i]);
//            readIQlog(IQLogFile, filePath, si.ii.diagCmdTime[i]);

            fileDetails = ParseIQLog(IQLogFile);
//            ParseIQLog(fileDetails);
            if (apv.IQlog.containsKey("RESERT")) {
                resultLog = "PASS";

                String[] details = (String[]) apv.IQlog.get("RESERT");

                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains("[Failed]")) {
                        addLog(details[j], id);
                        resultLog = "FAIL";
                        if (details[j].contains("INSERT_DUT")) {
//                            si.ii.errorDeses[i] = "INSERT_DUT FAIL!";
                            return false;
                        }
                    }
                }
                if (si.ii.diagCmd2[i].equals("1") && resultLog.equals("FAIL")) {
                    addLog("wifi IQ result fail", id);
                    return false;
                }
                addLog("read wifi IQ log OK", id);
//                resultLog = "PASS";
                return true;
            } else {
                if (iqLogFailedItem.contains("TEST_VERIFY EVM POWER")) {
                    String frequency = PatternStarts(iqLogFailedItem, "\\b\\d{4}\\b").trim();
                    String str = iqLogFailedItem.substring(iqLogFailedItem.indexOf("MCS"));
                    String mcs = str.substring(0, str.indexOf(" ")).trim();
                    str = iqLogFailedItem.substring(iqLogFailedItem.indexOf("BW-") + 3);
                    String bw = str.substring(0, str.indexOf(" ")).trim();
                    str = iqLogFailedItem.substring(iqLogFailedItem.indexOf("ANT"));
                    String ANT = str.substring(str.indexOf("ANT") + 3).trim();
                    String JsonName = "WIFI_TX_POWER_F" + frequency + "_BW" + bw + "_" + mcs + "_A" + ANT;

                    String errorDes = JsonName.toLowerCase();
                    if (apv.setErrorCode(errorDes, i)) {
                        si.ii.errorCode[i] = errorDes;
                    }
                    return false;
                } else if (iqLogFailedItem.contains("TEST_VERIFY PER")) {
                    String frequency = PatternStarts(iqLogFailedItem, "\\b\\d{4}\\b").trim();
                    String BW = "BW" + iqLogFailedItem.substring(iqLogFailedItem.indexOf("BW-") + 3, iqLogFailedItem.indexOf("ANT")).trim();

                    String JsonName = "WIFI_RX_PER_F" + frequency + "_" + BW + "_P";
                    String errorDes = JsonName.toLowerCase();
                    if (apv.setErrorCode(errorDes, i)) {
                        si.ii.errorCode[i] = errorDes;
                    }

                    return false;
                } else if (iqLogFailedItem.contains("TEST_RUN")) {
                    String errorDes = "wifi_ofdma";
                    if (apv.setErrorCode(errorDes, i)) {
                        si.ii.errorCode[i] = errorDes;
                    }
                    return false;
                } else {

                    this.addLog(" read wifi IQ log.txt erro", id);
                    return false;
                }
            }


        } catch (Exception e) {
            e.printStackTrace();
            this.addLog(e.toString(), id);
            return false;
        } finally {

            to.disconnect();
            try {
                Runtime.getRuntime().exec("taskkill /f /t /im  IQfactRun_Console.exe");



            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
            String sn = apv.sn[id - 1];
            if (sn.equals("")) {
                sn = apv.mlbSn[id - 1];
            }
            String fileName = apv.mlbSn[id - 1] + "_" + si.ii.name[i] + "_" + si.ii.itemDes[i] + "_" + Time + "_" + IQResult + ".txt";
            String ftpPath = filePath.replaceAll("\\\\", "/");
//            filePath = filePath + fileName;
            if (!getlog) {
                return false;
            }
            try {
//                fileName = apv.mlbSn[id - 1] + "_" + si.ii.name[i] + "_" + Time + "_" + resultLog + ".txt";
                if (fileDetails != null && fileDetails.length() > 1) {
                    apv.setZipFile(fileName, IQLogFile);
//                    if (apv.uc.ftpFlag == 1) {
                    if (apv.ftp.writeftpFile(ftpPath, fileName, fileDetails)) {
                        addLog(ftpPath + fileName + " save OK", id);
                    } else {
                        apv.showConfirmDialog(ftpPath + fileName + "\r\n save fail");
                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
                apv.showConfirmDialog(filePath + "\r\n save fail\r\n" + e.getLocalizedMessage());
                return false;
            }
            if (resultLog.equals("outTime")) {
                resultLog = "FAIL";
            }


        }

    }

    public boolean ambitRunBleIQScrip(StationInfo si, int i, int id) {
        resultLog = "overtime";

        apv.IQlog.clear();
        File IQLogFile = null;
        boolean getlog = false;
        String litepoint = apv.mbftBLELitePointPath + File.separator + si.ii.Cut0[i];
        IQLogFile = new File(litepoint);             //查看IQ是否跑完
        //保存文件路径
        String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
        String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
        String filePath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + date + File.separator + apv.hostName + File.separator;

        String fileDetails = null;
        try {

            if (!ping(si.ii.socketIp[i], 5)) {
                addLog("Ping  IQ" + si.ii.socketIp[i] + " FAIL!", id);
                return false;
            }
            addLog(IQLogFile.getPath(), id);
            if (IQLogFile.exists()) {
                System.gc();
                IQLogFile.delete();
            }
            if (IQLogFile.exists()) {
                this.addLog(litepoint + "\r\nDelete fail", id);
                apv.showConfirmDialog(litepoint + "\r\nDelete fail");
                System.exit(0);
                String errorDes = "ble_delete";
                if (apv.allErrorCode.containsKey(errorDes)) {
                    si.ii.errorCode[i] = apv.allErrorCode.get(errorDes);
                    si.ii.errorDes[i] = errorDes;
                } else {
                    addLog(" not have this errorCode\t" + si.ii.errorDes[i]);
                    apv.showConfirmDialog(" not have this errorCode\t" + si.ii.errorDes[i]);
                }
                return false;
            }

            if (!apv.IQconfig.runinBLENmae.containsKey(apv.IQconfig.getIQport())) {
                this.addLog("not have " + apv.IQconfig.getIQport(), id);
                return false;
            }
            String runBat = apv.IQconfig.runinBLENmae.get(apv.IQconfig.getIQport());

            addLog("IQ cmd: " + runBat, id);
            String cmd = "cmd /c " + runBat;
            Runtime.getRuntime().exec(cmd);
            Thread.sleep(3000);
            if (!IQLogFile.exists()) {
                this.addLog("not have " + IQLogFile.getPath(), id);
                return false;
            }

            getlog = true;
            File fnewpath = new File(filePath); //文件新（目标）地址 
            if (!fnewpath.exists()) //判断文件夹是否存在 
            {
                fnewpath.mkdirs();
            }
            //保存文件路径

            readIQlog(IQLogFile, si.ii.diagCmdTime[i]);
//            readIQlog(IQLogFile, filePath, si.ii.diagCmdTime[i]);

            fileDetails = ParseIQLog(IQLogFile);
//            ParseIQLog(fileDetails);
            if (apv.IQlog.containsKey("RESERT")) {
                resultLog = "PASS";

                String[] details = (String[]) apv.IQlog.get("RESERT");

                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains("[Failed]")) {
                        addLog(details[j], id);
                        resultLog = "FAIL";
//                        if (details[j].contains("INSERT_DUT")) {
//                            si.ii.errorDeses[i] = "INSERT_DUT FAIL!";
//                            return false;
//                        }
                    }
                }
                if (si.ii.diagCmd2[i].equals("1") && resultLog.equals("FAIL")) {
                    addLog("wifi IQ result fail", id);
                    return false;
                }
                addLog("read wifi IQ log OK", id);
//                resultLog = "PASS";
                return true;
            } else {
                if (iqLogFailedItem.contains("TX_LE ")) {
                    String frequency = PatternStarts(iqLogFailedItem, "\\b\\d{4}\\b").trim();
//                    si.ii.errorCode[i] = "10.1";1
                    String errorDes = "ble_tx_power_f" + frequency;
                    if (apv.setErrorCode(errorDes, i)) {
                        si.ii.errorCode[i] = errorDes;
                    }

                    return false;
                } else if (iqLogFailedItem.contains("TX_MULTI_VERIFICATION")) {
                    String frequency = PatternStarts(iqLogFailedItem, "\\b\\d{4}\\b").trim();
//                    si.ii.errorCode[i] = "10.1";1
                    String errorDes = "zb_tx_power_f" + frequency;
                    if (apv.setErrorCode(errorDes, i)) {
                        si.ii.errorCode[i] = errorDes;
                    }
                    return false;
                } else if (iqLogFailedItem.contains("RX_VERIFY_PER")) {
                    String frequency = PatternStarts(iqLogFailedItem, "\\b\\d{4}\\b").trim();
//                    si.ii.errorCode[i] = "10.1";1
                    String errorDes = "zb_rx_per_f" + frequency;
                    if (apv.setErrorCode(errorDes, i)) {
                        si.ii.errorCode[i] = errorDes;
                    }
                    return false;
                } else if (iqLogFailedItem.contains("RX_LE")) {
                    String frequency = PatternStarts(iqLogFailedItem, "\\b\\d{4}\\b").trim();
//                    si.ii.errorCode[i] = "10.1";1
                    String errorDes = "ble_rx_per_f" + frequency;
                    if (apv.setErrorCode(errorDes, i)) {
                        si.ii.errorCode[i] = errorDes;
                    }
                    return false;
                } else {

                    this.addLog(" read wifi IQ log.txt erro", id);
                    return false;
                }
            }


        } catch (Exception e) {
            e.printStackTrace();
            this.addLog(e.toString(), id);
            return false;
        } finally {

            to.disconnect();
//            try {
//                Runtime.getRuntime().exec("taskkill /f /t /im  IQfactRun_Console.exe");
//
//
//
//            } catch (IOException ex) {
//                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
//            }
            String sn = apv.sn[id - 1];
            if (sn.equals("")) {
                sn = apv.mlbSn[id - 1];
            }
            String fileName = apv.mlbSn[id - 1] + "_" + si.ii.name[i] + "_" + si.ii.itemDes[i] + "_" + Time + "_" + resultLog + ".txt";
            String ftpPath = filePath.replaceAll("\\\\", "/");
//            filePath = filePath + fileName;
            if (!getlog) {
                return false;
            }
            try {
//                fileName = apv.mlbSn[id - 1] + "_" + si.ii.name[i] + "_" + Time + "_" + resultLog + ".txt";
                if (fileDetails != null && fileDetails.length() > 1) {
                    apv.setZipFile(fileName, IQLogFile);

                    if (apv.uc.ftpFlag == 1) {
                        if (apv.ftp.writeftpFile(ftpPath, fileName, fileDetails)) {
                            addLog(ftpPath + fileName + " save OK", id);
                        } else {
                            apv.showConfirmDialog(ftpPath + fileName + "\r\n save fail");
                        }
                    } else {
                        if (saveIQlog(filePath + fileName, fileDetails)) {
                            addLog(filePath + fileName + " save OK", id);
                        } else {
                            apv.showConfirmDialog(filePath + fileName + "\r\n save fail");
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                apv.showConfirmDialog(filePath + "\r\n save fail\r\n" + e.getLocalizedMessage());
                return false;
            }
            if (resultLog.equals("outTime")) {
                resultLog = "FAIL";
            }


        }

    }
    String iqLogEnditem = "";

    public boolean PathLossCheck(String path, String name, String serverPath) {
        String MD5Path = path + File.separator + "md5.txt";
        String pathLossPath = path + File.separator + name;
        File MD5File = new File(MD5Path);
        String specMD5 = "";
        BufferedWriter out = null;
        BufferedReader br = null;
        BaseClass bc = new BaseClass();
        try {
            if (MD5File.exists()) {
                br = new BufferedReader(new InputStreamReader(new FileInputStream(MD5File)));
                specMD5 = br.readLine();

            }

            File PathLossFile = new File(pathLossPath);
            String localMD5 = FileTimeForFoundAndUpdate.getMD5(PathLossFile);
            if (!localMD5.equals(specMD5)) {
                out = new BufferedWriter(new FileWriter(MD5Path));
                out.write(localMD5);
                out.flush();
            } else {
                return true;
            }
            //更新服务器
            String ftpPath = serverPath.replaceAll("\\\\", "/");
            String ftpName = bc.getDateByFormatY_M_D() + "_" + bc.getDateByFormatHMS() + "_" + name;
            apv.ftp.uploadFile(ftpPath, ftpName, pathLossPath);

            return false;
        } catch (Exception ex) {
            return false;
        } finally {
            try {
                br.close();
                out.close();


            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    public boolean WiFiTransmitPowerTest(StationInfo si, int i, int id) {

        resultLog = "FAIL";
        String path = apv.srfWiFiLitePointPath;
        if (!path.endsWith(File.separator)) {
            path += File.separator;
        }
        String IQlogPath = path + si.ii.Cut0[i];
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        to.readUntil(si.ii.diagCmd[i], 1);

        //------------------------run  iQ----------------------------------

        try {
            Thread.sleep(2000);
            File IQLogFile = null;

            IQLogFile = new File(IQlogPath);
            if (IQLogFile.exists()) {
                System.gc();
                IQLogFile.delete();
            }
            if (IQLogFile.exists()) {

                addLog(si.ii.cmd[i] + "\r\nDelete fail", id);
                apv.showConfirmDialog(si.ii.cmd[i] + "\r\nDelete fail");
                System.exit(0);
                String errorDes = "wifi_delete";
                if (apv.allErrorCode.containsKey(errorDes)) {
                    si.ii.errorCode[i] = apv.allErrorCode.get(errorDes);
                    si.ii.errorDes[i] = errorDes;
                } else {
                    addLog(" not have this errorCode\t" + si.ii.errorDes[i]);
                    apv.showConfirmDialog(" not have this errorCode\t" + si.ii.errorDes[i]);
                }
                return false;
            }

            if (!apv.IQconfig.runinWifiNmae.containsKey(apv.IQconfig.getIQport())) {
                this.addLog("not have " + apv.IQconfig.getIQport(), id);
                return false;
            }
            String runBat = apv.IQconfig.runinWifiNmae.get(apv.IQconfig.getIQport());
            addLog("IQ cmd: " + runBat, id);
            String cmd = "cmd /c " + runBat;

            Runtime.getRuntime().exec(cmd);
            Thread.sleep(5000);

            if (!IQLogFile.exists()) {
                this.addLog("not have " + IQlogPath, id);
                return false;
            }


            if (!readIQlogItem(IQLogFile, si.ii.diagCmdTime[i], si.ii.diagCmd5[i])) {
                this.addLog(si.ii.diagCmd2[i] + " erro", id);
                return false;
            }

//            fileDetails = ParseIQLog(IQLogFile);
            resultLog = "PASS";
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        } finally {
        }
    }

    public boolean WiFiTransmitPowerTestTx(StationInfo si, int i, int id) {
        apv.IQlog.clear();
        resultLog = "FAIL";
        String path = apv.srfWiFiLitePointPath;
        if (!path.endsWith(File.separator)) {
            path += File.separator;
        }
        String IQlogPath = path + si.ii.Cut0[i];
        String pathLossPath = path + si.ii.diagCmd3[i];
        String newPathLossPath = path + si.ii.diagCmd4[i];
        String[] ApiName = null;
        boolean[] Status = null;

        String Value[] = null;
        String log = "";
        String Items = "";
        String spec_fail[] = si.ii.spec[i].split(",");

        File newPathLossPathFile = new File(newPathLossPath);
        if (newPathLossPathFile.exists()) {
            newPathLossPathFile.delete();
        }
        if (newPathLossPathFile.exists()) {
            newPathLossPathFile.delete();
            if (newPathLossPathFile.exists()) {
                apv.showConfirmDialog("delete " + newPathLossPathFile.getPath() + " fail");
                System.exit(0);
                return false;
            }
        }

        //------------------------run  iQ----------------------------------
        File IQLogFile = new File(IQlogPath);
        if (!IQLogFile.exists()) {
            this.addLog("not have " + IQlogPath, id);
            return false;
        }
        String fileDetails = ParseIQLog(IQLogFile);
        try {

            // -------------------------读取PathLoss-----------------------------------   
            File pathLossFile = new File(pathLossPath);
            if (!pathLossFile.exists()) {
                apv.showConfirmDialog("need " + pathLossPath);
                return false;
            }
            Map<String, Double[]> readPathLoss = readPathLoss(pathLossFile);



            //------------------------判断TX-----------------------
            ArrayList<String> IQ_key = new ArrayList<String>();
            for (Object key : apv.IQlog.keySet()) {
                String item = (String) key;
                if (item.contains(si.ii.name[i])) {
                    addLog(item, id);
                    IQ_key.add(item);

                }
            }
            ApiName = new String[IQ_key.size()];
            Value = new String[IQ_key.size()];
            Status = new boolean[IQ_key.size()];

            if (IQ_key.size() < 1) {
                addLog("not have " + si.ii.name[i], id);
                return false;
            }
            for (int a = 0; a < IQ_key.size(); a++) {

                String key = IQ_key.get(a);
                if (!apv.IQlog.containsKey(key)) {    //寻找测试项目
                    addLog("FAIL! " + key, id);
                    return false;
                }

                String frequency = PatternStarts(key, "\\b\\d{4}\\b").trim();
                String str = key.substring(key.indexOf("MCS"));
                String mcs = str.substring(0, str.indexOf(" ")).trim().toLowerCase();
                str = key.substring(key.indexOf("BW-") + 3);
                String bw = str.substring(0, str.indexOf(" ")).trim();
                str = key.substring(key.indexOf("ANT"));
                String ANT = str.substring(str.indexOf("ANT") + 3).trim();
                String JsonName = "wifi_tx_power_f" + frequency + "_bw" + bw + "_" + mcs + "_a" + ANT;
//                System.out.println(JsonName);
                addLog("JsonName= " + JsonName, id);
                if (!apv.getAPIJsonConfig(JsonName, si, i)) {    //通过apiName获取规格信息
                    addLog("JsonName  fail ", id);
                    si.ii.limitDown[i] = "";
                    si.ii.limitUp[i] = "";
                    si.ii.units[i] = "dB";
//                    return false;
                }
                ApiName[a] = JsonName;
                double value = -99;
                Status[a] = true;
                double TxPower = -99;
                double CableLoss = 99;

                String[] details = (String[]) apv.IQlog.get(key);   //获取内容
//                String spec[] = si.ii.cmd[i].split(",");
                for (int j = 0; j < details.length; j++) {
                    for (int m = 0; m < spec_fail.length; m++) {
                        if (details[j].contains(spec_fail[m])) {
                            addLog(details[j], id);
                            Status[a] = false;
                            break;
                        }
                    }
                    if (details[j].contains("TX_POWER_DBM ")) {
                        String txPower = details[j].substring(details[j].indexOf(":") + 1, details[j].indexOf("dBm")).trim();
                        TxPower = Double.parseDouble(txPower);
                    }
                    if (details[j].contains("CABLE_LOSS_DB_RET")) {
                        String cableLoss = details[j].substring(details[j].indexOf(":") + 1, details[j].indexOf("dB")).trim();
                        CableLoss = Double.parseDouble(cableLoss);
                    }
                    if (details[j].startsWith(si.ii.cmd[i])) {
                        Value[a] = details[j].substring(details[j].indexOf(":") + 1, details[j].indexOf(si.ii.units[i])).trim();
//                        resultLog = value;
                        value = Double.parseDouble(Value[a]);
                        String lower_limit = details[j].substring(details[j].indexOf("(") + 1, details[j].indexOf(",")).trim();
                        String upper_limit = details[j].substring(details[j].indexOf(",") + 1, details[j].indexOf(")")).trim();

                        addLog("get value=" + value, id);
                        addLog("lower_limit=" + lower_limit, id);
                        addLog("upper_limit=" + upper_limit, id);
                        if (Value[a].equals("")) {
                            return false;
                        }
                        if ("".equals(si.ii.limitDown[i])) {
                            si.ii.limitDown[i] = lower_limit;
                        }
                        if ("".equals(si.ii.limitUp[i])) {
                            si.ii.limitUp[i] = upper_limit;
                        }
                        if (!lower_limit.equals(si.ii.limitDown[i])) {
                            addLog("json lower_limit=" + si.ii.limitDown[i], id);
                            apv.showMessage(null, "json lower_limit != IQ lower_limit");
                            Status[a] = false;
                            return false;
                        } else if (!upper_limit.equals(si.ii.limitUp[i])) {
                            addLog("json upper_limit=" + si.ii.limitUp[i], id);
                            apv.showMessage(null, "json upper_limit != IQ upper_limit");
                            Status[a] = false;
                            return false;
                        }

                        Items += "," + ApiName[a];
                        log += "," + Value[a];
//                        break;
                    }
                }
                addLog("json Name:" + ApiName[a]);
                addLog("IQ   Ttem:" + key);
                addLog("  TxPower:" + TxPower);
                addLog("CableLoss:" + CableLoss);
                addLog("    Value:" + Value[a]);
                if (TxPower == -99 || CableLoss == -99 || value == -99) {
                    Status[a] = false;
                    return false;
                }

                CableLoss = CableLoss - (value - TxPower);   //更新PathLoss
                if (!readPathLoss.containsKey(frequency)) {
                    addLog(pathLossPath + " eero not have " + frequency);
                    Status[a] = false;
                    return false;
                }
                int ant = Integer.parseInt(ANT) - 1;
                Double[] PathLoss = readPathLoss.get(frequency);
                PathLoss[ant] = CableLoss;
                readPathLoss.put(frequency, PathLoss);
            }
            for (int j = 0; j < 3; j++) {
                SetPathloss(readPathLoss, newPathLossPathFile);
                if (newPathLossPathFile.exists()) {
                    addLog("save  " + newPathLossPathFile.getPath() + " OK", id);
                    break;
                }

            }



            for (int j = 0; j < Status.length; j++) {
                if (!Status[j]) {
                    addLog("FAIL! " + ApiName[j], id);
                    return false;
                }

            }

            resultLog = "PASS";
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        } finally {
            apv.addApiJson(ApiName, Value, Status, i, id);
            if (!resultLog.equals("PASS")) {
                String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
                String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
                String IqNewPath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + File.separator + date + File.separator + apv.hostName + File.separator;
                String fileName = apv.mlbSn[id - 1] + "_" + apv.sn[id - 1] + "_" + si.ii.itemDes[i] + "_" + Time + "_" + resultLog + ".txt";
                saveIQlog(IqNewPath, fileName, fileDetails);
            }

        }


    }

    public boolean WiFiTransmitPowerTestTxSweep(StationInfo si, int i, int id) {
        apv.IQlog.clear();
        resultLog = "FAIL";
        String path = apv.srfWiFiLitePointPath;
        if (!path.endsWith(File.separator)) {
            path += File.separator;
        }
        String IQlogPath = path + si.ii.Cut0[i];
        String pathLossPath = path + si.ii.diagCmd3[i];
        String newPathLossPath = path + si.ii.diagCmd4[i];
        String[] ApiName = null;
        boolean[] Status = null;

        String Value[] = null;
        String log = "";
        String Items = "";
        String spec_fail[] = si.ii.spec[i].split(",");

        File newPathLossPathFile = new File(newPathLossPath);
        if (newPathLossPathFile.exists()) {
            newPathLossPathFile.delete();
        }
        if (newPathLossPathFile.exists()) {
            newPathLossPathFile.delete();
            if (newPathLossPathFile.exists()) {
                apv.showConfirmDialog("delete " + newPathLossPathFile.getPath() + " fail");
                return false;
            }
        }

        //------------------------run  iQ----------------------------------
        File IQLogFile = new File(IQlogPath);
        if (!IQLogFile.exists()) {
            this.addLog("not have " + IQlogPath, id);
            return false;
        }
        String fileDetails = ParseIQLog(IQLogFile);
        try {

            // -------------------------读取PathLoss-----------------------------------   
            File pathLossFile = new File(pathLossPath);
            if (!pathLossFile.exists()) {
                apv.showConfirmDialog("need " + pathLossPath);
                return false;
            }
            Map<String, Double[]> readPathLoss = readPathLoss(pathLossFile);



            //------------------------判断TX-----------------------
            ArrayList<String> IQ_key = new ArrayList<String>();
            for (Object key : apv.IQlog.keySet()) {
                String item = (String) key;
                if (item.contains(si.ii.name[i])) {
                    addLog(item, id);
                    IQ_key.add(item);

                }
            }
            ApiName = new String[IQ_key.size()];
            Value = new String[IQ_key.size()];
            Status = new boolean[IQ_key.size()];

            if (IQ_key.size() < 1) {
                addLog("not have " + si.ii.name[i], id);
                return false;
            }
            for (int a = 0; a < IQ_key.size(); a++) {

                String key = IQ_key.get(a);
                if (!apv.IQlog.containsKey(key)) {    //寻找测试项目
                    addLog("FAIL! " + key, id);
                    return false;
                }

                String frequency = PatternStarts(key, "\\b\\d{4}\\b").trim();
                String str = key.substring(key.indexOf("MCS"));
                String mcs = str.substring(0, str.indexOf(" ")).trim().toLowerCase();
                str = key.substring(key.indexOf("BW-") + 3);
                String bw = str.substring(0, str.indexOf(" ")).trim();
                str = key.substring(key.indexOf("ANT"));
                String ANT = str.substring(str.indexOf("ANT") + 3).trim();
                String JsonName = "wifi_tx_power_f" + frequency + "_bw" + bw + "_" + mcs + "_a" + ANT;
//                System.out.println(JsonName);
                addLog("JsonName= " + JsonName, id);

                ApiName[a] = JsonName;
                double value = -99;
                Status[a] = true;
                double TxPower = -99;
                double CableLoss = 99;

                String[] details = (String[]) apv.IQlog.get(key);   //获取内容
//                String spec[] = si.ii.cmd[i].split(",");
                for (int j = 0; j < details.length; j++) {
                    for (int m = 0; m < spec_fail.length; m++) {
                        if (details[j].contains(spec_fail[m])) {
                            addLog(details[j], id);
                            Status[a] = false;
                            break;
                        }
                    }
                    if (details[j].contains("TX_POWER_DBM ")) {
                        String txPower = details[j].substring(details[j].indexOf(":") + 1, details[j].indexOf("dBm")).trim();
                        TxPower = Double.parseDouble(txPower);
                    }
                    if (details[j].contains("CABLE_LOSS_DB_RET")) {
                        String cableLoss = details[j].substring(details[j].indexOf(":") + 1, details[j].indexOf("dB")).trim();
                        CableLoss = Double.parseDouble(cableLoss);
                    }
                    if (details[j].startsWith(si.ii.cmd[i])) {
                        Value[a] = details[j].substring(details[j].indexOf(":") + 1, details[j].indexOf("dBm")).trim();
//                        resultLog = value;
                        value = Double.parseDouble(Value[a]);
                        String lower_limit = details[j].substring(details[j].indexOf("(") + 1, details[j].indexOf(",")).trim();
                        String upper_limit = details[j].substring(details[j].indexOf(",") + 1, details[j].indexOf(")")).trim();

                        addLog("get value=" + value, id);
                        addLog("lower_limit=" + lower_limit, id);
                        addLog("upper_limit=" + upper_limit, id);
                        if (Value[a].equals("")) {
                            return false;
                        }

                        Items += "," + ApiName[a];
                        log += "," + Value[a];
//                        break;
                    }
                }
                addLog("json Name:" + ApiName[a]);
                addLog("IQ   Ttem:" + key);
                addLog("  TxPower:" + TxPower);
                addLog("CableLoss:" + CableLoss);
                addLog("    Value:" + Value[a]);
                if (TxPower == -99 || CableLoss == -99 || value == -99) {
                    Status[a] = false;
                    return false;
                }

                CableLoss = CableLoss - (value - TxPower);   //更新PathLoss
                if (!readPathLoss.containsKey(frequency)) {
                    addLog(pathLossPath + " eero not have " + frequency);
                    Status[a] = false;
                    return false;
                }
                int ant = Integer.parseInt(ANT) - 1;
                Double[] PathLoss = readPathLoss.get(frequency);
                PathLoss[ant] = CableLoss;
                readPathLoss.put(frequency, PathLoss);
            }
            for (int j = 0; j < 3; j++) {
                SetPathloss(readPathLoss, newPathLossPathFile);
                if (newPathLossPathFile.exists()) {
                    addLog("save  " + newPathLossPathFile.getPath() + " OK", id);
                    break;
                }

            }
            for (int j = 0; j < Status.length; j++) {
                if (!Status[j]) {
                    addLog("FAIL! " + ApiName[j], id);
                    return false;
                }

            }

            resultLog = "PASS";
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        } finally {
            apv.addApiJson(ApiName, Value, Status, i, id);
            if (!resultLog.equals("PASS")) {
                String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
                String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
                String IqNewPath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + File.separator + date + File.separator + apv.hostName + File.separator;
                String fileName = apv.mlbSn[id - 1] + "_" + apv.sn[id - 1] + "_" + si.ii.itemDes[i] + "_" + Time + "_" + resultLog + ".txt";
                saveIQlog(IqNewPath, fileName, fileDetails);
            }

        }


    }

    public boolean WiFiTransmitPowerTestRx(StationInfo si, int i, int id) {
        apv.IQlog.clear();
        resultLog = "overtime";
        String path = apv.srfWiFiLitePointPath;
        boolean result = true;
        String[] ApiName = null;
        boolean[] Result = null;
        String Value[] = null;
        if (!path.endsWith(File.separator)) {
            path += File.separator;
        }
        String IQlogPath = path + si.ii.Cut0[i];
        String log = "";
        String Items = "";
        String[] spec_fail = si.ii.spec[i].split(",");
        //------------------------  iQ----------------------------------
        String fileDetails = "";
        try {

            File IQLogFile = new File(IQlogPath);
            if (!IQLogFile.exists()) {
                this.addLog("not have " + IQlogPath, id);
                return false;
            }

            // -------------------------继续读取IQ-----------------------------------  

            if (!readIQlog(IQLogFile, si.ii.diagCmdTime[i])) {
                this.addLog("IQ run out time", id);
                return false;
            }

            fileDetails = ParseIQLog(IQLogFile);
            //------------------------判断结果-----------------------
            ArrayList<String> IQ_key = new ArrayList<String>();
            if (apv.IQlog.containsKey("RESERT")) {   //找出IQ 測試項目
                String[] details = (String[]) apv.IQlog.get("RESERT");
                for (int j = 0; j < details.length; j++) {
                    for (int k = 0; k < spec_fail.length; k++) {
                        if (details[j].contains(spec_fail[k])) {
                            result = false;
                            break;
                        }
                    }
                    if (details[j].contains(si.ii.name[i])) {
                        String itemName = details[j].substring(0, details[j].indexOf(":")).trim();
//                        addLog(itemName);
                        IQ_key.add(itemName);
                    }
                }
            } else {
                return false;
            }
            if (IQ_key.size() < 1) {
                return false;
            }
            //------------读取RX值
            String[] IqItem = (String[]) IQ_key.toArray(new String[IQ_key.size()]);
            Result = new boolean[IqItem.length];
            ApiName = new String[IqItem.length];
            Value = new String[IqItem.length];
            for (int j = 0; j < IqItem.length; j++) {
                String frequency = "f" + PatternStarts(IqItem[j], "\\b\\d{4}\\b").trim();
                int start = IqItem[j].indexOf("BW-");
                int end = IqItem[j].indexOf("ANT");
                String bw = "bw" + IqItem[j].substring(start + 3, end).trim();
                String an = "a" + IqItem[j].substring(end + 3);
                String power = "";
                String lower_limit = "";
                String upper_limit = "";
                Result[j] = true;
                ApiName[j] = "";
                Value[j] = "";
                String[] details = (String[]) apv.IQlog.get(IqItem[j]);
                addLog(IqItem[j]);
                for (int k = 0; k < details.length; k++) {
                    if (details[k].startsWith("RX_POWER_DBM ")) {
                        int startIndex = details[k].indexOf(":") + 1;
                        int endIndex = details[k].indexOf("dBm");
                        power = details[k].substring(startIndex, endIndex).trim();
                        ApiName[j] = "wifi_rx_per_" + frequency + "_" + bw + "_p" + power + "_" + an;
                        addLog("JsonName:" + ApiName[j], id);
                        if (!apv.getAPIJsonConfig(ApiName[j], si, i)) {    //通过apiName获取规格信息
                            ApiName[j] = "";
                            addLog("JsonName  fail ", id);
                            break;
                        }
                    }
                    for (int l = 0; l < spec_fail.length; l++) {
                        if (details[k].contains(spec_fail[l])) {
                            Result[j] = false;
                            result = false;
                            break;
                        }
                    }
                    if (details[k].startsWith("PER  ")) {
                        int startIndex = details[k].indexOf(":") + 1;
                        int endIndex = details[k].indexOf("%");
                        Value[j] = details[k].substring(startIndex, endIndex).trim();
                        lower_limit = details[k].substring(details[k].indexOf("(") + 1, details[k].indexOf(",")).trim();
                        upper_limit = details[k].substring(details[k].indexOf(",") + 1, details[k].indexOf(")")).trim();

                    }

                }
                if (ApiName[j].equals("")) {
                    continue;
                }
                addLog("get value=" + Value[j], id);
                addLog("lower_limit=" + lower_limit, id);
                addLog("upper_limit=" + upper_limit, id);
                if ("".equals(si.ii.limitDown[i])) {
                    si.ii.limitDown[i] = lower_limit;
                }
                if ("".equals(si.ii.limitUp[i])) {
                    si.ii.limitUp[i] = upper_limit;

                }
                if (!lower_limit.equals(si.ii.limitDown[i])) {
                    apv.showMessage(null, "json lower_limit != IQ lower_limit");
                    Result[j] = false;
                    result = false;
                    return false;
                }
                if (!upper_limit.equals(si.ii.limitUp[i])) {
                    apv.showMessage(null, "json upper_limit != IQ upper_limit");
                    Result[j] = false;
                    result = false;
                    return false;
                }
                Items += "," + ApiName[j];
                log += "," + Value[j];

            }
            if (result) {
                resultLog = "PASS";
                return true;
            }
            return false;
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        } finally {
            apv.addApiJson(ApiName, Value, Result, i, id);
            try {
                Runtime.getRuntime().exec("taskkill /f /t /im  IQfactRun_Console.exe");


            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
            String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
            String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
            String IqNewPath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + File.separator + date + File.separator + apv.hostName + File.separator;
            String fileName = apv.mlbSn[id - 1] + "_" + apv.sn[id - 1] + "_" + si.ii.itemDes[i] + "_" + Time + "_" + resultLog + ".txt";
            saveIQlog(IqNewPath, fileName, fileDetails);


        }


    }

    public boolean WiFiTransmitPowerTestRxSweep(StationInfo si, int i, int id) {
        apv.IQlog.clear();
        resultLog = "overtime";
        String path = apv.srfWiFiLitePointPath;
        boolean result = true;
        String[] ApiName = null;
        boolean[] Result = null;
        String Value[] = null;
        if (!path.endsWith(File.separator)) {
            path += File.separator;
        }
        String IQlogPath = path + si.ii.Cut0[i];
        String log = "";
        String Items = "";
        String[] spec_fail = si.ii.spec[i].split(",");
        //------------------------  iQ----------------------------------
        String fileDetails = "";
        try {

            File IQLogFile = new File(IQlogPath);
            if (!IQLogFile.exists()) {
                this.addLog("not have " + IQlogPath, id);
                return false;
            }

            // -------------------------继续读取IQ-----------------------------------  

            if (!readIQlog(IQLogFile, si.ii.diagCmdTime[i])) {
                this.addLog("IQ run out time", id);
                return false;
            }

            fileDetails = ParseIQLog(IQLogFile);
            //------------------------判断结果-----------------------
            ArrayList<String> IQ_key = new ArrayList<String>();
            if (apv.IQlog.containsKey("RESERT")) {   //找出IQ 測試項目
                String[] details = (String[]) apv.IQlog.get("RESERT");
                for (int j = 0; j < details.length; j++) {
                    for (int k = 0; k < spec_fail.length; k++) {
                        if (details[j].contains(spec_fail[k])) {
                            return false;
                        }
                    }


//                    if (details[j].contains(si.ii.name[i])) {
//                        String itemName = details[j].substring(0, details[j].indexOf(":")).trim();
////                        addLog(itemName);
//                        IQ_key.add(itemName);
//                    }
                }
            } else {
                return false;
            }
//            if (IQ_key.size() < 1) {
//                return false;
//            }


            resultLog = "PASS";
            return true;

        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        } finally {
            apv.addApiJson(ApiName, Value, Result, i, id);
            try {
                Runtime.getRuntime().exec("taskkill /f /t /im  IQfactRun_Console.exe");


            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
            String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
            String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
            String IqNewPath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + File.separator + date + File.separator + apv.hostName + File.separator;
            String fileName = apv.mlbSn[id - 1] + "_" + apv.sn[id - 1] + "_" + si.ii.itemDes[i] + "_" + Time + "_" + resultLog + ".txt";
            saveIQlog(IqNewPath, fileName, fileDetails);


        }


    }

    public boolean ambitDUTWaitForTelnet(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String mac = "";
        String serial = "";
        try {
            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }

            if (apv.getSfisStatus()) {
                addLog("Telnet " + si.ii.socketIp[i] + " PASS!", id);
                resultLog = "PASS";
                return true;
            }


            to.readUntil(si.ii.diagCmd[i], 1);


            String cmd = si.ii.cmd[i] + " serial";
            if (!to.sendCommandAndRead(cmd, si.ii.diagCmd[i], 3)) {
                addLog("CMD " + cmd + " Fail!", id);
                return false;
            }
            String details = to.getString.split("\r\n")[1].trim();
            addLog(details, id);

            if (details.startsWith("serial=")) {
                serial = details.substring(details.indexOf("=") + 1).trim();

            }
            cmd = si.ii.cmd[i] + " mac";
            if (!to.sendCommandAndRead(cmd, si.ii.diagCmd[i], 3)) {
                addLog("CMD " + cmd + " Fail!", id);
                return false;
            }
            details = to.getString.split("\r\n")[1].trim();
            addLog(details, id);
            if (details.startsWith("mac=")) {
                mac = details.substring(details.indexOf("=") + 1).trim();
            }

//            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i],10)) {
//                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
//                return false;
//            }


            if (apv.mlbSn[id - 1].equals("")) {
                apv.mlbSn[id - 1] = serial;
            }

            if (apv.sn[id - 1].equals("")) {
                apv.sn[id - 1] = apv.mlbSn[id - 1];
            }
            apv.setHtmlText1("SN:", apv.sn[id - 1]);
            resultLog = "PASS";
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;

    }

    public boolean USBConnectorABSideTest(StationInfo si, int i, int id, int retryTime) {
        resultLog = "FAIL";
        ComPort dut = new ComPort(apv, 1, id);
        ComPort fixture = new ComPort(apv, id);
        try {
            String com = si.ii.cmd[i].split(",")[0].trim();
            int port = Integer.parseInt(si.ii.cmd[i].split(",")[1].trim());
            if (!fixture.open(com, port)) {
                fixture.close();
                addLog("open " + com + " fail", id);
                return false;
            }
            addLog("open " + com + " pass", id);

            com = si.ii.diagCmd[i].split(",")[0].trim();
            port = Integer.parseInt(si.ii.diagCmd[i].split(",")[1].trim());

            if (!dut.open(com, port)) {
                dut.close();
                addLog("open " + com + " fail", id);
                return false;
            }
            addLog("open " + com + " pass", id);
            String fix[] = si.ii.cmd1[i].split(",");
            for (int m = 0; m < fix.length; m++) {

                if (!fixture.writeAndReadUntil(fix[m] + "\r\n", "OK", 10)) {
                    addLog("CMD " + fix[m] + " Fail!", id);
                    return false;
                }
                if (retryTime > 0) {
                    Thread.sleep(3000);
                }
                if (m == 1) {
                    Thread.sleep(500);
                }

            }

            dut.read(1);
            dut.write("\r\n");
            if (dut.readString(5, si.ii.diagCmdTime[i])) {
//                addLog(dut.readAll, id);
                resultLog = "PASS";
                return true;
            }
            addLog(dut.readAll, id);
        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
            fixture.close();
        }

        return false;

    }

    public boolean OpenShort(StationInfo si, int i, int id, int retryTime) {
        resultLog = "";
//        StringBuilder grrValue = new StringBuilder();
//        StringBuilder grrItem = new StringBuilder();

        ComPort cp = new ComPort(apv, id);
        ComPort dut = new ComPort(apv, id, 1);

        double electricity = 0;

        if (apv.model[id - 1] != null && apv.model[id - 1].equals("REVERT")) {
            addLog("canceled item", id);
            resultLog = "canceled";        //API 跳过这个项目canceled
            return true;
        }

        try {
            String DUTcom[] = si.ii.diagCmd[i].split(",");
            if (!dut.open(DUTcom[0].trim(), Integer.parseInt(DUTcom[1].trim()))) {
                return false;
            }
            if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            if (retryTime > 0) {
                String[] fxCmd = si.ii.cmd3[i].split(",");
                for (int j = 0; j < fxCmd.length; j++) {
                    if (!cp.writeAndReadUntil(fxCmd[j], "OK", 5)) { //电源电压
                        return false;
                    }

                }
            }

            for (int j = 0; j < si.ii.diagCmdTime[i]; j++) {
                if (dut.readAll.contains("/#") && dut.readAll.contains("root")) {

                    dut.write("reboot\r\n");

                    dut.write("reset\r\n");
                    try {
                        Thread.sleep(1000);
                    } catch (EnumConstantNotPresentException e) {
                        e.notifyAll();
                    }
                }
                if (dut.writeAndReadUntil("\r\n", si.ii.diagCmd1[i], 1)) {
                    break;
                }

                if (j >= si.ii.diagCmdTime[i] - 1) {
                    addLog("login bootloader fail", id);
                    return false;
                }
            }

            for (int j = 0; j < 3; j++) {
                if (!cp.writeAndReadUntil(si.ii.cmd2[i], "FAIL", 1)) { //电源电流
                    electricity = Double.valueOf(cp.readAll.substring(cp.readAll.indexOf("TCURRENT=") + 9).trim()) / 1000;
                } else {
                    addLog(si.ii.cmd2[i] + "eero, read Fixture fail", id);
                    continue;
                }
                DecimalFormat df = new DecimalFormat("0.00");
                DecimalFormatSymbols symbols = new DecimalFormatSymbols();
                symbols.setDecimalSeparator('.');
                df.setDecimalFormatSymbols(symbols);

                resultLog = df.format(electricity);

                addLog("current: " + electricity + "A", id);

                double up = Double.valueOf(si.ii.limitUp[i]);
                double down = Double.valueOf(si.ii.limitDown[i]);
                if (up < electricity || electricity < down) {
                    addLog("electricity fail! limit_max: " + si.ii.limitUp[i] + " limit_min: " + si.ii.limitDown[i], id);
                } else {
                    return true;
                }
                Thread.sleep(1000);
            }

//            apv.testGrrLog.append(grrValue.toString());
//            apv.testGrrItem.append(grrItem.toString());
            return false;
        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
//            dut.write("reboot\r\n");
//            dut.write("reset\r\n");
            dut.close();
            cp.close();

        }

        return false;

    }

    public boolean DhcpMode(StationInfo si, int i, int id, int retryTime) {
        resultLog = "";

        ComPort dut = new ComPort(apv, id, 1);




        try {
//            String DUTcom[] = si.ii.diagCmd[i].split(",");
//            if (!dut.open(DUTcom[0].trim(), Integer.parseInt(DUTcom[1].trim()))) {
//                return false;
//            }
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }


            for (int j = 0; j < si.ii.diagCmdTime[i]; j++) {
                if (dut.readAll.contains("/#") && dut.readAll.contains("root")) {

                    dut.write("reboot\r\n");

                    dut.write("reset\r\n");
                    try {
                        Thread.sleep(1000);
                    } catch (EnumConstantNotPresentException e) {
                        e.notifyAll();
                    }
                }
                if (dut.writeAndReadUntil("\r\n", si.ii.diagCmd[i], 1)) {
                    break;
                }

                if (j >= si.ii.diagCmdTime[i] - 1) {
                    addLog("login bootloader fail", id);
                    return false;
                }
            }

            if (!dut.writeAndReadUntil(si.ii.cmd1[i] + "\r\n", si.ii.diagCmd[i], 1)) {
                addLog("cmd " + si.ii.cmd1[i] + " fail", id);
                return false;
            }
            if (!dut.writeAndReadUntil(si.ii.cmd2[i] + "\r\n", si.ii.diagCmd[i], 1)) {
                addLog("cmd " + si.ii.cmd2[i] + " fail", id);
                return false;
            }
            if (!dut.writeAndReadUntil(si.ii.cmd3[i] + "\r\n", si.ii.diagCmd[i], 1)) {
                addLog("cmd " + si.ii.cmd3[i] + " fail", id);
                return false;
            }
            dut.write(si.ii.cmd[i] + "\r\n");
            resultLog = "PASS";
            return true;
        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
//            dut.write("reboot\r\n");
//            dut.write("reset\r\n");
            dut.close();


        }

        return false;

    }

    public boolean CheckCOMTestImageVersion(StationInfo si, int i, int id) {
        resultLog = "";
        ComPort dut = new ComPort(apv, id, 1);
        try {
//            String DUTcom[] = si.ii.diagCmd[i].split(",");
//            if (!dut.open(DUTcom[0].trim(), Integer.parseInt(DUTcom[1].trim()))) {
//                return false;
//            }
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }


            for (int j = 0; j < si.ii.diagCmdTime[i]; j++) {
                if (dut.readAll.contains("/#") && dut.readAll.contains("root")) {

                    dut.write("reboot\r\n");

                    dut.write("reset\r\n");
                    try {
                        Thread.sleep(1000);
                    } catch (EnumConstantNotPresentException e) {
                        e.notifyAll();
                    }
                }
                if (dut.writeAndReadUntil("\r\n", si.ii.diagCmd[i], 1)) {
                    break;
                }

                if (j >= si.ii.diagCmdTime[i] - 1) {
                    addLog("login bootloader fail", id);
                    return false;
                }
            }

            if (!dut.writeAndReadUntil(si.ii.cmd[i] + "\r\n", si.ii.diagCmd[i], 3)) {
                addLog("cmd " + si.ii.cmd[i] + " fail", id);
                return false;
            }
            String dataDUT[] = dut.readAll.split("\r\n");

            for (String data : dataDUT) {
                if (data.contains("ver=")) {
                    String version = data.substring(data.indexOf("ver=") + 4).trim();
                    addLog("version: " + version, id);
                    if (version.equals(si.ii.cmd1[i])) {
                        resultLog = "PASS";
                        return true;
                    } else {
                        addLog("sepc version: " + si.ii.cmd1[i], id);
                    }

                }
            }
            addLog("cmd " + si.ii.cmd[i] + " fail", id);
            return false;
        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
//            dut.write("reboot\r\n");
//            dut.write("reset\r\n");
            dut.close();


        }

        return false;

    }

    public boolean IcurrentTestFixture(StationInfo si, int i, int id) {
        resultLog = "";

        ComPort cp = new ComPort(apv, id);
        double value = 0;
        try {


            if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            cp.readms(1);
            if (!cp.writeAndReadUntil(si.ii.cmd[i], "FAIL", 1)) {
                resultLog = cp.readAll.substring(cp.readAll.indexOf("=") + 1).trim();
                value = Double.valueOf(resultLog);
                if (si.ii.units[i].equals("A")) {
                    value = value / 1000;
                    resultLog = String.valueOf(value);
                }
                addLog("value:" + value, id);
            } else {
                addLog(si.ii.cmd[i] + "eero, read Fixture fail", id);
            }
            double up = Double.valueOf(si.ii.limitUp[i]);
            double down = Double.valueOf(si.ii.limitDown[i]);
            if (up < value) {
                addLog("TooHigh! limit_max: " + si.ii.limitUp[i] + " value: " + value, id);
                return false;
            } else if (value < down) {
                addLog("TooLow! limit_min: " + si.ii.limitDown[i] + " value: " + value, id);
                return false;
            }
            return true;
        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            cp.close();
        }

        return false;

    }

    public boolean VcurrentTestFixture(StationInfo si, int i, int id) {
        resultLog = "";
        ComPort cp = new ComPort(apv, id);
        double value = 0;
        try {


            if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            cp.readms(1);
            if (cp.writeAndRead(si.ii.cmd[i], 1)) {
                if (cp.readAll.contains("FAIL")) {
                    addLog(si.ii.cmd[i] + "eero, read Fixture fail", id);
                    return false;
                }
                resultLog = cp.readAll.substring(cp.readAll.indexOf("=") + 1, cp.readAll.trim().length() - 1);
                value = Double.valueOf(resultLog);
                if (si.ii.units[i].equals("A")) {
                    value = value / 1000;
                    resultLog = String.valueOf(value);
                }
                addLog("value:" + value, id);
            } else {
                addLog(si.ii.cmd[i] + "eero, read Fixture fail", id);
            }

            double up = Double.valueOf(si.ii.limitUp[i]);
            double down = Double.valueOf(si.ii.limitDown[i]);
            if (up < value) {
                addLog("TooHigh! limit_max: " + si.ii.limitUp[i] + " value: " + value, id);
                return false;
            } else if (value < down) {
                addLog("TooLow! limit_min: " + si.ii.limitDown[i] + " value: " + value, id);
                return false;
            }
//            resultLog = "PASS";
            return true;
        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            cp.close();
        }

        return false;

    }

    public boolean ThermalShutdown(StationInfo si, int i, int id, int retryTime) {
        resultLog = "FAIL";
        ComPort cp = new ComPort(apv, id);
        String testOnOff[] = si.ii.cmd1[i].split(",");  //測試開關
        String spec = si.ii.spec[i];
        Map<String, Double> voltageName_spec = new HashMap< String, Double>();
        try {
            File file = new File("APIVoltage.csv");
            if (!file.exists()) {
                addLog("not found APIVoltage.csv", id);
                return false;
            }
            BufferedReader reader = null;
            String line = null;
            reader = new BufferedReader(new FileReader("APIVoltage.csv"));
            reader.readLine();
            while ((line = reader.readLine()) != null) {
                if (line.contains(",")) {
                    String str[] = line.split(",");
                    if (str.length >= 3) {
                        Double value = 99.0;
                        try {
                            value = Double.valueOf(str[2]);
                        } catch (Exception e) {
                            addLog("APIVoltage.csv eero  thermal_shutdown NG", id);
                            return false;
                        }

                        voltageName_spec.put(str[0], value);
                    }

                }

            }

            //-----------------------------------------测试命令用的com---------------
            String com = si.ii.cmd[i].split(",")[0].trim();
            int port = Integer.parseInt(si.ii.cmd[i].split(",")[1].trim());
            if (!cp.open(com, port)) {
                cp.close();
                addLog("open " + com + " fail", id);
                return false;
            }
            addLog("open " + com + " pass", id);
            if (!cp.writeAndReadUntil(testOnOff[0] + "\r\n", spec, si.ii.diagCmdTime[i])) {
                addLog("cmd " + testOnOff[0] + " FAIL!", id);
//                    addLog(cp.readAll, id);
                return false;
            }
            //-------------開始測試---打開

            addLog("sleep " + si.ii.diagCmdTime[i] + " S", id);
            int num = Integer.parseInt(si.ii.Cut0[i]);
            for (int a = 0; a < num; a++) {


                Thread.sleep(si.ii.diagCmdTime[i] * 1000);
                if (cp.writeAndReadUntil(si.ii.cmd3[i], ":", 2)) { //电源电压
//                addLog(si.ii.cmd3[i] + " eero, read Fixture fail", id);
//                return false;
                }

                String string = cp.readAll.substring(0, cp.readAll.indexOf(":"));
//                    string = cp.readAll.replace(":", "");
                String voltageString[] = string.split("\r\n");   //每一路电压的值
                boolean bool = true;
                for (int j = 0; j < voltageString.length; j++) {          //把值放如集合里方便后面适用
                    String voltagevalue[] = voltageString[j].trim().split("=");
                    if (voltageName_spec.containsKey(voltagevalue[0])) {
                        double value = Double.parseDouble(voltagevalue[1].trim());
                        double valueSpec = voltageName_spec.get(voltagevalue[0]);
                        addLog("voltage " + voltagevalue[0] + " value: " + value + " limit_max: " + valueSpec, id);
                        if (voltagevalue[0].equals(si.ii.diagCmd[i])) {
//                            resultLog = voltagevalue[1];
                        }
                        if (value >= valueSpec) {
                            bool = false;
                        }
                    }

                }
                if (bool) {
                    resultLog = "PASS";
                    return true;
                }

            }
            return false;
        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            if (!cp.writeAndReadUntil(testOnOff[1] + "\r\n", spec, si.ii.diagCmdTime[i])) {
                addLog("cmd " + testOnOff[1] + " FAIL!", id);
//                    addLog(cp.readAll, id);
                return false;
            }
            cp.close();



        }

        return false;

    }

    public boolean CPUTemperLoopTest(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {

            to.readUntil(si.ii.diagCmd[i], 1);
            StringBuffer details = new StringBuffer();
            int num = Integer.parseInt(si.ii.diagCmd1[i].trim());
            for (int j = 1; j <= num; j++) {
                //  addLog("\n", id);
                addLog("num= " + j + "\tmax= " + num, 1, id);
                if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                    addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                    return false;
                }
                resultLog = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]).trim();
                details.append(resultLog);
                if (j != num) {
                    details.append(",");
                }
                Thread.sleep(si.ii.diagCmdTime[i] * 1000);
            }
            addLog(details.toString(), id);
            double value = Double.valueOf(resultLog);
            double up = Double.valueOf(si.ii.limitUp[i]);
            double down = Double.valueOf(si.ii.limitDown[i]);
            addLog("get: " + value + "°C, limitUp: " + up + "°C, limitDown: " + down + " °C", id);
            if (value > up) {
                return false;
            }
            if (value < down) {
                return false;
            }

            return true;

        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

        return false;

    }
    private Map<String, Integer> cpu_temp = new HashMap< String, Integer>();    //name value

    public boolean CPUTemperatureTestAfterBootup(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String[] name = si.ii.cmd[i].split(",");
        String[] command = {si.ii.diagCmd1[i], si.ii.diagCmd2[i], si.ii.diagCmd3[i], si.ii.diagCmd4[i]};
        int tempValue = 0;
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            si.ii.errorDes[i] = si.ii.name[i];

            to.readUntil(si.ii.diagCmd[i], 1);
            resultLog = "";
            boolean bool = true;
            String[] details = new String[command.length];

            for (int j = 0; j < command.length; j++) {
                if (!to.sendCommandAndRead(command[j], si.ii.diagCmd[i], 3)) {
                    addLog("CMD " + command[j] + " Fail!", id);
                    return false;
                }
                addLog(to.getString.substring(0, to.getString.indexOf(si.ii.diagCmd[i])), 1, id);
                details[j] = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]).trim();
                details[j] = details[j].split("\n")[1];
                addLog(name[j] + "value=" + details[j] + " limitUp:" + si.ii.limitUp[i] + " limitDown:" + si.ii.limitDown[i], id);
                int value = Integer.valueOf(details[j]);
                if (value > tempValue) {
                    tempValue = value;
                    resultLog = details[j];
                }
                int up = Integer.valueOf(si.ii.limitUp[i]);
                int down = Integer.valueOf(si.ii.limitDown[i]);
                if (value > up) {
                    return false;
                }
                if (value < down) {
                    return false;
                }
            }
            return true;

        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            cpu_temp.put(si.ii.itemDes[i], tempValue);

            to.disconnect();
        }

        return false;

    }

    public boolean temp_cpu_delta(StationInfo si, int i, int id) {
        resultLog = "";

        try {
            int temp1 = 0;
            int temp2 = 0;
            if (cpu_temp.containsKey(si.ii.cmd1[i])) {
                temp1 = cpu_temp.get(si.ii.cmd1[i]);
                addLog(si.ii.cmd1[i] + ":" + temp1, id);
            } else {
                addLog("cpu temp not item:" + si.ii.cmd1[i], id);
            }
            if (cpu_temp.containsKey(si.ii.cmd2[i])) {
                temp2 = cpu_temp.get(si.ii.cmd2[i]);
                addLog(si.ii.cmd2[i] + ":" + temp2, id);
            } else {
                addLog("cpu temp not item:" + si.ii.cmd2[i], id);
            }


            int value = temp2 - temp1;
            resultLog = String.valueOf(value);
            addLog(si.ii.cmd2[i] + "-" + si.ii.cmd1[i] + "=" + resultLog, id);
            double up = Double.valueOf(si.ii.limitUp[i]);
            double down = Double.valueOf(si.ii.limitDown[i]);
            if (value > up) {
                addLog("delta;" + value + " _tooHigh", id);
                addLog("spec up:" + up, id);
                return false;
            }
            if (value < down) {
                addLog("delta;" + value + " _tooLow", id);
                addLog("spec down:" + down, id);
                return false;
            }

            return true;

        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

        return false;

    }

    public boolean WiFiemperatureTestAfterBootup(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            String[] details = new String[3];
            to.readUntil(si.ii.diagCmd[i], 1);

            if (!to.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                return false;
            }
            details[0] = substring(to.getString, si.ii.cmd1[i], si.ii.diagCmd[i]).trim();
            addLog("get:" + details[0] + " limitUp:" + si.ii.limitUp[i] + " limitDown:" + si.ii.limitDown[i], id);

            if (!to.sendCommandAndRead(si.ii.cmd2[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd2[i] + " Fail!", id);
                return false;
            }
            details[1] = substring(to.getString, si.ii.cmd2[i], si.ii.diagCmd[i]).trim();
            addLog("get:" + details[1] + " limitUp:" + si.ii.limitUp[i] + " limitDown:" + si.ii.limitDown[i], id);
            if (!to.sendCommandAndRead(si.ii.cmd3[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd3[i] + " Fail!", id);
                return false;
            }
            details[2] = substring(to.getString, si.ii.cmd3[i], si.ii.diagCmd[i]).trim();
            addLog("get:" + details[2] + " limitUp:" + si.ii.limitUp[i] + " limitDown:" + si.ii.limitDown[i], id);
//            addLog(to.getString.substring(0, to.getString.indexOf(si.ii.diagCmd[i])), 1, id);


//                details[j] = details[j].split("\n")[1];
//                details[j] = substring(to.getString, command[j], si.ii.diagCmd[i]).trim();
            resultLog = "PASS";
            return true;

        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

        return false;

    }
    TelnetCPUTemperThread temper;

    public boolean CPUTemperatureTestStart(StationInfo si, int i, int id) {
        resultLog = "";
        try {
            int num = Integer.parseInt(si.ii.cmd1[i]);

            temper = new TelnetCPUTemperThread();
            temper.start(si.ii.socketIp[i], si.ii.cmd[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i], num);

            temper.start();
            for (int j = 0; j < 5; j++) {
                String value = temper.getValue();
                String Value[] = value.split("\r\n");
                if (Value.length > 1) {


                    value = Value[Value.length - 1].split("\t")[1];
                    resultLog = value;
                    return true;
                }
                Thread.sleep(1000);
            }

            return false;

        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {

            addLog(temper.getValue());
        }

        return false;

    }

    public boolean CPUTemperatureTestEnd(StationInfo si, int i, int id) {
        resultLog = "";

        try {

            String value = temper.getValue();
            addLog(value);
            String Value[] = value.split("\r\n");
            value = Value[Value.length - 1].split("\t")[1];
            resultLog = value;
            if (temper.getCPUTemperBoot()) {
//                resultLog = "PASS";
                return true;
            }

        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            temper.end();
        }
        return false;

    }

    public boolean VoltageTestFixture(StationInfo si, int i, int id, int retryTime) {
        resultLog = "FAIL";
        String ApiName[] = null;
        String ApiValue[] = null;
        boolean ApiStatus[] = null;
        boolean status = true;
        ComPort cp = new ComPort(apv, id);
        StringBuilder Value = new StringBuilder();
        StringBuilder Items = new StringBuilder();
        Map<String, String> voltageName_ApiName = new HashMap< String, String>();

        try {
            File file = new File("APIVoltage.csv");
            if (!file.exists()) {
                addLog("not found APIVoltage.csv", id);
                return false;
            }
            BufferedReader reader = null;
            String line = null;
            reader = new BufferedReader(new FileReader("APIVoltage.csv"));
            reader.readLine();
            while ((line = reader.readLine()) != null) {
                if (line.contains(",")) {
                    String str[] = line.split(",");
                    if (str.length >= 2) {
                        voltageName_ApiName.put(str[0], str[1]);
                    }
                }

            }
            ApiName = new String[voltageName_ApiName.size()];
            ApiValue = new String[voltageName_ApiName.size()];
            ApiStatus = new boolean[voltageName_ApiName.size()];


            addLog("sleep " + si.ii.diagCmdTime[i] + " ms", id);
            Thread.sleep(si.ii.diagCmdTime[i]);
//            }

            if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
                addLog("open " + si.ii.comPort[i] + " Fail!", id);
                return false;
            }
            cp.read(1);
            if (!cp.writeAndReadUntil(si.ii.cmd[i], ":", 2)) { //电源电压
                addLog(si.ii.cmd[i] + " eero, read Fixture fail", id);
                return false;
            }

            String VoltageString = cp.readAll.substring(0, cp.readAll.indexOf(":"));
            String voltageString[] = VoltageString.split("\r\n");   //每一路电压的值
            int num = 0;
            for (int j = 0; j < voltageString.length; j++) {          //把值放如集合里方便后面适用
                String voltagevalue[] = voltageString[j].trim().split("=");
                String voltageName = voltagevalue[0];
                if (!voltageName_ApiName.containsKey(voltageName)) {
                    addLog("not have " + voltageName, id);
//                       ApiStatus[num] = false;
                    continue;
                }
                ApiName[num] = voltageName_ApiName.get(voltageName);
                if (!apv.getAPIJsonConfig(ApiName[num], si, i)) {
                    addLog("not have ApiName " + ApiName[num], id);
                    ApiStatus[num] = false;
                    status = false;
                    continue;
                }


                double up = Double.valueOf(si.ii.limitUp[i]);
                double down = Double.valueOf(si.ii.limitDown[i]);
                ApiValue[num] = voltagevalue[1].trim();
                Double value = Double.valueOf(ApiValue[num]);
                if (value > up || value < down) {
                    addLog("xxxxxxxxxxxxxxxxxxxxxxxxx", id);

                    ApiStatus[num] = false;
                    status = false;
                } else {
                    ApiStatus[num] = true;
                }
                addLog("voltageName: " + ApiName[num], id);
                addLog("voltageName: " + voltageName + " value=" + ApiValue[num] + " V"
                        + " upper_limit=" + si.ii.limitUp[i] + "  lower_limit=" + si.ii.limitDown[i]);
                Items.append(",").append(ApiName[num]);
                Value.append(",").append(ApiValue[num]);
                num++;
            }
            if (num != voltageName_ApiName.size()) {
                addLog("fixture voltage leng!=Api voltage", id);
                status = false;
            }
            if (status) {
                resultLog = "PASS";
                return true;

            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {

            apv.addApiJson(ApiName, ApiValue, ApiStatus, i, id);

            cp.close();
        }

        return false;
    }

    public boolean ambitDUTSleepTransition(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        try {
            addLog("sleep " + si.ii.diagCmdTime[i] + " s", id);
            Thread.sleep(si.ii.diagCmdTime[i] * 1000);
            resultLog = "PASS";
            return true;







        } catch (InterruptedException ex) {
            Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    public boolean ambitCheckTestImageVersion(StationInfo si, int i, int id) {
        resultLog = "";
        ComPort dut = new ComPort(apv, id, 1);

        //-------------------------start dut command---------------

        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            dut.write("\r\n");
            dut.read(1);

            if (!dut.writeAndReadUntil(si.ii.cmd[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {  //开wifi
                this.addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            addLog(dut.readAll, 1, id);
            String details = substring(dut.readAll, si.ii.cmd[i], si.ii.diagCmd[i]).toLowerCase();
            String value[] = details.split("\r\n");
            for (int j = 0; j < value.length; j++) {
                if (value[j].contains("version:")) {
                    resultLog = value[j].substring(value[j].indexOf(":") + 1);

                    addLog("version:" + resultLog, id);
                    break;
                }
            }


            if (apv.ApiModel.equalsIgnoreCase("debug")) {
                addLog("cancelled  check ", id);
                return true;
            }

            if (!si.ii.limitDown[i].equals("")) {
                String spec[] = si.ii.limitDown[i].split(",");
                for (int j = 0; j < spec.length; j++) {
                    addLog("spec Version:" + spec[j], id);
                    if (resultLog.equals(spec[j])) {
                        return true;
                    }
                }

//                resultLog = si.ii.limitDown[i];
            }
            if (!si.ii.limitUp[i].equals("")) {
                String spec[] = si.ii.limitUp[i].split(",");
                for (int j = 0; j < spec.length; j++) {
                    addLog("spec Version:" + spec[j], id);
                    if (resultLog.equals(spec[j])) {
                        return true;
                    }
                }

//                resultLog = si.ii.limitDown[i];
            }



        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
        }

        return false;
    }

    public boolean SpeedEthValid(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {

            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);
            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
//            int units = 1;
//            if (details.contains("Gb/s")) {
//                units = 1000;
//            }

            String value = details.substring(details.indexOf("Speed:") + 6, details.indexOf("b/s") - 1).trim();
//            double Value = Double.parseDouble(value) * units;
            resultLog = value;
            addLog("get value=" + value, id);
            addLog("    spec=" + si.ii.limitDown[i], id);
            if (value.equals(si.ii.limitDown[i])) {
                return true;
            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean ambitVerifyUBootVersion(StationInfo si, int i, int id) {
        resultLog = "";

        ComPort dut = new ComPort(apv, id, 1);
        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            dut.write("\r\n");
            dut.read(1);
            if (!dut.writeAndReadUntil(si.ii.cmd1[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {  //开wifi
                this.addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            if (!dut.writeAndReadUntil(si.ii.cmd[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {  //开wifi
                this.addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            String details = substring(dut.readAll, si.ii.cmd[i], si.ii.diagCmd[i]).trim();
            String version = details.substring(details.indexOf("boot") + 4, details.indexOf("(")).trim();

            resultLog = version;
//            String spec = si.ii.limitDown[i];
            addLog("get Version " + version, id);


            if (apv.model[id - 1] != null && apv.model[id - 1].equals("REVERT")) {
                addLog("Station REVERT has been tested", id);
//            resultLog = "canceled";
                return true;
            }
            if (apv.ApiModel.equalsIgnoreCase("debug")) {
                addLog("cancelled check", id);
                return true;
            }
            for (String uboot : apv.ubootVersion) {
                addLog("spec version:" + uboot, id);
                if (version.equals(uboot)) {
//                          resultLog = "PASS";
                    return true;
//                    return false;
                }

            }



        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
        }
        return false;
    }

    public boolean checkIfconfig(StationInfo si, int i, int id) {
        resultLog = "";

        ComPort dut = new ComPort(apv, id, 1);
        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            dut.write("\r\n");
            dut.read(1);
            if (!dut.writeAndReadUntil(si.ii.cmd[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {  //开wifi
                this.addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
//            addLog(dut.readAll, id);

            if (!si.ii.diagCmd1[i].isEmpty() && !dut.readAll.contains(si.ii.diagCmd1[i])) {
                return false;
            } else if (!si.ii.diagCmd2[i].isEmpty() && !dut.readAll.contains(si.ii.diagCmd2[i])) {
                return false;
            } else if (!si.ii.diagCmd3[i].isEmpty() && !dut.readAll.contains(si.ii.diagCmd3[i])) {
                return false;
            } else {
                return true;
            }


        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
        }
        return false;
    }

    public boolean checkDutSn(StationInfo si, int i, int id) {
        resultLog = "";
        ComPort dut = new ComPort(apv, id, 1);

        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            dut.write("\r\n");
            dut.read(1);

            if (!dut.writeAndReadUntil(si.ii.cmd[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {  //开wifi
                this.addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(dut.readAll, si.ii.cmd[i], si.ii.diagCmd[i]).trim();
            String serial = details.substring(details.indexOf("=") + 1);
            resultLog = serial;
            addLog("get serial " + serial, id);
            addLog("spec serial:" + apv.mlbSn[id - 1], id);

            if (!apv.getSfisStatus()) {

                return true;
            }
            if (!serial.contains(apv.mlbSn[id - 1])) {
                addLog("serial Fail!", id);
                addLog("DEVICE_SN=" + apv.mlbSn[id - 1], id);
                return false;
            }

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
        }
        return false;
    }

    public boolean usbDetect(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]).trim();
            if (details.contains(si.ii.spec[i])) {
                resultLog = "PASS";
                return true;
            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean checkDutMac(StationInfo si, int i, int id) {
        resultLog = "";
        ComPort dut = new ComPort(apv, id, 1);

        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            dut.write("\r\n");
            dut.read(1);

            if (!dut.writeAndReadUntil(si.ii.cmd[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {  //开wifi
                this.addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(dut.readAll, si.ii.cmd[i], si.ii.diagCmd[i]).trim();
            String mac = details.substring(details.indexOf("=") + 1);
            resultLog = mac;
            addLog("dut mac=" + mac, id);
            addLog("spec mac=" + apv.ethMac[id - 1], id);
            if (!apv.getSfisStatus()) {

                return true;
            }
            String MAC = macTranslate(apv.ethMac[id - 1]).toLowerCase();
            if (!mac.contains(MAC)) {

                addLog("mac Fail!", id);

                return false;
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
        }
        return false;
    }

    public boolean checkEth0Mac(StationInfo si, int i, int id) {
        resultLog = "";
        ComPort dut = new ComPort(apv, id, 1);

        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            dut.write("\r\n");
            dut.read(1);

            if (!dut.writeAndReadUntil(si.ii.cmd[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {  //开wifi
                this.addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(dut.readAll, si.ii.cmd[i], si.ii.diagCmd[i]).trim();
            String mac = details.substring(details.indexOf("=") + 1);
            resultLog = mac;
            addLog("dut eth0 mac=" + mac, id);
            addLog("spec eth0=" + apv.ethMac[id - 1], id);
            if (!apv.getSfisStatus()) {
                return true;
            }
            String MAC = macTranslate(apv.ethMac[id - 1]).toLowerCase();
            if (!mac.contains(MAC)) {

                addLog("eth0 Fail!", id);

                return false;
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
        }
        return false;
    }

    public boolean checkEth1Mac(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {

            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]).trim();
            String mac = details.substring(details.indexOf("=") + 1);
            resultLog = mac;
            addLog("dut eth1=" + mac, id);
            if (!apv.getSfisStatus()) {
                return true;
            }
            long num = Long.parseLong(apv.ethMac[id - 1], 16);
            String eth1 = Long.toHexString(num + 1);
            eth1 = macTranslate(eth1).toLowerCase();
            if (!mac.contains(eth1)) {
                addLog("eth1 Fail!", id);
                addLog("eth1=" + eth1, id);
                return false;
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean checkDutEthMac(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {

            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(to.getString, si.ii.cmd1[i], si.ii.diagCmd[i]).trim();
            String mac = details.substring(details.indexOf("=") + 1);

            addLog("dut mac=" + mac, id);
            if (!to.sendCommandAndRead(si.ii.cmd2[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            details = substring(to.getString, si.ii.cmd2[i], si.ii.diagCmd[i]).trim();
            String ethMac = details.substring(details.indexOf("=") + 1);
            resultLog = ethMac;
            addLog("dut eth mac=" + ethMac, id);
            if (!apv.getSfisStatus()) {

                return true;
            }

            String MAC = macTranslate(apv.ethMac[id - 1]).toLowerCase();
            if (!mac.contains(MAC)) {

                addLog("mac Fail!", id);
                addLog("mac=" + apv.ethMac[id - 1], id);
                return false;
            }
            if (!ethMac.contains(MAC)) {
                addLog("eth mac Fail!", id);
                addLog("eth mac=" + apv.ethMac[id - 1], id);
                return false;
            }


            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean checkDutCmdMatch(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }

        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                //addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);

            String detail[] = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]).split("\r\n");
//            details = PatternStarts(details, "\\d+").trim();

//            resultLog = detail.toString();


            String spec = si.ii.limitDown[i];
//            details = spec;

            for (String value : detail) {
                addLog("read=" + value, id);
                addLog("spec=" + spec, id);
                if (value.trim().endsWith(spec)) {
                    resultLog = value;
//                resultLog = "PASS";
                    return true;
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean checkMmcModel(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }

        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                //addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            details = details.substring(details.indexOf("]") + 1).trim();
            resultLog = details.split(" ")[2];
//            details = PatternStarts(details, "\\d+").trim();




            String spec[] = si.ii.limitDown[i].split("\\|");
            addLog("read=" + resultLog, id);
            addLog("spec=" + si.ii.limitDown[i], id);
            for (int j = 0; j < spec.length; j++) {
//                addLog("spec=" + spec[j], id);
                if (resultLog.equals(spec[j])) {
//                resultLog = "PASS";
                    return true;
                }

            }




        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean checkPhyModel(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }

        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                //addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            String str[] = details.split("\r\n");
            String spec[] = new String[2];
            if (si.ii.limitDown[i].contains("\\|")) {
                spec = si.ii.limitDown[i].split("\\|");
            } else {
                spec[0] = si.ii.limitDown[i];
                spec[1] = "null";
            }

            String phy[] = new String[spec.length];
            addLog("spec1=" + spec[0], id);
            addLog("spec2=" + spec[1], id);
            int num = 0;
            int k = 0;
            for (int j = 0; j < str.length; j++) {
                if (!str[j].contains("0x")) {
                    continue;
                }

                phy[k] = str[j].substring(str[j].indexOf("0x")).trim();

                addLog("Read=" + phy[k], id);
                resultLog += phy[k] + "|";
                if (phy[k].equals(spec[k])) {
                    num++;
//                    break;
                }
                k++;
            }
            resultLog = resultLog.substring(0, resultLog.length() - 1);
            if (num > spec.length) {
                return false;
            } else {
                return true;
            }



        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean checkUSBConsole(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }

        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                //addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            String str[] = details.split("\r\n");

            String spec = si.ii.spec[i];
            int count = 0;
            for (String value : str) {
                if (value.contains(spec)) {
                    count++;
                }
            }
            addLog("spec=" + spec, id);
            if (count >= 1) {
                resultLog = "true";
                return true;
            }



        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean mmcVendor(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }

        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                //addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
//            details = PatternStarts(details, "\\d+").trim();
            String Details[] = details.split("\r\n");
            String spec = "20:";
            for (int j = 0; j < Details.length; j++) {
                if (Details[j].startsWith(spec)) {
                    Details[j] = Details[j].replaceAll("--", "").trim();
                    int start = Details[j].indexOf(spec);
                    String value = Details[j].substring(start + spec.length() + 1);
                    resultLog = value;
                }

            }
//            resultLog = details;


            spec = si.ii.limitDown[i];
//            details = spec;
            addLog("read=" + resultLog, id);
            addLog("spec=" + spec, id);
            if (resultLog.equals(spec)) {
//                resultLog = "PASS";
                return true;
            }


        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean checkDutUsb(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String apiName[] = si.ii.apiName[i].split(",");
        String Value[] = new String[apiName.length];
        boolean Status[] = new boolean[apiName.length];
        for (int j = 0; j < apiName.length; j++) {
            Status[j] = false;
            Value[j] = "";
        }

        try {
            apv.getAPIJsonConfig(apiName[0], si, i);
            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                //addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
//            details = PatternStarts(details, "\\d+").trim();
            resultLog = details;
            String usbModel = details.substring(0, details.indexOf("FW"));
            String usbFW = details.substring(details.indexOf("FW"));
//            String usbFW = details.substring(0, details.indexOf(" "));
            Value[0] = usbModel.trim();
            Value[1] = usbFW.trim();
            boolean bool = true;

            for (int j = 0; j < apiName.length; j++) {
                apv.getAPIJsonConfig(apiName[j], si, i);
                String spec = "";
                if (si.ii.limitDown[i].equals("")) {
                    spec = Value[j];
                } else {
                    spec = si.ii.limitDown[i];
                }
                addLog(apiName[j] + " get=" + Value[j], id);
                addLog(apiName[j] + " spec=" + spec, id);
                if (apv.ApiModel.equalsIgnoreCase("debug")) {
                    addLog("cancelled  check ", id);
                    Status[j] = true;
                } else if (Value[j].equals(spec)) {
//                resultLog = "PASS";
                    Status[j] = true;
                } else {
                    bool = false;
                }

            }
            if (bool) {
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            apv.addApiJson(apiName, Value, Status, i, id);
            to.disconnect();
        }
        return false;
    }

    public boolean checkDutCmdBool(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }

        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                //addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);

            String spec = si.ii.spec[i];
            addLog("read=" + details, id);
            addLog("spec=" + spec, id);
            if (details.contains(spec)) {
                resultLog = "PASS";
                return true;
            }


        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean checkPhyStatus(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }

        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                //addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            addLog("Spec1: " + si.ii.diagCmd1[i]);
            addLog("Spec2: " + si.ii.diagCmd2[i]);
            if (!details.contains(si.ii.diagCmd1[i]) && !details.contains(si.ii.diagCmd2[i])) {
                return false;
            }
            resultLog = si.ii.diagCmd1[i];
            return true;

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean getSerialNumber(StationInfo si, int i, int id) {
        resultLog = "FAIL";
//        String erroCode[] = si.ii.errorCodes[i].split(",");
//        String errorDes[] = si.ii.errorDeses[i].split(",");
//        si.ii.errorCode[i] = erroCode[0];
//        si.ii.errorDes[i] = errorDes[0];
        String mac = "";
        String serial = "";
//        if (erroCode.length != 3 || errorDes.length != 3) {
//            addLog("ambitconfig.txt erro, ERR_CODE and ERR_CODE_DES's  length both  must be three ", id);
//            return false;
//        }
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]).trim();

            addLog(details, 1, id);
            details = details + "\n";
            String version = "";
//            String version = details.substring(details.lastIndexOf("ver=") + 4, details.lastIndexOf("\n")).trim();
            String[] Details = details.split("\n");
            for (int j = 0; j < Details.length; j++) {
                if (Details[j].startsWith("ver=")) {
                    version = Details[j].substring(Details[j].indexOf("=") + 1).trim();

                } else if (Details[j].startsWith("mac=")) {
                    mac = Details[j].substring(Details[j].indexOf("=") + 1).trim();

                } else if (Details[j].startsWith("serial=")) {
                    serial = Details[j].substring(Details[j].indexOf("=") + 1).trim();
                }
            }

            int index = details.indexOf("serial=") + 7;

            apv.mlbSn[id - 1] = details.substring(index, index + si.ii.diagCmdTime[i]);
            if (apv.sn[id - 1].equals("")) {
                apv.sn[id - 1] = apv.mlbSn[id - 1];
            }
            apv.setHtmlText1("SN:", apv.sn[id - 1]);
//                addLog("DEVICE_SN=" + apv.mlbSn[id - 1], id);

//            }
//            if (!serial.contains(apv.mlbSn[id - 1])) {
//
//                addLog("serial Fail!", id);
//                addLog("DEVICE_SN=" + apv.mlbSn[id - 1], id);
//                si.ii.errorCode[i] = erroCode[2];
//                si.ii.errorDes[i] = errorDes[2];
////                si.ii.errorCode[i] = "3.1";
////                si.ii.errorDes[i] = "Device.Serial Fail!";
//                return false;
//            }
//            String MAC = macTranslate(apv.ethMac[id - 1]).toLowerCase();
//            if (!mac.contains(MAC)) {
//                if (mac.toLowerCase().contains(MAC)) {
//                    addLog(MAC, id);;
//                    addLog(mac, id);;
//                    if (!to.sendCommandAndRead("fw_setenv mac " + MAC, si.ii.diagCmd[i], 3)) {
//                        addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
//                        return false;
//                    }
//                    resultLog = "PASS";
//                    return true;
//                }
//                addLog("eth mac Fail!", id);
//                addLog("eth mac=" + apv.ethMac[id - 1], id);
//                si.ii.errorCode[i] = erroCode[1];
//                si.ii.errorDes[i] = errorDes[1];
//
//                return false;
//            }
            resultLog = "PASS";
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean checkEthMac(StationInfo si, int i, int id) {
        resultLog = "FAIL";


        String mac = macTranslate(apv.ethMac[id - 1]).toUpperCase();

        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]).trim();
            addLog(details, 1, id);
            addLog("sfis eth0 mac=" + mac, id);
            String[] Details = details.split("\n");
            for (int j = 0; j < Details.length; j++) {
                if (Details[j].contains(mac)) {

                    resultLog = "PASS";
                    return true;
                }
            }


        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean TelnetCmdThread(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        try {
            TelnetBatchProcessingThread(si.ii.socketIp[i], si.ii.cmd[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i]);
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

//        this.addLog("cmd file " + si.ii.cmd[i] + " OK", id);
        resultLog = "PASS";
        return true;
        //------------------------run  iQ----------------------------------

    }
    String CmdThreadLog = "";

    public boolean TelnetBatchProcessingThread(String ip, String cmd, String tag, int tim) {

        //    cp = new ComPort1(this, 1);
        TelnetBatchProcessingReadThread1 at = new TelnetBatchProcessingReadThread1(ip, cmd, tag, tim);
        at.start();
        return true;
    }

    public boolean dutUP(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        ComPort dut = new ComPort(apv, id, 1);
        TipWindow tw = new TipWindow(si.ii.diagCmdTime[i]);
        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            tw.start(question[22]);
            int loopTime = Integer.valueOf(si.ii.diagCmd[i].trim());
            for (int j = 0; j < loopTime; j++) {
                String detail = dut.readString(5);
                if (detail.isEmpty()) {
                    if (dut.writeAndReadUntil("\r\n", si.ii.diagCmd[i], 1)) {
                        resultLog = "PASS";
                        return true;
                    }
                } else {

                    addLog(detail, id);
                    tw.stop();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
            tw.stop();
        }
        return false;
    }

    public class TelnetBatchProcessingReadThread1 extends Thread {

        String ip = "192.168.0.1";
        String cmd;
        String tag = "";
        int time = 1;

        TelnetBatchProcessingReadThread1(String ip, String cmd, String tag, int time) {
            this.ip = ip;
            this.cmd = cmd;
            this.tag = tag;
            this.time = time;
        }

        @Override
        public void run() {
            TelnetOper to = new TelnetOper();
            if (!to.connect1(ip)) {
                System.out.println(ip + " fail");
                return;
            }
            to.readAllms(1);
            try {
                CmdThreadLog = "";
                to.sendCommandAndRead(cmd, tag, time);
                CmdThreadLog = to.getString;
            } catch (Exception e) {
                e.printStackTrace();
//                addLog(e.toString(), id);
            } finally {
                to.disconnect();
            }
            return;
        }
    }

    public boolean ambitVerifyUBootVersion1(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String erroCode[] = si.ii.errorCode[i].split(",");
        String errorDes[] = si.ii.errorDes[i].split(",");
        si.ii.errorCode[i] = erroCode[0];
        si.ii.errorDes[i] = errorDes[0];
        if (erroCode.length != 3 || errorDes.length != 3) {
            addLog("ambitconfig.txt erro, ERR_CODE and ERR_CODE_DES's  length both  must be three ", id);
            return false;
        }
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            addLog(details, 1, id);
            String version = details.substring(details.lastIndexOf("ver=") + 4);
            //apv.phase_items = new JSONObject[1];
            //apv.phase_items[0] = new JSONObject();
            //apv.phase_items[0].put("uboot_version", version);
            if (!version.contains(si.ii.spec[i])) {
                addLog("VerifyUBootVersion Fail!", id);
//                si.ii.errorCode[i] = erroCode[0];
//                si.ii.errorDes[i] = errorDes[0];
                return false;
            }

            if (!apv.getSfisStatus()) {
//                addLog("cancelled  tiem", id);
                resultLog = "PASS";
                return true;
            }

            if (apv.mlbSn[id - 1].equals("")) {
                int index = details.indexOf("serial=") + 7;

                apv.mlbSn[id - 1] = details.substring(index, index + 16);
//                addLog("DEVICE_SN=" + apv.mlbSn[id - 1], id);

            }
            if (!details.contains("serial=" + apv.mlbSn[id - 1])) {

                addLog("serial Fail!", id);
                addLog("DEVICE_SN=" + apv.mlbSn[id - 1], id);
                si.ii.errorCode[i] = erroCode[2];
                si.ii.errorDes[i] = errorDes[2];
//                si.ii.errorCode[i] = "3.1";
//                si.ii.errorDes[i] = "Device.Serial Fail!";
                return false;
            }
            if (!details.contains("mac=" + macTranslate(apv.ethMac[id - 1]).toLowerCase())) {
                addLog("eth mac Fail!", id);
                addLog("eth mac=" + apv.ethMac[id - 1], id);
                si.ii.errorCode[i] = erroCode[1];
                si.ii.errorDes[i] = errorDes[1];
//                si.ii.errorCode[i] = "17.3";
//                si.ii.errorDes[i] = "Version.MMC Fail!";

                return false;
            }
            resultLog = "PASS";
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean SendDataEeroSFTP(StationInfo si, int i, int id) {

        resultLog = "PASS";
        return true;

    }

    public boolean checkQSDKVersion(StationInfo si, int i, int id) {
        resultLog = "";

        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {


            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);
            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]).trim();

            resultLog = details;
            addLog("get Version:" + resultLog, id);
            if (!si.ii.limitDown[i].equals("")) {
                addLog("spec Version:" + si.ii.limitDown[i], id);
                if (!details.equals(si.ii.limitDown[i])) {
                    return false;
                }
//                resultLog = si.ii.limitDown[i];
            }
            if (!si.ii.limitUp[i].equals("")) {
                addLog("spec Version:" + si.ii.limitUp[i], id);
                if (!details.equals(si.ii.limitUp[i])) {
                    return false;
                }
//                resultLog = si.ii.limitUp[i];
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean EthernetSpeedTest(StationInfo si, int i, int id) {
        resultLog = "";
        String ApiName[] = si.ii.apiName[i].split(",");
        String value[] = {"", ""};
        boolean flat[] = {true, true};
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            if (!ping(si.ii.cmd1[i], 3)) {
                addLog("Localhost  IP ERRO", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);
            apv.getAPIJsonConfig(ApiName[0], si, i);
            double spec = Double.valueOf(si.ii.limitDown[i]);
            to.getString = "";

            String cmd = "cmd /c " + si.ii.diagCmd1[i];
            addLog(cmd, 3, id);
            Process p = Runtime.getRuntime().exec(cmd);
            Thread.sleep(1000);
            if (!si.ii.cmd3[i].equals("")) {
                cmd = "iperf3 -c " + si.ii.cmd1[i] + " " + si.ii.cmd3[i];
                to.sendCommandAndRead(cmd, si.ii.diagCmd[i], si.ii.diagCmdTime[i], this);
            }
            cmd = "iperf3 -c " + si.ii.cmd1[i] + " " + si.ii.cmd2[i];
            to.sendCommandAndRead(cmd, si.ii.diagCmd[i], si.ii.diagCmdTime[i], this);
            String details[] = to.getString.split("\n");
            double ThroughputValue = 0;
            for (int j = details.length - 1; j >= 0; j--) {
                details[j] = details[j].trim();
                if (details[j].contains("receiver")) {
                    int unit = 1;
                    String Throughput = details[j].toLowerCase();
//                    addLog(Throughput, id);
                    if (Throughput.contains("gbits/sec")) {
                        unit = unit * 1000;
                    }
                    System.out.println(Throughput);
                    //String txValue = Throughput.substring(Throughput.lastIndexOf("bytes") + 6, Throughput.lastIndexOf("bits/sec") - 1).trim() + " ";
                    String txValue = Throughput.substring(Throughput.lastIndexOf("bytes") + 6, Throughput.lastIndexOf("bits/sec") - 1).trim() + " ";

                    ThroughputValue = Double.valueOf(txValue);
                    if (unit > 1) {
                        resultLog += String.valueOf(ThroughputValue) + " ";
                    }
                    addLog("get value(tx) = " + txValue + " Mbits/sec", id);
                    addLog("spec =" + si.ii.limitDown[i] + " Mbits/sec", id);
                    if (ThroughputValue < spec) {
                        flat[1] = false;
                    }
                    value[0] = txValue;
                } else if (details[j].contains("sender") && details[j].toLowerCase().contains("bytes")) {
                    apv.getAPIJsonConfig(ApiName[1], si, i);
                    spec = Double.valueOf(si.ii.limitDown[i]);
                    int unit = 1;
                    String Throughput = details[j].toLowerCase().trim();
                    System.out.println(Throughput);
//                    addLog(Throughput, id);
                    if (Throughput.contains("gbits/sec")) {
                        unit = unit * 1000;
                    }
                    String rxValue = Throughput.substring(Throughput.lastIndexOf("bytes") + 6, Throughput.lastIndexOf("bits/sec") - 1).trim() + " ";

                    ThroughputValue = Double.valueOf(rxValue);
                    if (unit > 1) {
                        resultLog += String.valueOf(ThroughputValue) + " ";
                    }
                    addLog("get value (rx)= " + rxValue + " Mbits/sec", id);
                    addLog("spec =" + si.ii.limitDown[i] + " Mbits/sec", id);
                    if (ThroughputValue < spec) {
                        flat[0] = false;
                    }
                    value[1] = rxValue;
                }
            }
            if (!flat[0] || !flat[1]) {
                return false;
            }
            apv.addApiJson(ApiName, value, flat, i, id);
            return true;

        } catch (Exception ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } finally {
            try {
                Runtime.getRuntime().exec("taskkill /f /t /im  iperf3.exe");
            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
            to.disconnect();
        }

        return false;
    }

    public boolean EthernetSpeedTest_dutServer(StationInfo si, int i, int id) {
        resultLog = "";

        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            if (!ping(si.ii.cmd1[i], 3)) {
                addLog("Localhost  IP ERRO", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);

            to.getString = "";

            String cmd = si.ii.diagCmd1[i];   //dut sẻver
            to.sendCommandAndRead(cmd, si.ii.diagCmd[i], si.ii.diagCmdTime[i]);
            Thread.sleep(1000);
            if (!si.ii.cmd3[i].equals("")) {
                cmd = "cmd /c iperf3 -c " + si.ii.cmd1[i] + " " + si.ii.cmd3[i];
                addLog(cmd, 3, id);
                StringBuffer getValue = new StringBuffer();
                Process p = Runtime.getRuntime().exec(cmd);
                BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream(), "GB2312"));
                String line = "";
                while ((line = br.readLine()) != null) {
                    getValue.append(line).append("\n");

                }
                addLog(getValue.toString(), 3, id);
            }
            cmd = "cmd /c iperf3 -c " + si.ii.cmd1[i] + " " + si.ii.cmd2[i];
            addLog(cmd, 3, id);
            StringBuffer getValue = new StringBuffer();
            Process p = Runtime.getRuntime().exec(cmd);  //pc
            BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream(), "GB2312"));
            String line = "";
            while ((line = br.readLine()) != null) {
                getValue.append(line).append("\n");

            }
            addLog(getValue.toString(), 3, id);
            String details[] = getValue.toString().split("\n");
            double ThroughputValue = 0;
            for (int j = details.length - 1; j >= 0; j--) {
                details[j] = details[j].trim();
                if (details[j].contains("receiver")) {
                    int unit = 1;
                    String Throughput = details[j].toLowerCase().trim();
//                    addLog(Throughput, id);
                    if (Throughput.contains("gbits/sec")) {
                        unit = unit * 1000;
                    }

                    resultLog = Throughput.substring(Throughput.lastIndexOf("bytes") + 6, Throughput.lastIndexOf("bits/sec") - 1).trim();

                    ThroughputValue = unit * Double.valueOf(resultLog);
                    if (unit > 1) {
                        resultLog = String.valueOf(ThroughputValue);
                    }
                    addLog("get value=" + resultLog + " Mbits/sec", id);
                    break;
                }

            }
            addLog("spec =" + si.ii.limitDown[i] + " Mbits/sec", id);
            double spec = Double.valueOf(si.ii.limitDown[i]);
            if (ThroughputValue >= spec) {

                return true;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } finally {
            try {
                Runtime.getRuntime().exec("taskkill /f /t /im  iperf3.exe");


            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
            to.disconnect();
        }

        return false;
    }

    public boolean EthernetSpeedTest2GTx(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {

            to.readUntil(si.ii.diagCmd[i], 1);

            for (int j = 0; j <= 5; j++) {
                if (!to.sendCommandAndRead(si.ii.cmd3[i], si.ii.diagCmd[i], 2)) {
                    addLog(si.ii.cmd3[i] + " fail", 1, id);
                    return false;
                }

                if (to.getString.contains("ttl=") && to.getString.contains("time=")) {
                    break;
                } else if (j == 5) {
                    return false;
                }

            }

            String PCcmd = si.ii.diagCmd1[i];
            DOS_Set_read_cmdStart(PCcmd);

            Thread.sleep(1000);
            addLog(si.ii.cmd4[i], 1, id);
            to.sendCommand(si.ii.cmd4[i]);

            char ctrlC = 99 & 0X1F;

            Thread.sleep(si.ii.diagCmdTime[i] * 1000);

            to.sendCommand(ctrlC);
            to.readAll(si.ii.diagCmd[i], i);
            addLog(to.getString, 1, id);
            String getpcValue = "";
            String start = si.ii.diagCmd2[i];
            for (int j = 0; j <= 5; j++) {
                getpcValue = DOS_read_cmd();
                addLog(getpcValue, 3, id);
                if (getpcValue.contains(start)) {
                    break;
                } else if (j >= 5) {
                    return false;
                }
                Thread.sleep(500);
            }

            String value = getpcValue.substring(getpcValue.indexOf(start) + start.length()).trim();
            double valueTemp = Double.valueOf(value) / 1024 / 1024;
            BigDecimal b = new BigDecimal(valueTemp);
            int valueResult = b.setScale(0, BigDecimal.ROUND_HALF_UP).intValue();
            resultLog = String.valueOf(valueResult);
            addLog("Test Tx throughput=" + valueResult + " Mbps", id);



            double spec = Double.valueOf(si.ii.limitDown[i]);
            if (valueResult >= spec) {
                return true;
            } else {
                addLog("spec Down=" + spec + " Mbps", id);

            }



        } catch (InterruptedException ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } catch (Exception ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } finally {
            try {
                Runtime.getRuntime().exec("taskkill /f /t /im  userspace_speedtest.exe");


            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
            to.disconnect();
        }

        return false;
    }

    public boolean ambitEthernetSpeedTest(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        boolean status = true;
//        BufferedReader br = null;
//        ArrayList<Double> Throughput_value = new ArrayList();
//        ArrayList<Double> RX_value = new ArrayList();
        StringBuilder grrValue = new StringBuilder();
        StringBuilder grrItem = new StringBuilder();
        StringBuilder sqlItem = new StringBuilder();
        StringBuilder sqlValue = new StringBuilder();
        double value[] = {-1, -1};
        boolean flat[] = {false, false};
        double spec[] = new double[2];
        String ApiName[] = si.ii.apiName[i].split(",");

//        spec[0] = Double.valueOf(si.ii.limitDown[i].trim());
//        spec[1] = Double.valueOf(si.ii.limitUp[i].trim());
//        spec[0] = Double.valueOf(si.ii.spec[i].split(",")[0].trim());
//        spec[1] = Double.valueOf(si.ii.spec[i].split(",")[1].trim());
//        apv.phase_items = new JSONObject[2];
        DecimalFormat df = new DecimalFormat("0.00");
        DecimalFormatSymbols symbols = new DecimalFormatSymbols();
        symbols.setDecimalSeparator('.');
        df.setDecimalFormatSymbols(symbols);
        String log = "";
        String Items = "";
//        Stringcut1 = si.ii.Cut1[i];
        String[] cut2 = si.ii.Cut2[i].split(",");
        String name[] = new String[cut2.length];

        apv.getAPIJsonConfig(ApiName[0], si, i);

        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            si.ii.errorDes[i] = si.ii.name[i];
            if (apv.allErrorCode.containsKey(si.ii.errorDes[i])) {
                si.ii.errorCode[i] = apv.allErrorCode.get(si.ii.errorDes[i]);
            } else {
                addLog(si.ii.errorDes[i], id);
                addLog("errorCode.txt not have this errorCode", id);
                return false;
            }

            for (int k = 0; k < cut2.length; k++) {
                name[ k] = si.ii.Cut1[i] + "." + cut2[k];
            }

            Items = "," + si.ii.name[i].trim() + "_" + name[0] + "," + si.ii.name[i].trim() + "_" + name[1];
            if (!ping(si.ii.cmd1[i], 3)) {
                addLog("Localhost  IP ERRO", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);

            to.getString = "";

            String cmd = "cmd /c iperf3 -s";
            addLog(cmd, 3, id);
            Process p = Runtime.getRuntime().exec(cmd);


            Thread.sleep(1000);
            cmd = "iperf3 -c " + si.ii.cmd1[i] + " " + si.ii.cmd2[i];

            to.sendCommandAndRead(cmd, si.ii.diagCmd[i], si.ii.diagCmdTime[i], this);

            String details[] = to.getString.split("\n");
//               System.out.println( "************************" );
            for (int j = details.length - 1; j >= 0; j--) {
//                 System.out.println( details[j] );
                if (value[0] != -1 && value[1] != -1) {
                    break;
                }
                details[j] = details[j].trim();
                if (details[j].contains("receiver")) {
                    int unit = 1;
                    String Throughput = details[j].toLowerCase().trim();
//                    addLog(Throughput, id);
                    if (Throughput.contains("gbits/sec")) {
                        unit = unit * 1000;
                    }
                    double ThroughputValue = unit * Double.valueOf(Throughput.substring(Throughput.lastIndexOf("bytes") + 6, Throughput.lastIndexOf("bits/sec") - 1).trim());
                    value[0] = ThroughputValue;

                }

            }

            cmd = "iperf3 -s";
            addLog("DUT CMD: " + cmd, id);
            to.sendCommand(cmd);
            Thread.sleep(1000);
            cmd = "cmd /c iperf3 -c " + si.ii.socketIp[i] + " " + si.ii.cmd2[i];
            addLog("Windows: " + cmd, id);
            p = Runtime.getRuntime().exec(cmd);
            String line = "";
            BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream(), "GB2312"));
            while ((line = br.readLine()) != null) {
                addLog(line, 3, id);

                if (line.endsWith("receiver")) {
                    int unit = 1;
                    String Throughput = line.toLowerCase().trim();
//                    addLog(Throughput, id);
                    if (Throughput.contains("gbits/sec")) {
                        unit = unit * 1000;
                    }
                    double ThroughputValue = unit * Double.valueOf(Throughput.substring(Throughput.lastIndexOf("bytes") + 6, Throughput.lastIndexOf("bits/sec") - 1).trim());
                    value[1] = ThroughputValue;
//                    addLog("eth read=" + resultLog + " bits/sec", id);
                }
            }




            log = "," + df.format(value[0]) + "," + df.format(value[1]);
            grrItem.append(si.ii.name[i].trim()).append("_").append(name[0]).append(",").append(si.ii.name[i].trim()).append("_").append(name[1]).append(",");
            grrValue.append(value[0]).append(",").append(value[1]).append(",");

            sqlItem.append(",").append(name[0]).append(",").append(name[1]);
            sqlValue.append(",").append(value[0]).append(",").append(value[1]);
            for (int j = 0; j < name.length; j++) {
                apv.getAPIJsonConfig(ApiName[j], si, i);
                spec[j] = Double.valueOf(si.ii.limitDown[i].trim());
//                apv.phase_items[j] = new JSONObject();
//                apv.phase_items[j].put("device", si.ii.Cut1[i].toLowerCase().trim());
//                apv.phase_items[j].put("test", cut2[j].trim().toLowerCase());
//                apv.phase_items[j].put("speed", df.format(value[j]));
//                apv.phase_items[j].put("unit", "Mbps");
//                apv.phase_items[j].put("limit_min", spec[j]);
//                apv.phase_items[j].put("limit_max", "null");
                addLog(cut2[j].trim() + " value " + df.format(value[j]) + "  limit_min " + spec[j], id);
                addLog(ApiName[j] + "= " + value[j], id);
                if (value[j] < spec[j]) {
//                    si.ii.errorDes[i] = si.ii.name[i] + "." + name[j];
//                    addLog(si.ii.errorDes[i], id);
//                    if (apv.allErrorCode.containsKey(si.ii.errorDes[i])) {
//                        si.ii.errorCode[i] = apv.allErrorCode.get(si.ii.errorDes[i]);
//                    } else {
//                        addLog("Eden_errorCode.csv not have this errorCode", id);
//                        return false;
//                    }

                    status = false;
                }
                flat[j] = true;
            }
            if (status) {
//                apv.testGrrLog.append(grrValue.toString());
//                apv.testGrrItem.append(grrItem.toString());
//                apv.setCPKTestfile_detail("EthernetSpeedTest_" + si.ii.name[i], Items, log);
                resultLog = "PASS";
                return true;
            }
            //    Process pro = Runtime.getRuntime().exec("cmd /c open.bat");
        } catch (Exception ex) {
            ex.printStackTrace();
            apv.addApiJson(ApiName, value.toString().substring(1, value.toString().length() - 1).split(","), flat, i, id);
            addLog(ex.toString(), id);
        } finally {
//            if (si.ii.testLog[i] == null) {
//                si.ii.testLog[i] = apv.testLog[id - 1];
//            }
//            si.ii.testItem[i] = sqlItem.toString();
//            si.ii.testValue[i] = sqlValue.toString();
            //si.ii.resultType[i] = si.ii.itemDes[i] + Items;


//            apv.testLog[id - 1] = si.ii.testLog[i] + resultLog + log;
            resultLog = "";

            try {
                Runtime.getRuntime().exec(" taskkill /f /t /im  iperf.exe");
                Runtime.getRuntime().exec(" taskkill /f /t /im  iperf3.exe");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
                }


                to.disconnect();

//                br.close();

            } catch (Exception ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return false;
    }

    public boolean EthernetSpeedTest2GRx(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {

            to.readUntil(si.ii.diagCmd[i], 1);

            if (!to.sendCommand(si.ii.cmd1[i])) {
                addLog(si.ii.cmd1[i] + " fail", 1, id);
                return false;
            }
            addLog(si.ii.cmd1[i], 1, id);
            Thread.sleep(1000);

            String PCcmd = si.ii.diagCmd1[i];
            addLog(PCcmd, 3, id);
            Runtime.getRuntime().exec(PCcmd);
//            DOS_Set_read_cmdStart(PCcmd);

            Thread.sleep(si.ii.diagCmdTime[i] * 1000);
            char ctrlC = 99 & 0X1F;
//            to.sendCommand(ctrlC);
//            to.readAll(si.ii.diagCmd[i], 2);

            if (!to.sendCommandAndRead(ctrlC, si.ii.diagCmd[i], 2)) {
                addLog("ctrlC fail", 1, id);
                return false;
            }
            String getpcValue = to.getString;
//            addLog(getpcValue, 1, id);
            String start = si.ii.diagCmd2[i];
            if (!getpcValue.contains(start)) {
                return false;
            }

            String value = getpcValue.substring(getpcValue.indexOf(start) + start.length(), getpcValue.indexOf(si.ii.diagCmd[i])).trim();

            double Value = Double.valueOf(value) / 1024 / 1024;
            BigDecimal b = new BigDecimal(Value);
            int valueResult = b.setScale(0, BigDecimal.ROUND_HALF_UP).intValue();
            resultLog = String.valueOf(valueResult);

            addLog("Test Rx throughput value= " + resultLog + " Mbps", id);
            if (value.contains("nan")) {
                return false;
            }



            double spec = Double.valueOf(si.ii.limitDown[i]);
            if (Value >= spec) {
                return true;
            } else {
                addLog("spec Down=" + spec + "Mbps", id);
            }

        } catch (InterruptedException ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } catch (Exception ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } finally {
            try {
                Runtime.getRuntime().exec("taskkill /f /t /im  userspace_speedtest.exe");


            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
            to.disconnect();
        }

        return false;
    }

    public boolean EthernetSpeedTest2GTxREF(StationInfo si, int i, int id) {
        TelnetOper dut = new TelnetOper(apv, 1, id);
        TelnetOper ref = new TelnetOper(apv, 2, id);
//        TelnetOper to;
        resultLog = "";
        if (!ref.connect(si.ii.diagCmd1[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            ref.readUntil(si.ii.diagCmd[i], 1);

            if (!ref.sendCommandAndRead(si.ii.diagCmd2[i], si.ii.diagCmd[i], 1)) {
                addLog(si.ii.diagCmd2[i] + " fail", 2, id); //REF
                return false;
            }
            if (!ref.sendCommandAndRead(si.ii.diagCmd3[i], si.ii.diagCmd[i], 2)) {
                addLog(si.ii.diagCmd2[i] + " fail", 2, id); //REF
                return false;
            }

            if (!dut.connect(si.ii.cmd1[i])) {
                addLog(si.ii.cmd1[i] + " fail", 1, id); //DUT
                return false;
            }
            dut.readUntil(si.ii.diagCmd[i], 1);

            if (!dut.sendCommandAndRead(si.ii.cmd2[i], si.ii.diagCmd[i], 1)) {
                addLog(si.ii.cmd2[i] + " fail", 1, id); //DUT
                return false;
            }

            if (!dut.sendCommandAndRead(si.ii.cmd3[i], si.ii.diagCmd[i], 1)) {
                addLog(si.ii.cmd3[i] + " fail", 1, id); //DUT
                return false;
            }

            if (!ref.sendCommandAndRead(si.ii.diagCmd4[i], si.ii.diagCmd[i], 2)) {
                addLog(si.ii.diagCmd4[i] + " fail", 2, id); //REF
                return false;
            }

            if (!ref.getString.contains(" ttl=") || !ref.getString.contains(" time=")) {
                return false;
            }

            if (!ref.sendCommand(si.ii.diagCmd5[i])) {
                addLog(si.ii.diagCmd5[i] + " fail", 2, id); //REF
                return false;
            }

            if (!dut.sendCommand(si.ii.cmd4[i])) {
                addLog(si.ii.cmd4[i] + " fail", 2, id); //REF
                return false;
            }

            char ctrlC = 99 & 0X1F;

            Thread.sleep(si.ii.diagCmdTime[i] * 1000);

            ref.sendCommand(ctrlC);

            dut.sendCommand(ctrlC);


            String start = si.ii.diagCmd7[i];
            ref.readUntil(si.ii.diagCmd[i], 1);

            String pcString = ref.getString;
            addLog(pcString, 3, id);
            String value = pcString.substring(pcString.indexOf(start) + start.length(), pcString.lastIndexOf(si.ii.diagCmd[i])).trim();
            double Value = Double.valueOf(value) / 1024 / 1024;
            resultLog = String.valueOf(Value);
            addLog("Test Tx throughput=" + Value + " Mbps", id);
            //System.out.println(pcString);
            if (value.contains("nan")) {
                return false;
            }

            double spec = Double.valueOf(si.ii.limitDown[i]);
            if (Value >= spec) {
                return true;
            } else {
                addLog("Spec Down=" + spec + " Mbps", id);
            }
            //System.out.println(value);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } catch (Exception ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } finally {

            dut.disconnect();
            ref.disconnect();
        }

        return false;
    }

    public boolean EthernetSpeedTest2GRxREF(StationInfo si, int i, int id) {
        TelnetOper dut = new TelnetOper(apv, 1, id);
        TelnetOper ref = new TelnetOper(apv, 2, id);
        resultLog = "";
        if (!dut.connect(si.ii.cmd1[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            dut.readUntil(si.ii.diagCmd[i], 1);
            if (!dut.sendCommandAndRead(si.ii.cmd2[i], si.ii.diagCmd[i], 1)) {
                addLog(si.ii.cmd2[i] + " fail", 1, id);
                return false;
            }
            if (!dut.sendCommandAndRead(si.ii.cmd3[i], si.ii.diagCmd[i], 2)) {
                addLog(si.ii.cmd2[i] + " fail", 1, id);
                return false;
            }

            if (!ref.connect(si.ii.diagCmd1[i])) {
                addLog(si.ii.diagCmd1[i] + " fail", 2, id);
                return false;
            }
            ref.readUntil(si.ii.diagCmd[i], 1);

            if (!ref.sendCommandAndRead(si.ii.diagCmd2[i], si.ii.diagCmd[i], 1)) {
                addLog(si.ii.diagCmd2[i] + " fail", 2, id);
                return false;
            }

            if (!ref.sendCommandAndRead(si.ii.diagCmd3[i], si.ii.diagCmd[i], 1)) {
                addLog(si.ii.diagCmd3[i] + " fail", 2, id);
                return false;
            }
            for (int j = 0; j <= 5; j++) {
                if (!dut.sendCommandAndRead(si.ii.cmd4[i], si.ii.diagCmd[i], 2)) {
                    addLog(si.ii.cmd4[i] + " fail", 1, id);
                    return false;
                }

                if (dut.getString.contains("ttl=") && dut.getString.contains("time=")) {
                    break;
                } else if (j == 5) {
                    return false;
                }

            }


            if (!dut.sendCommand(si.ii.cmd5[i])) {
                addLog(si.ii.cmd5[i] + " fail", 1, id);
                return false;
            }

            if (!ref.sendCommand(si.ii.diagCmd4[i])) {
                addLog(si.ii.diagCmd4[i] + " fail", 2, id);
                return false;
            }

            char ctrlC = 99 & 0X1F;

            Thread.sleep(si.ii.diagCmdTime[i] * 1000);
            dut.sendCommand(ctrlC);
            ref.sendCommand(ctrlC);




            String start = si.ii.cmd7[i];
            dut.readUntil(si.ii.diagCmd[i], 1);
            String pcString = dut.getString;
            addLog(pcString, 1, id);
            // System.out.println(pcString);
            String value = pcString.substring(pcString.indexOf(start) + start.length(), pcString.lastIndexOf(si.ii.diagCmd[i])).trim();
            double Value = Double.valueOf(value) / 1024 / 1024;

            resultLog = String.valueOf(Value);
            //System.out.println(value);
            addLog("Test Rx throughput=" + Value + " Mbps", id);
            if (value.contains("nan")) {
                return false;
            }

            double spec = Double.valueOf(si.ii.limitDown[i]);

            if (Value >= spec) {
                return true;
            } else {
                addLog("Spec Down=" + spec + " Mbps", id);
            }
            //System.out.println(value);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } catch (Exception ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } finally {

            dut.disconnect();
            ref.disconnect();
        }

        return false;
    }

    public boolean EthernetSpeedTest1(StationInfo si, int i, int id) {
        resultLog = "";

        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            if (!ping(si.ii.cmd1[i], 3)) {
                addLog("Localhost  IP ERRO", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);

            to.getString = "";

            String cmd = "cmd /c iperf3 -s -D";
            addLog(cmd, 3, id);
            Process p = Runtime.getRuntime().exec(cmd);
            Thread.sleep(1000);
            cmd = "iperf3 -c " + si.ii.cmd1[i] + " " + si.ii.cmd2[i];
            to.sendCommandAndRead(cmd, si.ii.diagCmd[i], si.ii.diagCmdTime[i], this);
            String details[] = to.getString.split("\n");
            double ThroughputValue = 0;
            for (int j = details.length - 1; j >= 0; j--) {
                details[j] = details[j].trim();
                if (details[j].contains("SUM")) {
                    int unit = 1;
                    String Throughput = details[j].toLowerCase().trim();
//                    addLog(Throughput, id);
                    if (Throughput.contains("gbits/sec")) {
                        unit = unit * 1000;
                    }

                    resultLog = Throughput.substring(Throughput.lastIndexOf("bytes") + 6, Throughput.lastIndexOf("bits/sec") - 1).trim();

                    ThroughputValue = unit * Double.valueOf(resultLog);
                    if (unit > 1) {
                        resultLog = String.valueOf(ThroughputValue);
                    }
                    addLog("get value=" + resultLog + " Mbits/sec", id);
                    break;
                }

            }
            addLog("spec =" + si.ii.limitDown[i] + " Mbits/sec", id);
            double spec = Double.valueOf(si.ii.limitDown[i]);
            if (ThroughputValue >= spec) {

                return true;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } finally {
            try {
                Runtime.getRuntime().exec("taskkill /f /t /im  iperf3.exe");


            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
            to.disconnect();
        }

        return false;
    }

    public boolean EthernetSpeedTestRx(StationInfo si, int i, int id) {
        resultLog = "";

        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            if (!ping(si.ii.socketIp[i], 3)) {
                addLog("Localhost  IP ERRO", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);

            to.getString = "";

            String cmd = "iperf3 -s";
            addLog("DUT CMD: " + cmd, id);
            to.sendCommand(cmd);
            Thread.sleep(1000);
            cmd = "cmd /c iperf3 -c " + si.ii.socketIp[i] + " " + si.ii.cmd2[i];
            addLog("Windows: " + cmd, id);
            Process p = Runtime.getRuntime().exec(cmd);
            String line = "";
            BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream(), "GB2312"));
            double ThroughputRxValue = 0;
            while ((line = br.readLine()) != null) {
                addLog(line, 3, id);

                if (line.endsWith("receiver")) {
                    int unit = 1;
                    String Throughput = line.toLowerCase().trim();
//                    addLog(Throughput, id);
                    if (Throughput.contains("gbits/sec")) {
                        unit = unit * 1000;
                    }
                    resultLog = Throughput.substring(Throughput.lastIndexOf("bytes") + 6, Throughput.lastIndexOf("bits/sec") - 1).trim();

                    ThroughputRxValue = unit * Double.valueOf(resultLog);
                    if (unit > 1) {
                        resultLog = String.valueOf(ThroughputRxValue);
                    }
                    addLog("eth read=" + resultLog + " Mbits/sec", id);
                    break;
                }
            }
            addLog("spec =" + si.ii.limitDown[i] + " Mbits/sec", id);
            double spec = Double.valueOf(si.ii.limitDown[i]);
            if (ThroughputRxValue >= spec) {
                return true;
            }
            //    Process pro = Runtime.getRuntime().exec("cmd /c open.bat");
        } catch (Exception ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } finally {
            to.disconnect();

        }

        return false;
    }

    public boolean SubsystemTest(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {

            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            String value[] = details.split("\r\n");
            resultLog = value[0].trim();
            int num = 0;
            for (String item : value) {
                if (item.contains(si.ii.limitDown[i])) {
                    return true;
                }
            }
            addLog("read: " + resultLog, id);
            addLog("spec version=" + si.ii.limitDown[i], id);
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean CCGFirmware(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {

            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            String value[] = details.split("\r\n");
            resultLog = value[0].trim();
            int num = 0;
            for (String item : value) {
                if (item.contains(si.ii.limitDown[i])) {
                    num++;
                } else {
                    resultLog = item.trim();
                }
            }
            if (num >= 2) {
                return true;
            }
            System.out.println("NUM: " + num);
            addLog("read: " + resultLog, id);
            addLog("spec version=" + si.ii.limitDown[i], id);
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean MMCModel(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {

            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);
            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            details = details.substring(details.indexOf("]") + 1).trim();
            addLog(details, 1, id);
            String[] value = details.split(" ");
            value[2] = value[2].trim();
            String[] spec = si.ii.limitDown[i].split("\\|");
            if (value.length > 2) {
                addLog("read: " + value[2], id);
                resultLog = value[2];
                for (String item : spec) {
                    addLog("spec: " + item, id);
                    if (value[2].equals(item)) {
                        return true;
                    }
                }
            }

            addLog("spec version=" + si.ii.limitDown[i], id);
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean PhyModel(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {

            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);
            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            details = details.substring(details.lastIndexOf("PHY ID is") + 10).trim();
            resultLog = details;
            addLog(details, 1, id);
            if (details.equals(si.ii.limitDown[i])) {
                return true;
            }
            addLog("spec version=" + si.ii.limitDown[i], id);
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean phyStatus(StationInfo si, int i, int id) {
        resultLog = "";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);
            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            details = details.substring(details.lastIndexOf(":") + 1);
            resultLog = details;
            if (details.equals(si.ii.diagCmd1[i]) || details.equals(si.ii.diagCmd2[i])) {
                return true;
            } else {
//                addLog(si.ii.Cut2[i] + " Fail!", id);
                addLog("read: " + details, id);
                addLog("spec: " + si.ii.diagCmd1[i], id);
                addLog("spec: " + si.ii.diagCmd2[i], id);
            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean GoldenBringupThread(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        int hz = Integer.parseInt(si.ii.Cut0[i].trim());
        String ip = apv.getGoldenIP(hz);
        if (ip == null || ip.equals("")) {
            ip = si.ii.socketIp[i];
        }
        addLog("getGolden IP: " + ip, id);
        GoldenThread(ip, si.ii.cmd[i], si.ii.diagCmd1[i]);
        resultLog = "PASS";
        return true;

    }

    public boolean WifiSpeedTest(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        int hz = Integer.parseInt(si.ii.Cut0[i].trim());
        String goldenIp = apv.getGoldenIP(hz);
        if (goldenIp == null || goldenIp.equals("")) {
            goldenIp = si.ii.cmd1[i];
        }
        addLog("get Golden IP: " + goldenIp, id);
        si.ii.errorDes[i] = si.ii.cmd2[i];

        TelnetOper golden = new TelnetOper(apv, 2, id);
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        to.readAll(si.ii.diagCmd[i], 1);
        addLog("Telnet " + si.ii.socketIp[i] + " Pass!", id);
        if (!golden.connect(goldenIp)) {
            addLog("Telnet " + goldenIp + " Fail!", id);
            return false;
        }
        addLog("Telnet " + goldenIp + " Pass!", id);
        String ping = "ping " + si.ii.diagCmd1[i];
        addLog("DUT ping golden: " + ping, id);
        int pingTime = Integer.parseInt(si.ii.diagCmd3[i].trim());
        if (!to.sendCommandAndRead(ping + "\r\n", "time=", pingTime)) {

            addLog("CMD " + ping + " Fail!", id);
            return false;
        }
        if (!to.getString.contains("ttl=")) {
            addLog("CMD " + ping + " Fail!", id);
            return false;
        }
        to.disconnect();
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        to.readAll(si.ii.diagCmd[i], 1);
        try {
            String cmd = "iperf3 -s";
            addLog(" golden CMD: " + cmd, id);
            golden.write(cmd + "\r\n");


            cmd = "iperf3 -c " + si.ii.diagCmd1[i] + " " + si.ii.diagCmd2[i];
            addLog("DUT CMD: " + cmd, id);
            to.sendCommandAndRead(cmd, si.ii.diagCmd[i], si.ii.diagCmdTime[i], this);

            addLog(to.getString, 1, id);

            String details[] = to.getString.split("\n");
//               System.out.println( "************************" );
            double ThroughputRxValue = 0;
            for (int j = details.length - 1; j >= 0; j--) {

                String line = details[j].trim();

                if (line.startsWith("[SUM]") && line.endsWith("receiver")) {
                    int unit = 1;
                    String Throughput = line.toLowerCase().trim();
//                    addLog(Throughput, id);
                    if (Throughput.contains("gbits/sec")) {
                        unit = unit * 1000;
                    }
                    resultLog = Throughput.substring(Throughput.lastIndexOf("bytes") + 6, Throughput.lastIndexOf("bits/sec") - 1).trim();

                    ThroughputRxValue = unit * Double.valueOf(resultLog);
                    if (unit > 1) {
                        resultLog = String.valueOf(ThroughputRxValue);
                    }
                    addLog("get value=" + resultLog + " Mbits/sec", id);
                    addLog("spec =" + si.ii.limitDown[i] + " Mbits/sec", id);
                    double spec = Double.valueOf(si.ii.limitDown[i]);
                    if (ThroughputRxValue >= spec) {
                        return true;
                    }
                }

            }



        } catch (Exception ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } finally {

            to.disconnect();
            golden.disconnect();

        }

        return false;
    }

    public boolean WifiSpeedTest1(StationInfo si, int i, int id) {
        resultLog = "";
        boolean reset = false;
        String ping = "ping " + si.ii.socketIp[i];
        addLog("DUT ping golden PC: " + ping, id);

        try {



            if (!ping(si.ii.socketIp[i], si.ii.diagCmdTime[i])) {
                addLog("ping golden fail", id);
                return false;
            }


            reset = true;
            double ThroughputRxValue = 0;
            for (int j = 0; j < 3; j++) {
                String cmd = "cmd /c iperf3 -c " + si.ii.socketIp[i] + " " + si.ii.diagCmd[i];
                addLog("Windows: " + cmd, id);
                Process p = Runtime.getRuntime().exec(cmd);
                String line = "";
                BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream(), "GB2312"));
                ThroughputRxValue = 0;
                while ((line = br.readLine()) != null) {
                    addLog(line, 3, id);


                    if (line.startsWith("[SUM]") && line.endsWith("receiver")) {
                        int unit = 1;
                        String Throughput = line.toLowerCase().trim();
//                    addLog(Throughput, id);
                        if (Throughput.contains("gbits/sec")) {
                            unit = unit * 1000;
                        }
                        resultLog = Throughput.substring(Throughput.lastIndexOf("bytes") + 6, Throughput.lastIndexOf("bits/sec") - 1).trim();

                        ThroughputRxValue = unit * Double.valueOf(resultLog);
                        if (unit > 1) {
                            resultLog = String.valueOf(ThroughputRxValue);
                        }
                    }
                }
                if (!resultLog.equals("")) {
                    break;
                } else {
                    TcpClient tc = new TcpClient(apv, id);
                    if (!tc.connect(si.ii.socketIp[i], si.ii.socketPort[i])) {
                        addLog("connect golden PC fail", id);
                        return false;
                    }
                    tc.sendTcpData(si.ii.cmd1[i]);
                    try {
                        Thread.sleep(1500);


                    } catch (InterruptedException ex) {
                        Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            addLog("get value=" + resultLog + " Mbits/sec", id);
            addLog("spec =" + si.ii.limitDown[i] + " Mbits/sec", id);
            double spec = Double.valueOf(si.ii.limitDown[i]);
            if (ThroughputRxValue >= spec) {
                reset = false;
                return true;
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } finally {
            if (reset) {
                TcpClient tc = new TcpClient(apv, id);
                if (!tc.connect(si.ii.socketIp[i], si.ii.socketPort[i])) {
                    addLog("connect golden PC fail", id);
                    return false;
                }
                tc.sendTcpData(si.ii.cmd1[i]);
                try {
                    Thread.sleep(1500);


                } catch (InterruptedException ex) {
                    Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
        return false;
    }

    public boolean WifiSpeedTestRx(StationInfo si, int i, int id) {
        resultLog = "";
        int hz = Integer.parseInt(si.ii.Cut0[i].trim());
        String goldenIp = apv.getGoldenIP(hz);
        if (goldenIp == null || goldenIp.equals("")) {
            goldenIp = si.ii.cmd1[i];
        }
        addLog("get Golden IP: " + goldenIp, id);


//        boolean status = true;

        TelnetOper golden = new TelnetOper(apv, 2, id);
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        to.readAll(si.ii.diagCmd[i], 1);
//        String ping = "ping " + si.ii.diagCmd1[i];


        addLog("Telnet " + si.ii.socketIp[i] + " Pass!", id);
        if (!golden.connect(goldenIp)) {
            addLog("Telnet " + goldenIp + " Fail!", id);
            return false;
        }
        golden.readAll(si.ii.diagCmd[i], 1);
//        golden.clearAll(si.ii.diagCmd[i], 1);
        addLog("Telnet " + goldenIp + " Pass!", id);
        String ping = "ping " + si.ii.socketIp[i];
        addLog("golden ping DUT: " + ping, id);
//        int pingTime = Integer.parseInt(si.ii.diagCmd3[i].trim());
        if (!golden.sendCommandAndRead(ping + "\r\n", "time=", 1)) {
            addLog("CMD " + ping + " Fail!", id);
            return false;
        }
//          addLog(golden.getString,2, id);
        if (!golden.getString.contains("ttl=")) {
            addLog("CMD " + ping + " Fail!", id);
            return false;
        }
        golden.disconnect();
        if (!golden.connect(goldenIp)) {
            addLog("Telnet " + goldenIp + " Fail!", id);
            return false;
        }
        golden.readAll(si.ii.diagCmd[i], 1);
        try {
//            si.ii.errorDes[i] = si.ii.cmd2[i];
//            if (apv.allErrorCode.containsKey(si.ii.errorDes[i])) {
//                si.ii.errorCode[i] = apv.allErrorCode.get(si.ii.errorDes[i]);
//            } else {
//                addLog(si.ii.errorDes[i], id);
//                addLog("Eden_errorCode.csv not have this errorCode", id);
//                return false;
//            }
//            to.getString = "";

            String cmd = "iperf3 -s";
            addLog(" DUT CMD: " + cmd, id);
            to.write(cmd + "\r\n");
            cmd = "iperf3 -c " + si.ii.socketIp[i] + si.ii.diagCmd2[i];

            addLog("Golden CMD: " + cmd, id);
            golden.sendCommandAndRead(cmd, si.ii.diagCmd[i], si.ii.diagCmdTime[i], this);

//            addLog(to.getString + cmd, 1, id);

            String details[] = golden.getString.split("\n");
//               System.out.println( "************************" );
            for (int j = details.length - 1; j >= 0; j--) {
                details[j] = details[j].trim();
                if (details[j].contains("[SUM]") && details[j].contains("receiver")) {
                    int unit = 1;
                    String Throughput = details[j].toLowerCase().trim();
//                    addLog(Throughput, id);
                    if (Throughput.contains("gbits/sec")) {
                        unit = unit * 1000;
                    }
                    double ThroughputValue = unit * Double.valueOf(Throughput.substring(Throughput.lastIndexOf("bytes") + 6, Throughput.lastIndexOf("bits/sec") - 1).trim());

                    resultLog = String.valueOf(ThroughputValue);
                    addLog("Rx value " + resultLog + " limit_min " + si.ii.limitDown[i]);
                    double spec = Double.parseDouble(si.ii.limitDown[i]);
                    if (ThroughputValue < spec) {
                        return false;
                    } else {
                        return true;
                    }
                }

            }

        } catch (Exception ex) {
            ex.printStackTrace();
            addLog(ex.toString(), id);
        } finally {
            try {
                Runtime.getRuntime().exec("taskkill /f /t /im  iperf3.exe");


            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }
//               byte a = 0x43 & 0x1f;
//            to.write(a);
            to.disconnect();
            golden.disconnect();

        }

        return false;
    }

    public boolean ambitFlashAndCheckBTFW(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            addLog(details, 1, id);
            if (details.contains(si.ii.spec[i])) {
                resultLog = "PASS";
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean MMCReadWriteSpeedTest(StationInfo si, int i, int id) {

        resultLog = "FAIL";
        //  si.ii.ftpCsvTitle[i] = "";
        // si.ii.ftpCsvLog[i] = "";
        double readingWritingValue[] = new double[2];
        String EmmcReadWrite[] = {"", ""};
        boolean Status[] = {false, false};
//        String[] down = si.ii.limitDown[i].split(",");
        StringBuilder Value = new StringBuilder();
        StringBuilder Items = new StringBuilder();
        String ApiName[] = si.ii.apiName[i].split(",");
        Map<String, String> mmcReadWrite = new HashMap< String, String>(); //类型 内容 



        try {
            apv.getAPIJsonConfig(ApiName[0], si, i);
            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i] + "\r\n", si.ii.diagCmd[i], 10)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
//            addLog(details, 1, id);
            while (true) {
                int index = details.lastIndexOf("Writing");
                if (index == -1) {
                    break;
                }
                String str = details.substring(index, details.length()).trim();
                String type = str.substring(str.indexOf(" of ") + 3, str.indexOf(" in ")).trim();
//                System.out.println("*****************");
//                System.out.println(type);
//                System.out.println(str);
                mmcReadWrite.put(type, str);
                details = details.substring(0, index);
            }
            if (!mmcReadWrite.containsKey(si.ii.Cut0[i])) {
                addLog("not have " + si.ii.Cut0[i], id);
                return false;
            }
            details = mmcReadWrite.get(si.ii.Cut0[i]);
            for (int j = readingWritingValue.length - 1; j >= 0; j--) {
                int value_head = details.indexOf("seconds,") + 8;
                int value_end = details.indexOf("MB/s");
                if (value_head > value_end || value_end <= 0) {                         // 判断
                    return false;
                }
                EmmcReadWrite[j] = details.substring(value_head, value_end).trim();
                readingWritingValue[j] = Double.valueOf(EmmcReadWrite[j]);   // 截取
                details = details.substring(value_end + 4);
            }


            Items.append(",").append("emmc_read").append(",").append("emmc_write");
            Value.append(",").append(readingWritingValue[0]).append(",").append(readingWritingValue[1]);
            //apv.phase_items = new JSONObject[2];

            boolean status = true;
            for (int j = 0; j < EmmcReadWrite.length; j++) {
                addLog(ApiName[j] + "= " + EmmcReadWrite[j], id);
                apv.getAPIJsonConfig(ApiName[j], si, i);
                if (readingWritingValue[j] < Double.valueOf(si.ii.limitDown[i].trim())) {
                    addLog("must " + ApiName[j] + ">=" + si.ii.limitDown[i].trim(), id);
                    Status[j] = false;
                    status = false;
                } else {
                    Status[j] = true;
                }
            }

//            apv.testGrrLog.append(grrValue.toString());
//            apv.testGrrItem.append(grrItem.toString());
            if (status) {
                resultLog = "PASS";
                return true;
            }

        } catch (Exception e) {
            addLog(e.toString(), id);
            e.printStackTrace();
        } finally {
            apv.addApiJson(ApiName, EmmcReadWrite, Status, i, id);
            to.disconnect();


        }
        return false;
    }

    public boolean wifiTestSetup(StationInfo si, int i, int id) {
        resultLog = "";
//        String cmd[] = {si.ii.cmd1[i], si.ii.cmd2[i]};
        String spec[] = si.ii.spec[i].split(",");
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            to.readUntil(si.ii.diagCmd[i], 1);

            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);

            String detailses[] = details.split("\r\n");
            int specnum = 0;

            for (int j = 0; j < detailses.length; j++) {
                if (detailses[j].contains(spec[specnum])) {
                    resultLog += spec[specnum] + ";";
                    specnum++;
                }
                if (specnum == 3) {
                    resultLog = resultLog.substring(0, resultLog.length() - 1);
                    return true;
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean BLETestSetup(StationInfo si, int i, int id) {
        resultLog = "FAIL";
//        String cmd[] = {si.ii.cmd1[i], si.ii.cmd2[i]};

        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }

//        File CmdFile = new File(si.ii.diagCmd1[i]);
//        if (!CmdFile.exists()) {
//            this.addLog("not have file " + si.ii.diagCmd1[i], id);
//            return false;
//        }

        try {
            to.readUntil(si.ii.diagCmd[i], 1);
//            BufferedReader br = null;
//            String iqLogLine = "";

//            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
//            while ((iqLogLine = br.readLine()) != null) {
////                this.addLog(iqLogLine, 1, id);
//                if (!to.sendCommandAndRead(iqLogLine, si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
//                    return false;
//                }
////                this.//addLog(to.getString, 1, id);
//            }
//            String cmd[] = si.ii.cmd[i].split(",");
//            for (int j = 0; j < cmd.length; j++) {
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                //addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            String spec = si.ii.spec[i];
            if (!si.ii.limitDown[i].equals("")) {
                spec = si.ii.limitDown[i];
            }

            if (to.getString.contains(spec)) {
                resultLog = "PASS";
                return true;
            }


//            }


        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean BLEVersion(StationInfo si, int i, int id) {
        resultLog = "";
//        String cmd[] = {si.ii.cmd1[i], si.ii.cmd2[i]};

        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }


        try {
            to.readUntil(si.ii.diagCmd[i], 1);

            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                //addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            String spec = si.ii.spec[i];
            if (!to.getString.contains(spec)) {
                return false;
            }
            String limitDown = "";
            if (!si.ii.limitDown[i].equals("")) {
                limitDown = si.ii.limitDown[i];
            }
            String version = to.getString.substring(to.getString.indexOf(spec) + spec.length()).trim();
            version = version.substring(0, version.indexOf(" ")).trim();
            resultLog = version;
            addLog("version=" + version, id);
            if (version.contains(limitDown)) {
//                resultLog = "PASS";
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean BLETestSetupCom(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        ComPort cp = new ComPort(apv, id, 1);
//        String spec[] = si.ii.spec[i].split(",");
        boolean comport = false;
        try {
            for (int j = 0; j < 3; j++) {
                if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
                    cp.close();
                    continue;
                } else {
                    comport = true;
                    break;
                }
            }
            if (!comport) {
                return false;
            }
            cp.clearRead();
//            cp.read(1);
            addLog("CMD:" + si.ii.cmd[i], 1, id);
            cp.write(si.ii.cmd[i] + "\n");
//            cp.readUntil(si.ii.diagCmd[i], si.ii.diagCmdTime[i]);

            if (!cp.readUntil(si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
//                addLog(cp.readAll, 1, id);
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            if (cp.readAll.contains(si.ii.spec[i])) {
                resultLog = "PASS";
                return true;
            }

//            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            cp.close();
        }
        return false;
    }

//
//    public boolean thermalShutdown(StationInfo si, int i, int id) {
//        resultLog = "FAIL";
//        if (!to.connect(si.ii.socketIp[i])) {
//            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
//            return false;
//        }
//        try {
//            to.readUntil(si.ii.diagCmd[i], 1);
//            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
//                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
//                return false;
//            }
//
//            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
//            addLog(details, id);
//            if (details.contains(si.ii.spec[i])) {
//                resultLog = "PASS";
//                return true;
//            }
//            try {
//                Runtime.getRuntime().exec("cmd /c  arp -d");
//
//            } catch (IOException ex) {
//                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//            if (ping(si.ii.socketIp[i], si.ii.diagCmdTime[i])) {
//                addLog("Ping " + si.ii.socketIp[i] + " PASS!", id);
//                resultLog = "PASS";
//                return true;
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//            addLog(e.toString(), id);
//        } finally {
//            to.disconnect();
//        }
//        return false;
//    }
    public boolean ofdmaRadioValidation(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        Map txRxPower = new TreeMap();
        //     String antistop[] = si.ii.cmd[i].split(",");
//        ArrayList<String> powerName = new ArrayList<String>();
        ArrayList<Integer> userNum = new ArrayList<Integer>();
        boolean bool = true;
        String log = "";
        String Items = "";
        String error = "";
//        int userNumAll = 0;
//        si.ii.errorDes[i] = si.ii.cmd1[i];
//        if (apv.allErrorCode.containsKey(si.ii.errorDes[i])) {
//            si.ii.errorCode[i] = apv.allErrorCode.get(si.ii.errorDes[i]);
//        } else {
//            addLog("Eden_errorCode.csv not have this errorCode", id);
//            return false;
//        }
        try {
            String datelog[] = si.ii.cmd[i].split(",");
            if (apv.IQlog.containsKey("RESERT")) {    //寻找测试项目
                resultLog = "PASS";
                String[] details = (String[]) apv.IQlog.get("RESERT");
//                addLog("get test item: ", id);
                String ofdma = "";
                int usernum = 0;
                for (int j = 0; j < details.length; j++) {
                    error = details[j];
                    if (details[j].contains("ADD_USER")) {
                        usernum++;
                    }
                    if (details[j].contains("TEST_BUILD")) {
                        String powerItem = details[j].substring(0, details[j].indexOf("ANT") + 5).trim();
                        String frequency = PatternStarts(details[j], "\\b\\d{4}\\b").trim();
                        int chain = Integer.valueOf(PatternStarts(details[j], "(?<=ANT)\\d").trim()) - 1;

                        String data_rate = PatternStarts(details[j], "(?<= " + frequency + " ).+(?=ANT)").trim();

                        String name = frequency + "," + data_rate + "," + chain;
                        ofdma = name;
                        if (!apv.IQlog.containsKey(powerItem.trim())) {    //寻找测试项目
                            addLog("FAIL! " + name, id);
                            return false;
                        }
                        ArrayList<String> detailsAll = new ArrayList<String>();
                        String[] details1 = (String[]) apv.IQlog.get(powerItem);   //获取内容
                        for (int k = 0; k < details1.length; k++) {
                            detailsAll.add(details1[k]);
                        }
//                        powerName.add(name);
                        txRxPower.put(name, detailsAll.toArray(new String[detailsAll.size()]));
                    } else if (details[j].contains("TEST_RUN ")) {
//                        userNumAll += usernum;
                        userNum.add(usernum);
                        usernum = 0;
                        String powerItem = details[j].substring(0, details[j].indexOf("RUN") + 3).trim();
                        ArrayList<String> detailsAll = new ArrayList<String>();
                        String[] details1 = (String[]) apv.IQlog.get(powerItem);   //获取内容                     
                        for (int k = 0; k < details1.length; k++) {
                            detailsAll.add(details1[k]);
                        }
                        details1 = (String[]) txRxPower.get(ofdma);
                        for (int k = 0; k < details1.length; k++) {
                            detailsAll.add(details1[k]);

                        }
                        txRxPower.put(ofdma, detailsAll.toArray(new String[detailsAll.size()]));
                    }
                }
            } else {
                this.addLog(" read wifi IQ log.txt erro", id);
                bool = false;
            }
//            String[] PowerName = powerName.toArray(new String[powerName.size()]);
//            Integer[] UserNum = userNum.toArray(new Integer[userNum.size()]);

            //apv.phase_items = new JSONObject[userNumAll];
            Iterator iter = txRxPower.entrySet().iterator();
            int num = -1;
            while (iter.hasNext()) {

                boolean result = true;
                Map.Entry entry = (Map.Entry) iter.next();
                String[] details = (String[]) entry.getValue();
                String itemName = (String) entry.getKey();
//                addLog(details[0], id);
                String frequency = itemName.split(",")[0];
                int Freq = Integer.parseInt(frequency);
                String radio = "0";
                if (Freq > 5500) {
                    radio = "2";
                } else if (Freq > 5000) {
                    radio = "1";
                }
                String data_rate = itemName.split(",")[1].replaceAll(" ", "*");
                int chain = Integer.parseInt(itemName.split(",")[2]);
                String evm = "null";
                String freq_error = "null";
                String lo_leakage = "null";
                String per_test_power = "null";
                String power_accuracy = "null";
                String power_spec = "null";
                String rx_per = "null";
                String spectral_flatness = "null";
                String spectrum_mask = "null";
                String sym_clk_error = "null";
                String lg = "";
                String item = "";
                String user = "";
                for (int k = 0; k < details.length; k++) {
                    error = details[k];
                    if (details[k].startsWith("USER") && details[k].contains(".RU")) {
                        String User = details[k].substring(0, details[k].indexOf("."));
                        if (!User.equals(user)) {
                            user = User;
                            num++;
                        }
                    }
                    if (num == -1) {

                        continue;
                    } else if (details[k].contains("USER") && details[k].contains("EVM.")) {
                        data_rate = details[k].substring(details[k].indexOf("EVM.") + 4);
                        data_rate = data_rate.substring(0, data_rate.indexOf(".", data_rate.indexOf(".") + 1)).replaceAll("\\.", "*");
                    }
                    if (details[k].contains("EVM_DB_AVG_S1")) {
                        evm = details[k].substring(details[k].indexOf(":") + 1, details[k].indexOf("dB")).trim();
                    } else if (details[k].contains("FREQ_ERROR_AVG")) {
                        freq_error = details[k].substring(details[k].indexOf(":") + 1, details[k].indexOf("ppm")).trim();
                    } else if (details[k].contains("LO_LEAKAGE_VSA1")) {
                        lo_leakage = details[k].substring(details[k].indexOf(":") + 1, details[k].indexOf("dB")).trim();
                    } else if (details[k].contains("POWER_RMS_AVG_VSA1")) {
                        power_accuracy = details[k].substring(details[k].indexOf(":") + 1, details[k].indexOf("dBm")).trim();
                    } else if (details[k].contains("TX_POWER_DBM")) {
                        power_spec = details[k].substring(details[k].indexOf(":") + 1, details[k].indexOf("dBm")).trim();
                    } else if (details[k].contains("VIOLATION_PERCENTAGE_VSA1")) {
                        spectrum_mask = details[k].substring(details[k].indexOf(":") + 1, details[k].indexOf("%")).trim();
                    } else if (details[k].contains("SYMBOL_CLOCK_ERR")) {
                        sym_clk_error = details[k].substring(details[k].indexOf(":") + 1, details[k].indexOf("ppm")).trim();
                    }




                    if (details[k].contains(si.ii.spec[i])) {
                        String error2 = "Radio" + radio;
                        String error3 = "2GHz";
                        if (radio.equals("1")) {
                            error3 = "5GL";
                        } else if (radio.equals("2")) {
                            error3 = "5GH";
                        }
//                        si.ii.errorDes[i] = error1 + "." + error2 + "." + error3 + ".Chain" + chain + "." + si.ii.cmd2[i];
//
//                        if (apv.allErrorCode.containsKey(si.ii.errorDes[i])) {
//                            si.ii.errorCode[i] = apv.allErrorCode.get(si.ii.errorDes[i]);
//                            addLog(si.ii.errorDes[i] + " " + si.ii.errorCode[i], id);
//                        } else {
//                            addLog(si.ii.errorDes[i], id);
//                            addLog("Eden_errorCode.csv not have this errorCode", id);
//                        }
                        result = false;
                        bool = false;
//                    break;
                    }

                }

                for (int j = 0; j < num; j++) {
                    String json = "";
                    json = json.replace("{", "");
                    json = json.replace("}", "");
                    String str[] = json.split(",");
                    for (int a = 0; a < str.length; a++) {
                        String string[] = str[a].split(":");
                        for (int k = 0; k < datelog.length; k++) {
                            if (datelog[k].equals(string[0])) {
                                lg += "," + string[1];
                                item += "," + string[0];
                            }

                        }

                    }
                    Items += "," + itemName.replaceAll(",", "-") + item;
                    log += "," + result + lg;

                }
            }




            if (bool) {
                resultLog = "PASS";
                return true;
            }
        } catch (Exception e) {
            System.out.println(error);
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
        }
        return false;
    }

    public boolean RadioValidationPower(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String ApiName[] = new String[1];
        String Value[] = new String[1];
        boolean Status[] = {false};
        String log = "";
        String Items = "";
        String spec_fail[] = si.ii.spec[i].split(",");
//        boolean status = true;
        boolean bool = true;
        try {

            File IQLogFile = new File(apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut0[i]);
            ParseIQLog(IQLogFile);
            ArrayList<String> IQ_key = new ArrayList<String>();
//            ArrayList<Boolean> itemStatus = new ArrayList<Boolean>();

            if (apv.IQlog.containsKey("RESERT")) {    //寻找测试项目
                String[] details = (String[]) apv.IQlog.get("RESERT");

                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains("TEST_VERIFY EVM POWER") && !details[j].contains("[Skipped]")) {

                        int index = details[j].indexOf(":");
                        String key = details[j].substring(0, index).trim();
                        addLog(key, id);
                        IQ_key.add(key);
//                        if (details[i].contains("[Failed]")) {
//                            itemStatus.add(false);
//                        } else {
//                            itemStatus.add(true);
//                        }
                    }
                }
            } else {
                String apiName = iqLogEndItem;
                if (iqLogEndItem.contains("TEST_VERIFY")) {
                    String frequency = PatternStarts(iqLogEndItem, "\\b\\d{4}\\b").trim();
                    String str = iqLogEndItem.substring(iqLogEndItem.indexOf("MCS"));
                    String mcs = str.substring(0, str.indexOf(" ")).trim();
                    str = iqLogEndItem.substring(iqLogEndItem.indexOf("BW-") + 3);
                    String bw = str.substring(0, str.indexOf(" ")).trim();
                    str = iqLogEndItem.substring(iqLogEndItem.indexOf("ANT"));
                    String ANT = str.substring(str.indexOf("ANT") + 3).trim();

                    if (iqLogEndItem.contains(" PER ")) {

                        apiName = "WIFI_RX_PER_F" + frequency + "_BW" + bw + "_" + mcs;
                        for (int j = 0; j < apv.listJsonItemName.size(); j++) {
                            apiName = apiName.toLowerCase();
                            String key = apv.listJsonItemName.get(j);
                            if (key.contains(apiName) && key.contains("_A" + ANT)) {
                                apiName = key;
                            }
                        }

                    } else if (iqLogEndItem.contains(" EVM POWER ")) {
                        apiName = "WIFI_TX_POWER_F" + frequency + "_BW" + bw + "_" + mcs + "_A" + ANT;
                    }
                    ApiName[0] = apiName.toLowerCase();
                    Value[0] = "";
                    Status[0] = false;
                }
//                if (apv.allErrorCode.containsKey(errorDes)) {
//                    si.ii.errorCode[i] = apv.allErrorCode.get(errorDes);
//                    si.ii.errorDes[i] = errorDes;
//                } else {
//                    addLog(" not have this errorCode\t" + errorDes);
//
//                }
                return false;
            }
            ApiName = new String[IQ_key.size()];
            Value = new String[IQ_key.size()];
            Status = new boolean[IQ_key.size()];

            for (int a = 0; a < IQ_key.size(); a++) {

                String key = IQ_key.get(a);
                if (!apv.IQlog.containsKey(key)) {    //寻找测试项目
                    addLog("FAIL! " + key, id);

                    return false;
                }

                String frequency = PatternStarts(key, "\\b\\d{4}\\b").trim();
                String str = key.substring(key.indexOf("MCS"));
                String mcs = str.substring(0, str.indexOf(" ")).trim();
                str = key.substring(key.indexOf("BW-") + 3);
                String bw = str.substring(0, str.indexOf(" ")).trim();
                str = key.substring(key.indexOf("ANT"));
                String ANT = str.substring(str.indexOf("ANT") + 3).trim();
                String JsonName = "WIFI_TX_POWER_F" + frequency + "_BW" + bw + "_" + mcs + "_A" + ANT;
                JsonName = JsonName.toLowerCase();
//                System.out.println(JsonName);
                addLog("JsonName= " + JsonName, id);
                addLog("IQName= " + key, id);
                if (!apv.getAPIJsonConfig(JsonName, si, i)) {    //通过apiName获取规格信息
                    addLog("JsonName  fail ", id);
                    continue;
//                    return false;
                }
                ApiName[a] = JsonName;
                Value[a] = "";
                Status[a] = true;

                String[] details = (String[]) apv.IQlog.get(key);   //获取内容
                String spec[] = si.ii.cmd[i].split(",");
                String value = "";
                String lower_limit = "";
                String upper_limit = "";
                for (int j = 0; j < details.length; j++) {
                    for (int k = 0; k < spec.length; k++) {
                        if (details[j].startsWith(spec[k])) {

                            addLog(details[j], id);
                            value = details[j].substring(details[j].indexOf(":") + 1, details[j].indexOf(si.ii.units[i])).trim();
//                        resultLog = value;
                            Value[a] = value;
                            lower_limit = details[j].substring(details[j].indexOf("(") + 1, details[j].indexOf(",")).trim();
                            upper_limit = details[j].substring(details[j].indexOf(",") + 1, details[j].indexOf(")")).trim();
                            for (int s = 0; s < spec_fail.length; s++) {
                                if (details[j].contains(spec_fail[s])) {
                                    Status[a] = false;
                                    bool = false;
                                    return false;
                                }
                            }
                        }

                    }


                }
                addLog("get value=" + value, id);
                addLog("lower_limit=" + lower_limit, id);
                addLog("upper_limit=" + upper_limit, id);
                if ("".equals(si.ii.limitDown[i])) {
                    si.ii.limitDown[i] = lower_limit;
                }
                if ("".equals(si.ii.limitUp[i])) {
                    si.ii.limitUp[i] = upper_limit;
                }
                if (!lower_limit.equals(si.ii.limitDown[i])) {
                    addLog("json lower_limit=" + si.ii.limitDown[i], id);

                    addLog(JsonName + " json lower_limit:" + si.ii.limitDown[i] + " != IQ lower_limit:" + lower_limit);
                    Status[a] = false;
                    bool = false;
//                    return false;
                } else if (!upper_limit.equals(si.ii.limitUp[i])) {

                    addLog(JsonName + " json upper_limit:" + si.ii.limitUp[i] + " != IQ upper_limit:" + upper_limit);
                    Status[a] = false;
                    bool = false;
//                    return false;
                }


//                Status[a] = itemStatus.get(a);
                Items += "," + ApiName[a];
                log += "," + Value[a];

            }
            if (bool) {
                resultLog = "PASS";
                return true;
            }




        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            apv.addApiJson(ApiName, Value, Status, i, id);

        }
        return false;
    }

    public boolean RadioValidationEvm(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String ApiName[] = null;
        String Value[] = null;
        boolean Status[] = null;
        String log = "";
        String Items = "";
        String spec_fail[] = si.ii.spec[i].split(",");
//        boolean status = true;
        boolean bool = true;
        try {

            File IQLogFile = new File(apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut0[i]);
            ParseIQLog(IQLogFile);
            ArrayList<String> IQ_key = new ArrayList<String>();
//            ArrayList<Boolean> itemStatus = new ArrayList<Boolean>();

            if (apv.IQlog.containsKey("RESERT")) {    //寻找测试项目
                String[] details = (String[]) apv.IQlog.get("RESERT");

                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains("TEST_VERIFY EVM POWER") && !details[j].contains("[Skipped]")) {

                        int index = details[j].indexOf(":");
                        String key = details[j].substring(0, index).trim();
                        addLog(key, id);
                        IQ_key.add(key);
//                        if (details[i].contains("[Failed]")) {
//                            itemStatus.add(false);
//                        } else {
//                            itemStatus.add(true);
//                        }
                    }
                }
            } else {
                return false;
            }
            ApiName = new String[IQ_key.size()];
            Value = new String[IQ_key.size()];
            Status = new boolean[IQ_key.size()];
            for (int a = 0; a < IQ_key.size(); a++) {

                String key = IQ_key.get(a);
                if (!apv.IQlog.containsKey(key)) {    //寻找测试项目
                    addLog("FAIL! " + key, id);

                    return false;
                }

                String frequency = PatternStarts(key, "\\b\\d{4}\\b").trim();
                String str = key.substring(key.indexOf("MCS"));
                String mcs = str.substring(0, str.indexOf(" ")).trim();
                str = key.substring(key.indexOf("BW-") + 3);
                String bw = str.substring(0, str.indexOf(" ")).trim();
                str = key.substring(key.indexOf("ANT"));
                String ANT = str.substring(str.indexOf("ANT") + 3).trim();
                String JsonName = "WIFI_TX_EVM_F" + frequency + "_BW" + bw + "_" + mcs + "_A" + ANT;
                JsonName = JsonName.toLowerCase();
//                System.out.println(JsonName);
                addLog("JsonName= " + JsonName, id);
                addLog("IQName= " + key, id);
                if (!apv.getAPIJsonConfig(JsonName, si, i)) {    //通过apiName获取规格信息
                    addLog("JsonName  fail ", id);
                    continue;
//                    return false;
                }
                ApiName[a] = JsonName;
                Value[a] = "";
                Status[a] = true;

                String[] details = (String[]) apv.IQlog.get(key);   //获取内容
                String spec[] = si.ii.cmd[i].split(",");
//                String value = "";
                String lower_limit = "";
                String upper_limit = "";
                for (int j = 0; j < details.length; j++) {


                    for (int k = 0; k < spec.length; k++) {
                        if (details[j].startsWith(spec[k])) {

                            addLog(details[j], id);
                            Value[a] = details[j].substring(details[j].indexOf(":") + 1, details[j].indexOf(si.ii.units[i])).trim();
//                        resultLog = value;
//                            Value[a] = value;
                            lower_limit = details[j].substring(details[j].indexOf("(") + 1, details[j].indexOf(",")).trim();
                            upper_limit = details[j].substring(details[j].indexOf(",") + 1, details[j].indexOf(")")).trim();
                            for (int s = 0; s < spec_fail.length; s++) {
                                if (details[j].contains(spec_fail[s])) {
                                    Status[a] = false;
                                    bool = false;

                                    return false;
                                }
                            }
                        }

                    }


                }
//                if ( Value[a] .equals("")) {
//                    addLog(" Value eero not find  "+si.ii.cmd[i], id);  
//                    Status[a] = false;
//                    bool = false; 
//                }
                addLog("get value=" + Value[a], id);
                addLog("lower_limit=" + lower_limit, id);
                addLog("upper_limit=" + upper_limit, id);
                if ("".equals(si.ii.limitDown[i])) {
                    si.ii.limitDown[i] = lower_limit;
                }
                if ("".equals(si.ii.limitUp[i])) {
                    si.ii.limitUp[i] = upper_limit;
                }
                if (!lower_limit.equals(si.ii.limitDown[i])) {
                    addLog("json lower_limit=" + si.ii.limitDown[i], id);

//                    apv.showMessage(null, JsonName + " json lower_limit:" + si.ii.limitDown[i] + " != IQ lower_limit:" + lower_limit);
                    Status[a] = false;
                    bool = false;
//                    return false;
                } else if (!upper_limit.equals(si.ii.limitUp[i])) {
                    addLog("json upper_limit=" + si.ii.limitUp[i], id);
//                    apv.showMessage(null, JsonName + " json upper_limit:" + si.ii.limitUp[i] + " != IQ upper_limit:" + upper_limit);
                    Status[a] = false;
                    bool = false;
//                    return false;
                }
//                Status[a] = itemStatus.get(a);
                Items += "," + ApiName[a];
                log += "," + Value[a];

            }
            if (bool) {
                resultLog = "PASS";
                return true;
            }




        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            apv.addApiJson(ApiName, Value, Status, i, id);

        }
        return false;
    }

    public boolean OfdmaPower(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        ArrayList<String> ApiName = new ArrayList<String>();
        ArrayList<String> Value = new ArrayList<String>();
        ArrayList<Boolean> Status = new ArrayList<Boolean>();

        String log = "";
        String Items = "";
        String spec_fail[] = si.ii.spec[i].split(",");
//        boolean status = true;
        boolean bool = true;
        try {

            File IQLogFile = new File(apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut0[i]);
            ParseIQLog(IQLogFile);
            ArrayList<String> IQ_key = new ArrayList<String>();
            ArrayList<String> ofdma_name = new ArrayList<String>();
//            ArrayList<Boolean> itemStatus = new ArrayList<Boolean>();

            if (apv.IQlog.containsKey("RESERT")) {    //寻找测试项目
                String[] details = (String[]) apv.IQlog.get("RESERT");

                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains("TEST_BUILD ")) {
                        int index = details[j].indexOf(":");
                        String key = details[j].substring(0, index).trim();
                        addLog(key, id);
                        ofdma_name.add(key);
                    } else if (details[j].contains("TEST_RUN ")) {
                        int index = details[j].indexOf(":");
                        String key = details[j].substring(0, index).trim();
                        addLog(key, id);
                        IQ_key.add(key);
                    }
                }
            } else {
                return false;
            }

            for (int a = 0; a < IQ_key.size(); a++) {

                String name = ofdma_name.get(a);
                String key = IQ_key.get(a);
                if (!apv.IQlog.containsKey(name)) {    //寻找测试项目
                    addLog("FAIL! " + name, id);

                    return false;
                }



                ArrayList<String> IQ_power = new ArrayList<String>();


                String[] details = (String[]) apv.IQlog.get(key);   //获取内容

//                String value = "";

                for (int j = 0; j < details.length; j++) {

                    if (details[j].contains(".EVM.") && details[j].contains(si.ii.cmd[i])) {
                        IQ_power.add(details[j]);
                    }
                }

                addLog("IQName= " + name, id);
                String frequency = PatternStarts(name, "\\b\\d{4}\\b").trim();
                String ant = name.substring(name.indexOf("ANT") + 3).trim();

                for (int j = 0; j < IQ_power.size(); j++) {
                    String apiName = "";
                    String value = "";
                    boolean status = true;
                    String lower_limit = "";
                    String upper_limit = "";
                    String valueDetails = IQ_power.get(j);
                    addLog(valueDetails, id);
                    String string[] = IQ_power.get(j).split("\\.");
                    String user = string[0];
                    String mcs = string[3];
                    String JsonName = "wifi_ofdma_tx_power_f" + frequency + "_" + user + "_" + mcs + "_a" + ant;
                    JsonName = JsonName.toLowerCase();
                    addLog("JsonName= " + JsonName, id);
                    if (!apv.getAPIJsonConfig(JsonName, si, i)) {    //通过apiName获取规格信息
                        addLog("JsonName  fail ", id);
                        continue;
//                    return false;
                    }
                    apiName = JsonName;

                    value = valueDetails.substring(valueDetails.indexOf(":") + 1, valueDetails.indexOf(si.ii.units[i])).trim();
//                        resultLog = value;
//                            Value[a] = value;
                    lower_limit = valueDetails.substring(valueDetails.indexOf("(") + 1, valueDetails.indexOf(",")).trim();
                    upper_limit = valueDetails.substring(valueDetails.indexOf(",") + 1, valueDetails.indexOf(")")).trim();
                    addLog("get value=" + value, id);
                    addLog("lower_limit=" + lower_limit, id);
                    addLog("upper_limit=" + upper_limit, id);

                    for (int k = 0; k < spec_fail.length; k++) {
                        if (valueDetails.contains(spec_fail[k])) {
                            status = false;
                            bool = false;
                            return false;
                        }
                    }
                    if ("".equals(si.ii.limitDown[i])) {
                        si.ii.limitDown[i] = lower_limit;
                    }
                    if ("".equals(si.ii.limitUp[i])) {
                        si.ii.limitUp[i] = upper_limit;
                    }
                    if (!lower_limit.equals(si.ii.limitDown[i])) {
                        addLog("json lower_limit=" + si.ii.limitDown[i], id);

//                        apv.showMessage(null, JsonName + " json lower_limit:" + si.ii.limitDown[i] + " != IQ lower_limit:" + lower_limit);
                        status = false;
                        bool = false;
//                    return false;
                    } else if (!upper_limit.equals(si.ii.limitUp[i])) {
                        addLog("json upper_limit=" + si.ii.limitUp[i], id);
//                        apv.showMessage(null, JsonName + " json upper_limit:" + si.ii.limitUp[i] + " != IQ upper_limit:" + upper_limit);
                        status = false;
                        bool = false;
//                    return false;
                    }
                    Items += "," + apiName;
                    log += "," + value;
                    ApiName.add(apiName);
                    Value.add(value);
                    Status.add(status);
                }





//                Status[a] = itemStatus.get(a);


            }
            if (bool) {
                resultLog = "PASS";
                return true;
            }




        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            String apiName[] = new String[ApiName.size()];
            ApiName.toArray(apiName);
            String value[] = new String[Value.size()];
            Value.toArray(value);
            boolean status[] = new boolean[Status.size()];
            for (int j = 0; j < Status.size(); j++) {
                status[j] = Status.get(j);

            }
            apv.addApiJson(apiName, value, status, i, id);

        }
        return false;
    }

    public boolean OfdmaEvm(StationInfo si, int i, int id) {
        resultLog = "FAIL";
//        String ApiName[] =new String[99];
//        String Value[] = new String[99];
//        boolean Status[] =new boolean[99];
        ArrayList<String> ApiName = new ArrayList<String>();
        ArrayList<String> Value = new ArrayList<String>();
        ArrayList<Boolean> Status = new ArrayList<Boolean>();

        String log = "";
        String Items = "";
        String[] spec_fail = si.ii.spec[i].split(",");
//        boolean status = true;
        boolean bool = true;
        try {

            File IQLogFile = new File(apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut0[i]);
            ParseIQLog(IQLogFile);
            ArrayList<String> IQ_key = new ArrayList<String>();
            ArrayList<String> ofdma_name = new ArrayList<String>();
//            ArrayList<Boolean> itemStatus = new ArrayList<Boolean>();

            if (apv.IQlog.containsKey("RESERT")) {    //寻找测试项目
                String[] details = (String[]) apv.IQlog.get("RESERT");

                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains("TEST_BUILD ")) {
                        int index = details[j].indexOf(":");
                        String key = details[j].substring(0, index).trim();
                        addLog(key, id);
                        ofdma_name.add(key);
                    } else if (details[j].contains("TEST_RUN ")) {
                        int index = details[j].indexOf(":");
                        String key = details[j].substring(0, index).trim();
                        addLog(key, id);
                        IQ_key.add(key);
                    }
                }
            } else {
                return false;
            }

            for (int a = 0; a < IQ_key.size(); a++) {

                String name = ofdma_name.get(a);
                String key = IQ_key.get(a);
                if (!apv.IQlog.containsKey(name)) {    //寻找测试项目
                    addLog("FAIL! " + name, id);

                    return false;
                }



                ArrayList<String> IQ_evm = new ArrayList<String>();


                String[] details = (String[]) apv.IQlog.get(key);   //获取内容

//                String value = "";

                for (int j = 0; j < details.length; j++) {

                    if (details[j].contains(".EVM.") && details[j].contains(si.ii.cmd[i])) {
                        IQ_evm.add(details[j]);
                    }
                }

//                ApiName = new String[IQ_key.size() * IQ_evm.size()];
//                Value = new String[IQ_key.size() * IQ_evm.size()];
//                Status = new boolean[IQ_key.size() * IQ_evm.size()];

                addLog("IQName= " + name, id);
                String frequency = PatternStarts(name, "\\b\\d{4}\\b").trim();
                String ant = name.substring(name.indexOf("ANT") + 3).trim();

                for (int j = 0; j < IQ_evm.size(); j++) {
                    String apiName = "";
                    String value = "";
                    boolean status = true;
                    String lower_limit = "";
                    String upper_limit = "";
                    String valueDetails = IQ_evm.get(j);
                    addLog(valueDetails, id);
                    String string[] = IQ_evm.get(j).split("\\.");
                    String user = string[0];
                    String mcs = string[3];
                    String JsonName = "wifi_ofdma_tx_evm_f" + frequency + "_" + user + "_" + mcs + "_a" + ant;
                    JsonName = JsonName.toLowerCase();
                    addLog("JsonName= " + JsonName, id);
                    if (!apv.getAPIJsonConfig(JsonName, si, i)) {    //通过apiName获取规格信息
                        addLog("JsonName  fail ", id);
                        continue;
//                    return false;
                    }
                    apiName = JsonName;

                    value = valueDetails.substring(valueDetails.indexOf(":") + 1, valueDetails.indexOf(si.ii.units[i])).trim();
//                        resultLog = value;
//                            Value[a] = value;
                    lower_limit = valueDetails.substring(valueDetails.indexOf("(") + 1, valueDetails.indexOf(",")).trim();
                    upper_limit = valueDetails.substring(valueDetails.indexOf(",") + 1, valueDetails.indexOf(")")).trim();
                    addLog("get value=" + value, id);
                    addLog("lower_limit=" + lower_limit, id);
                    addLog("upper_limit=" + upper_limit, id);

                    for (int k = 0; k < spec_fail.length; k++) {
                        if (valueDetails.contains(spec_fail[k])) {
                            status = false;
                            bool = false;
                            return false;
                        }
                    }

                    if ("".equals(si.ii.limitDown[i])) {
                        si.ii.limitDown[i] = lower_limit;
                    }
                    if ("".equals(si.ii.limitUp[i])) {
                        si.ii.limitUp[i] = upper_limit;
                    }
                    if (!lower_limit.equals(si.ii.limitDown[i])) {
                        addLog("json lower_limit=" + si.ii.limitDown[i], id);

//                        apv.showMessage(null, JsonName + " json lower_limit:" + si.ii.limitDown[i] + " != IQ lower_limit:" + lower_limit);
                        status = false;
                        bool = false;
//                    return false;
                    } else if (!upper_limit.equals(si.ii.limitUp[i])) {
                        addLog("json upper_limit=" + si.ii.limitUp[i], id);
//                        apv.showMessage(null, JsonName + " json upper_limit:" + si.ii.limitUp[i] + " != IQ upper_limit:" + upper_limit);
                        status = false;
                        bool = false;
//                    return false;
                    }
                    Items += "," + apiName;
                    log += "," + value;
                    ApiName.add(apiName);
                    Value.add(value);
                    Status.add(status);
                }





//                Status[a] = itemStatus.get(a);


            }

            if (bool) {
                resultLog = "PASS";
                return true;
            }




        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            String apiName[] = new String[ApiName.size()];
            ApiName.toArray(apiName);
            String value[] = new String[Value.size()];
            Value.toArray(value);
            boolean status[] = new boolean[Status.size()];
            for (int j = 0; j < Status.size(); j++) {
                status[j] = Status.get(j);

            }
//            Status.toArray(status);
            apv.addApiJson(apiName, value, status, i, id);

        }
        return false;
    }

    public boolean RadioValidationPer(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String ApiName[] = null;
        String Value[] = null;
        boolean Status[] = null;
        String log = "";
        String Items = "";
        String spec_fail[] = si.ii.spec[i].split(",");
        boolean bool = true;
        try {
            File IQLogFile = new File(apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut0[i]);
            ParseIQLog(IQLogFile);
            ArrayList<String> IQ_key = new ArrayList<String>();

            if (apv.IQlog.containsKey("RESERT")) {    //寻找测试项目
                String[] details = (String[]) apv.IQlog.get("RESERT");

                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains("TEST_VERIFY PER") && !details[j].contains("[Skipped]")) {
                        int index = details[j].indexOf(":");
                        String key = details[j].substring(0, index).trim();
                        addLog(key, id);
                        IQ_key.add(key);

                    }
                }
            } else {
                return false;
            }
            ApiName = new String[IQ_key.size()];
            Value = new String[IQ_key.size()];
            Status = new boolean[IQ_key.size()];
            for (int a = 0; a < IQ_key.size(); a++) {

                String key = IQ_key.get(a);
                if (!apv.IQlog.containsKey(key)) {    //寻找测试项目
                    addLog("FAIL! " + key, id);
                    return false;
                }

                String frequency = PatternStarts(key, "\\b\\d{4}\\b").trim();
//                String str = key.substring(key.indexOf("ANT"));
                String ANT = key.substring(key.indexOf("ANT") + 3).trim();
                String BW = "BW" + key.substring(key.indexOf("BW-") + 3, key.indexOf("ANT")).trim();
                String rxPer = "";


                Value[a] = "";
                Status[a] = true;

                String[] details = (String[]) apv.IQlog.get(key);   //获取内容
                String lower_limit = "";
                String upper_limit = "";
                String value = "";
                for (int j = 0; j < details.length; j++) {

                    if (details[j].startsWith("RX_POWER_DBM    ")) {
                        rxPer = details[j].substring(details[j].indexOf(":") + 1, details[j].indexOf("dBm")).trim();
                        String JsonName = "WIFI_RX_PER_F" + frequency + "_" + BW + "_P" + rxPer + "_A" + ANT;
                        JsonName = JsonName.toLowerCase();
                        addLog("JsonName= " + JsonName, id);
                        ApiName[a] = JsonName;
                        if (!apv.getAPIJsonConfig(JsonName, si, i)) {    //通过apiName获取规格信息
                            addLog("JsonName  fail ", id);
                            break;
//                            return false;
                        }
                    }
                    if (details[j].startsWith(si.ii.cmd[i])) {
                        //value = details[j].substring(details[j].indexOf(":") + 1, details[j].indexOf(si.ii.units[i])).trim();
                        value = details[j].substring(details[j].indexOf(":") + 1, details[j].indexOf("%")).trim();
//                        resultLog = value;
                        Value[a] = value;
                        lower_limit = details[j].substring(details[j].indexOf("(") + 1, details[j].indexOf(",")).trim();
                        upper_limit = details[j].substring(details[j].indexOf(",") + 1, details[j].indexOf(")")).trim();
                        for (int k = 0; k < spec_fail.length; k++) {
                            if (details[j].contains(spec_fail[k])) {
                                Status[a] = false;
                                bool = false;
                                return false;
                            }
                        }
//                        return true;
                    }

                }
                addLog("get value=" + value, id);
//                if (lower_limit.equals("")) {
//                    lower_limit = "0";
//                }
                addLog("lower_limit=" + lower_limit, id);
                addLog("upper_limit=" + upper_limit, id);
                if ("".equals(si.ii.limitDown[i])) {
                    si.ii.limitDown[i] = lower_limit;
                }
                if ("".equals(si.ii.limitUp[i])) {
                    si.ii.limitUp[i] = upper_limit;
                }
                if (!lower_limit.equals(si.ii.limitDown[i])) {
                    addLog("json lower_limit=" + si.ii.limitDown[i], id);
//                    apv.showMessage(null, "json lower_limit != IQ lower_limit");
                    Status[a] = false;
                    bool = false;
                    return false;
                } else if (!upper_limit.equals(si.ii.limitUp[i])) {
                    addLog("json upper_limit=" + si.ii.limitUp[i], id);
//                    apv.showMessage(null, "json upper_limit != IQ upper_limit");
                    Status[a] = false;
                    bool = false;
                    return false;
                }


                Items += "," + ApiName[a];
                log += "," + Value[a];
            }

            if (bool) {
                resultLog = "PASS";
                return true;

            }


        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            apv.addApiJson(ApiName, Value, Status, i, id);

        }
        return false;
    }

    public boolean testIqItemTx(StationInfo si, int i, int id) {
        resultLog = "";
        try {
            String litepoint = apv.mbftBLELitePointPath + File.separator + si.ii.Cut0[i];
            File IQLogFile = new File(litepoint);
//            System.out.println(IQLogFile.getPath());
            ParseIQLog(IQLogFile);
            String spec_fail[] = si.ii.spec[i].split(",");
            if (apv.IQlog.containsKey("RESERT")) {

                String[] details = (String[]) apv.IQlog.get("RESERT");
//                addLog("get test item: ", id);
                String key = "";
                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains(si.ii.name[i])) {
                        key = details[j].substring(0, details[j].indexOf(si.ii.name[i]) + si.ii.name[i].length());
                        break;
                    }
                }
                addLog("get test item: " + key, id);
                if (!apv.IQlog.containsKey(key) || key.equals("")) {    //寻找测试项目
                    addLog("Item fail! " + key, id);
                    return false;
                }
                String[] details1 = (String[]) apv.IQlog.get(key);   //获取内容
                for (int k = 0; k < details1.length; k++) {
                    if (details1[k].contains(si.ii.cmd[i])) {
                        //addLog("Unit: " + si.ii.units[i],id);
                        String value = details1[k].substring(details1[k].indexOf(":") + 1, details1[k].indexOf(si.ii.units[i])).trim();
                        resultLog = value;

//                        String lower_limit = details1[k].substring(details1[k].indexOf("(") + 1, details1[k].indexOf(",")).trim();
//                        String upper_limit = details1[k].substring(details1[k].indexOf(",") + 1, details1[k].indexOf(")")).trim();
                        String lower_limit = si.ii.limitDown[i];
                        String upper_limit = si.ii.limitUp[i];
                        addLog("get value=" + value, id);
                        addLog("lower_limit=" + lower_limit, id);
                        addLog("upper_limit=" + upper_limit, id);
                        if (value.equals("")) {
                            return false;
                        }
                        if ("".equals(si.ii.limitDown[i])) {
                            si.ii.limitDown[i] = lower_limit;
                        }
                        if ("".equals(si.ii.limitUp[i])) {
                            si.ii.limitUp[i] = upper_limit;
                        }

                        if (!lower_limit.equals(si.ii.limitDown[i])) {

                            addLog(" json upper_limit:" + si.ii.limitDown[i] + " != IQ upper_limit:" + upper_limit);
//                            apv.showMessage(null, "json lower_limit != IQ lower_limit");
                            return false;
                        }
                        if (!upper_limit.equals(si.ii.limitUp[i])) {
                            addLog(" json upper_limit:" + si.ii.limitUp[i] + " != IQ upper_limit:" + upper_limit);
//                         
//                            apv.showMessage(null, "json upper_limit != IQ upper_limit");
                            return false;
                        }


                    }
                    for (int j = 0; j < spec_fail.length; j++) {
                        if (details1[k].contains(spec_fail[j])) {
//                                apv.showMessage(null, "json upper_limit != IQ upper_limit");
                            return false;
                        }
                    }
                }
                return true;



            } else {
                this.addLog(" read wifi IQ log.txt erro", id);

            }
        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        }
        return false;
    }

    public boolean IQXEL_SN(StationInfo si, int i, int id) {
        resultLog = "";
        try {
            String litepoint = apv.mbftBLELitePointPath + File.separator + si.ii.Cut0[i];
            File IQLogFile = new File(litepoint);
            ParseIQLog(IQLogFile);
            if (apv.IQlog.containsKey(si.ii.diagCmd[i])) {    //寻找测试项目
                String[] details = (String[]) apv.IQlog.get(si.ii.diagCmd[i]);
                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains(si.ii.name[i])) {
                        addLog(details[j], id);
                        String sn = details[j].substring(si.ii.name[i].length()).trim();
                        addLog(si.ii.name[i] + " " + sn, id);
                        if (sn.equals(apv.IQconfig.getIQsn())) {
                            resultLog = sn;
                            return true;
                        } else {
                            addLog("SPEC=" + apv.IQconfig.getIQsn(), id);
                        }
                    }
                }

            } else {
                addLog("not fond item " + si.ii.diagCmd[i], id);
            }


        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        }
        return false;
    }

    public boolean IQXEL_MODEL(StationInfo si, int i, int id) {
        resultLog = "";
        try {
            String litepoint = apv.mbftBLELitePointPath + File.separator + si.ii.Cut0[i];
            File IQLogFile = new File(litepoint);
            ParseIQLog(IQLogFile);
            if (apv.IQlog.containsKey(si.ii.diagCmd[i])) {    //寻找测试项目
                String[] details = (String[]) apv.IQlog.get(si.ii.diagCmd[i]);
                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains(si.ii.name[i])) {
                        addLog(details[j], id);
                        String model = details[j].substring(si.ii.name[i].length()).trim();
                        addLog(si.ii.name[i] + " " + model, id);
                        if (model.equals(apv.IQconfig.getIQmodel())) {
                            resultLog = model;
                            return true;
                        } else {
                            addLog("SPEC=" + apv.IQconfig.getIQmodel(), id);
                        }
                    }
                }

            } else {
                addLog("not fond item " + si.ii.diagCmd[i], id);
            }


        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        }
        return false;
    }

    public boolean CheckIQlog(StationInfo si, int i, int id) {
        resultLog = "";
        String fileDetails = "";
        try {
            String iqPath = "";
            String title = "wifi";
            if (si.ii.Cut1[i].equals("SRF_WIFI")) {
                iqPath = apv.srfWiFiLitePointPath;
                title = "wifi";
            } else if (si.ii.Cut1[i].equals("SRF_BLE")) {
                iqPath = apv.srfBLELitePointPath;
                title = "ble";
            } else if (si.ii.Cut1[i].equals("MBFT_WIFI")) {
                title = "wifi";
                iqPath = apv.mbftWiFiLitePointPath;
            } else if (si.ii.Cut1[i].equals("MBFT_BLE")) {
                title = "ble";
                iqPath = apv.mbftBLELitePointPath;
            } else {
                addLog("I dont know IQ path", id);
                return false;
            }
            String litepoint = iqPath + File.separator + si.ii.Cut0[i];
            File IQLogFile = new File(litepoint);
//            readIQlog(IQLogFile, si.ii.diagCmdTime[i]);
            ParseIQLog(IQLogFile);
//            File IQLogFile = new File(si.ii.cmd[i]);
//            readIQlog(IQLogFile, si.ii.diagCmdTime[i]);
//            ParseIQLog(IQLogFile);
            fileDetails = ParseIQLog(IQLogFile);
            if (apv.IQlog.containsKey("RESERT")) {    //寻找测试项目

                String[] details = (String[]) apv.IQlog.get("RESERT");
//                addLog("get test item: ", id);

                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains(si.ii.spec[i])) {
                        addLog(details[j], id);
                        if (details[j].contains("TEST_RUN") && title.equals("wifi")) {
                            String errorDes = "wifi_ofdma";
                            if (apv.allErrorCode.containsKey(errorDes)) {
                                si.ii.errorCode[i] = apv.allErrorCode.get(errorDes);
                                si.ii.errorDes[i] = errorDes;
                            } else {
                                addLog(" not have this errorCode\t" + errorDes);

                            }
                        }
//                        String errorDes = title + details[j].toLowerCase();
//                        if (apv.allErrorCode.containsKey(errorDes)) {
//                            si.ii.errorCode[i] = apv.allErrorCode.get(errorDes);
//                            si.ii.errorDes[i] = errorDes;
//                        } else {
//                            addLog(" not have this errorCode\t" + errorDes);
//                            apv.showConfirmDialog(" not have this errorCode\t" +errorDes);
//                        }
//                        si.ii.errorDes[i]="";
                        return false;
                    }
                }

            } else {
                this.addLog(" read wifi IQ log.txt erro", id);
                return false;
            }
            resultLog = "PASS";
            return true;
        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            if (si.ii.cmd1[i].equals("1")) {
                String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
                String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  1
                String IqNewPath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + File.separator + date + File.separator + apv.hostName + File.separator;
                String fileName = apv.mlbSn[id - 1] + "_" + apv.sn[id - 1] + "_" + si.ii.itemDes[i] + "_" + Time + "_" + resultLog + ".txt";
                if (saveIQlog(IqNewPath, fileName, fileDetails)) {
                    addLog("save " + IqNewPath + " PASS", id);
                } else {
                    addLog("save " + IqNewPath + " FAIL", id);
                }
            }


        }
        return false;
    }

    public boolean CheckWifi(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        try {
            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);
            if (CmdThreadLog.trim().endsWith(si.ii.diagCmd[i])) {
                addLog(CmdThreadLog, id);
            }

            if (!to.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                //   this.addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                return false;
            }
            String details = substring(to.getString, si.ii.cmd1[i], si.ii.diagCmd[i]);
            resultLog = details;
            if (details.contains(si.ii.spec[i]) && !details.contains(si.ii.diagCmd1[i])) {
                resultLog = si.ii.spec[i];
                return true;
            } else {
                if (!to.sendCommandAndRead(si.ii.cmd2[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    //   this.addLog(to.getString, 1, id);
                    addLog("CMD " + si.ii.cmd2[i] + " Fail!", id);
                    return false;
                }
                if (!to.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    //   this.addLog(to.getString, 1, id);
                    addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                    return false;
                }
                details = substring(to.getString, si.ii.cmd1[i], si.ii.diagCmd[i]);
                resultLog = details;
                if (details.contains(si.ii.spec[i]) && !details.contains(si.ii.diagCmd1[i])) {
                    resultLog = si.ii.spec[i];
                    return true;
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

        return false;
        //------------------------run  iQ----------------------------------

    }

    public boolean testIqItemRx(StationInfo si, int i, int id) {
        resultLog = "";
        try {
            String litepoint = apv.mbftBLELitePointPath + File.separator + si.ii.Cut0[i];
            File IQLogFile = new File(litepoint);
            ParseIQLog(IQLogFile);
            String spec_fail[] = si.ii.spec[i].split(",");
            if (apv.IQlog.containsKey("RESERT")) {    //寻找测试项目

                String[] details = (String[]) apv.IQlog.get("RESERT");
//                addLog("get test item: ", id);
                String key = "";
                for (int j = 0; j < details.length; j++) {
                    if (details[j].contains(si.ii.name[i])) {
                        key = details[j].substring(0, details[j].indexOf(si.ii.name[i]) + si.ii.name[i].length());
                        break;
                    }
                }
                addLog("get test item: " + key, id);
                if (!apv.IQlog.containsKey(key) || key.equals("")) {    //寻找测试项目
                    addLog("Item fail! " + key, id);
                    return false;
                }
                String[] details1 = (String[]) apv.IQlog.get(key);   //获取内容
                String lower_limit = "";
                String upper_limit = "0";
                for (int k = 0; k < details1.length; k++) {
                    if (details1[k].contains(si.ii.diagCmd[i])) {
                        String porwer = details1[k].substring(details1[k].indexOf(":") + 1, details1[k].indexOf("dBm")).trim();
                        String apiName = si.ii.itemDes[i].toLowerCase();
                        String apiPorwer = apiName.substring(apiName.indexOf("p-") + 1);
                        double power = Double.parseDouble(porwer);
                        double apiPower = Double.parseDouble(apiPorwer);
                        if (power != apiPower) {
                            addLog("IQ  porwer=" + porwer, id);
                            addLog("JSON  porwer=" + apiPorwer, id);
//                              return false;
                        }
                    }

                    if (details1[k].contains(si.ii.cmd[i])) {
                        String value = details1[k].substring(details1[k].indexOf(":") + 1, details1[k].indexOf(si.ii.units[i])).trim();
                        resultLog = value;
                        lower_limit = details1[k].substring(details1[k].indexOf("(") + 1, details1[k].indexOf(",")).trim();
                        upper_limit = details1[k].substring(details1[k].indexOf(",") + 1, details1[k].indexOf(")")).trim();
                        if (value.equals("")) {
                            return false;
                        }
                        if ("".equals(si.ii.limitDown[i])) {
                            si.ii.limitDown[i] = lower_limit;
                        }
                        if ("".equals(si.ii.limitUp[i])) {
                            si.ii.limitUp[i] = upper_limit;
                        }
//                        if (!lower_limit.equals(si.ii.limitDown[i])) {
//                            addLog(" json upper_limit:" + si.ii.limitDown[i] + " != IQ upper_limit:" + upper_limit);
////                         
////                            apv.showMessage(null, "json lower_limit != IQ lower_limit");
//                            return false;
//                        }
//                        if (!upper_limit.equals(si.ii.limitUp[i])) {
//                            addLog(" json upper_limit:" + si.ii.limitUp[i] + " != IQ upper_limit:" + upper_limit);
////                         
////                            apv.showMessage(null, "json upper_limit != IQ upper_limit");
//                            return false;
//                        }
                        if (!lower_limit.equals(si.ii.limitDown[i])) {
                            addLog(" json lower limit:" + si.ii.limitDown[i] + " != IQ lower_limit:" + lower_limit);
//                         
//                            apv.showMessage(null, "json lower_limit != IQ lower_limit");
                            return false;
                        }
                        if (!upper_limit.equals(si.ii.limitUp[i])) {
                            addLog(" json upper_limit:" + si.ii.limitUp[i] + " != IQ upper_limit:" + upper_limit);
//                         
//                            apv.showMessage(null, "json upper_limit != IQ upper_limit");
                            return false;
                        }

                        for (int j = 0; j < spec_fail.length; j++) {
                            if (details1[k].contains(spec_fail[j])) {
//                                apv.showMessage(null, "json upper_limit != IQ upper_limit");
                                return false;
                            }
                        }

                    }


                }
                addLog("get value=" + resultLog, id);

                addLog("lower_limit=" + lower_limit, id);
                addLog("upper_limit=" + upper_limit, id);

                if ("".equals(si.ii.limitDown[i])) {
                    si.ii.limitDown[i] = lower_limit;
                }
                if ("".equals(si.ii.limitUp[i])) {
                    si.ii.limitUp[i] = upper_limit;
                }
                if (!lower_limit.equals(si.ii.limitDown[i])) {
                    addLog("json lower_limit=" + si.ii.limitDown[i], id);
                    addLog("  IQ lower_limit=" + lower_limit, id);
                    apv.showMessage(null, "json lower_limit != IQ lower_limit");
//                            return false;
                }
                if (!upper_limit.equals(si.ii.limitUp[i])) {

                    addLog("json upper_limit=" + si.ii.limitUp[i], id);
                    addLog("  IQ upper_limit=" + upper_limit, id);
                    apv.showMessage(null, "json upper_limit != IQ upper_limit");
//                            return false;
                }
                return true;



            } else {
                this.addLog(" read wifi IQ log.txt erro", id);

            }
        } catch (Exception e) {

            e.printStackTrace();
            addLog(e.toString(), id);
        }
        return false;
    }

    public boolean BLERadioValidation(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        Map txRxPower = new TreeMap();
        StringBuilder grrValue = new StringBuilder();
        StringBuilder grrItem = new StringBuilder();
        ArrayList<String> powerName = new ArrayList<String>();
        boolean bool = true;
        String log = "";
        String Items = "";
        String error = "";
        String apiName[] = si.ii.apiName[i].split(",");
        String[] value_spec = si.ii.cmd[i].split(",");
        String[] value_unit = si.ii.units[i].split(",");
        String[] value = new String[value_spec.length];
        String[] upper_limit = si.ii.limitUp[i].split(",");
        String[] lower_limit = si.ii.limitDown[i].split(",");
        if (upper_limit.length == 0) {
            upper_limit = new String[apiName.length];
        }
        if (lower_limit.length == 0) {
            lower_limit = new String[apiName.length];
        }
        boolean[] Status = new boolean[apiName.length];
        try {

            if (apv.IQlog.containsKey("RESERT")) {    //寻找测试项目      
                resultLog = "PASS";
                String[] details = (String[]) apv.IQlog.get("RESERT");

                for (int j = 0; j < details.length; j++) {    //吧XT和RX相同的頻道合併
                    error = details[j];
                    if (details[j].contains("TX_LE") || details[j].contains("RX_LE")) {
                        String powerItem = details[j].substring(0, details[j].indexOf("          ")).trim();
                        String name = PatternStarts(powerItem, "\\b\\d{4}\\b").trim();
                        if (!apv.IQlog.containsKey(powerItem.trim())) {    //寻找测试项目
                            addLog("FAIL! " + name, id);
                            return false;
                        }
                        ArrayList<String> detailsAll = new ArrayList<String>();
                        String[] details1 = (String[]) apv.IQlog.get(powerItem);   //获取内容
                        for (int k = 0; k < details1.length; k++) {
                            detailsAll.add(details1[k]);
                            if (details1[k].contains(si.ii.spec[i])) {    //遍历每行判断PASSfail
                                bool = false;
                            }
                        }
                        if (txRxPower.containsKey(name)) {
                            details1 = (String[]) txRxPower.get(name);
                            for (int k = 0; k < details1.length; k++) {
                                detailsAll.add(details1[k]);
                            }
                        } else {
                            powerName.add(name);
                        }
                        txRxPower.put(name, detailsAll.toArray(new String[detailsAll.size()]));
                    }

                }
            } else {
                this.addLog(" read wifi IQ log.txt erro", id);
                bool = false;
            }



            //apv.phase_items = new JSONObject[PowerName.length];
            Iterator iter = txRxPower.entrySet().iterator();
            int num = -1;

            while (iter.hasNext()) {    //獲取每個頻道的值 
                num++;

                Map.Entry entry = (Map.Entry) iter.next();
                String[] details = (String[]) entry.getValue();
                String itemName = (String) entry.getKey();
                String frequency = itemName;
                if (!frequency.equals(si.ii.name[i])) {
                    continue;
                }



                for (int k = 0; k < details.length; k++) {
                    error = details[k];
                    for (int j = 0; j < value.length; j++) {
                        if (details[k].startsWith(value_spec[j])) {
                            value[j] = details[k].substring(details[k].indexOf(":") + 1, details[k].indexOf(value_unit[j])).trim();
                            String limit = details[k].substring(details[k].lastIndexOf("("));

                            String lowerLimit = limit.substring(1, limit.indexOf(",")).trim();
                            String upperLimit = limit.substring(limit.indexOf(",") + 1, limit.length() - 1).trim();
                            if (upper_limit[j] == null) {
                                upper_limit[j] = upperLimit;
                            }
                            if (!upper_limit[j].equals(upperLimit)) {
                                apv.showMessage(null, "IQ " + value_spec + " upper_limit NG");
                                return false;
                            }
                            if (lower_limit[j] == null) {
                                lower_limit[j] = lowerLimit;
                            }
                            if (!lower_limit[j].equals(lowerLimit)) {
                                apv.showMessage(null, "IQ " + value_spec + " lower_limit NG");
                                return false;
                            }
                        }
                        if (details[k].contains(si.ii.spec[i])) {

                            bool = false;
                            Status[j] = bool;
                        } else {
                            Status[j] = true;
                        }
                    }

                }




            }

            for (int j = 0; j < value.length; j++) {


                grrValue.append(si.ii.name[i]).append("_").append(value_spec[j]).append(",");
                grrItem.append(value[j]).append(",");


                Items = "," + si.ii.name[i] + "_" + value_spec[j];
                log = "," + value[j];
            }

            if (bool) {
//                apv.testGrrLog.append(grrValue.toString());
//                apv.testGrrItem.append(grrItem.toString());
                resultLog = "PASS";
                return true;
            }
        } catch (Exception e) {
            System.out.println(error);
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {


            apv.addApiJson(apiName, value, Status, i, id);

        }
        return false;
    }

    public boolean xtal_Calibration(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        Map RadioCalibration[] = null;
        //    Map<String, String> RadioCalibration = new HashMap< String, String>();  //key =error   Name value=error Code

//        addLog(si.ii.diagCmd[i], id);
        boolean bool = true;
        StringBuilder item = new StringBuilder();
        if (apv.IQlog.containsKey("RESERT")) {    //寻找测试项目
            resultLog = "PASS";
            String[] details = (String[]) apv.IQlog.get("RESERT");
            addLog("get test item: ", id);
            for (int j = 0; j < details.length; j++) {
                if (details[j].contains(si.ii.diagCmd[i])) {
//                    addLog(details[j], id);
                    String str = details[j].substring(0, details[j].indexOf(":") - 1).trim();
                    addLog(str, id);
                    item.append(str).append(",");

                }
            }
        } else {
            this.addLog(" read wifi IQ log.txt erro", id);
            bool = false;
        }
        String Item[] = item.toString().split(",");    //切割项目
//        //apv.phase_items = new JSONObject[Item.length];
        RadioCalibration = new TreeMap[Item.length];
        for (int j = 0; j < Item.length; j++) {
            RadioCalibration[j] = new TreeMap< String, String>();
            if (!apv.IQlog.containsKey(Item[j])) {
                addLog("not have items: " + Item[j], id);
                return false;
            }
            String[] details = (String[]) apv.IQlog.get(Item[j]);
            for (int k = 0; k < details.length; k++) {
                if (details[k].contains(si.ii.spec[i])) {
                    addLog("Fail: " + details[j], id);
                    bool = false;
                }
                if (details[k].contains("Trigger level: ")) {
//                    String chain = details[j].substring(details[j].lastIndexOf(":") + 1);
                    int chain = Integer.parseInt(details[k].substring(details[k].lastIndexOf(":") + 1).trim()) - 1;
                    RadioCalibration[j].put(chain, details[k]);

                }
            }
        }
        int leng = 0;
        for (int j = 0; j < RadioCalibration.length; j++) {  //计算 apv.phase_items长度
            leng += RadioCalibration[j].size();
        }
        //apv.phase_items = new JSONObject[leng];
        int num = 0;
        for (int j = 0; j < RadioCalibration.length; j++) {  //存API
            Iterator iter = RadioCalibration[j].entrySet().iterator();

            while (iter.hasNext()) {
                Map.Entry entry = (Map.Entry) iter.next();
                String str = (String) entry.getValue();
                int k = (Integer) entry.getKey();
                addLog(str, id);

                String frequency = "Freq:";
                try {
                    frequency = str.substring(str.indexOf(frequency) + frequency.length(), str.indexOf(",txChainMask")).trim();

                } catch (Exception e) {
                    System.out.println("*********************");
                    System.out.println(str);
                    return false;
                }

                int Freq = Integer.parseInt(frequency);
                String radio = "0";
                if (Freq > 5500) {
                    radio = "2";
                } else if (Freq > 5000) {
                    radio = "1";
                }
                String chain = String.valueOf(k);
                String goal_power = "Tx_Power_Goal:";
                goal_power = str.substring(str.indexOf(goal_power) + goal_power.length(), str.indexOf(", Measured")).trim();
                String measured_power = "Measured_Avg_Power:";
                measured_power = str.substring(str.indexOf(measured_power) + measured_power.length(), str.indexOf(", Gain")).trim();
                String gain = ", Gain:";
                gain = str.substring(str.indexOf(gain) + gain.length(), str.indexOf(", Freq:")).trim();
                //apv.phase_items[num] = new JSONObject();
                //apv.phase_items[num].put("radio", radio);
                //apv.phase_items[num].put("chain", chain);
                //apv.phase_items[num].put("frequency", frequency);
                //apv.phase_items[num].put("goal_power", goal_power);
                //apv.phase_items[num].put("measured_power", measured_power);
                //apv.phase_items[num].put("gain", gain);
                num++;
            }
        }





        if (bool) {
            resultLog = "PASS";
            return true;
        }

        return false;
    }

    public boolean radioCalibration(StationInfo si, int i, int id) {
        resultLog = "overtime";
        String litepoint = apv.mbftWiFiLitePointPath + File.separator + si.ii.Cut0[i];
        String fileDetails = "";
        File IQLogFile = null;
        try {


            IQLogFile = new File(litepoint);             //查看IQ是否跑完
            if (!IQLogFile.exists()) {
                this.addLog("not have " + IQLogFile.getName(), id);
                return false;
            }
            if (readIQResult(IQLogFile, si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {

                resultLog = "PASS";
                return true;
            }
            try {
                Runtime.getRuntime().exec("wmic process where name=\"IQfactRun_Console.exe\" call terminate");
                Thread.sleep(500);
            } catch (IOException ex) {
                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            resultLog = readIQResult(IQLogFile, si.ii.diagCmdTime[i]);
            fileDetails = ParseIQLog(IQLogFile);
            String sn = apv.sn[id - 1];
            if (sn.equals("")) {
                sn = apv.mlbSn[id - 1];
            }
            String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());//设置日期格式
            String Time = new SimpleDateFormat("HHmmss").format(new Date());//设置日期格式  
            String filePath = si.logPath + File.separator + "IQ" + File.separator + apv.getLbBarcode() + File.separator + apv.pc.PnName + File.separator + si.stationName + File.separator + date + File.separator + apv.hostName + File.separator;
            String fileName = apv.mlbSn[id - 1] + "_" + si.ii.name[i] + "_" + si.ii.itemDes[i] + "_" + Time + "_" + resultLog + ".txt";
            String ftpPath = filePath.replaceAll("\\\\", "/");
            try {

                if (fileDetails != null && fileDetails.length() > 1) {
                    apv.setZipFile(fileName, IQLogFile);
//                    if (apv.uc.ftpFlag == 1) {
                    if (apv.ftp.writeftpFile(ftpPath, fileName, fileDetails)) {
                        addLog(ftpPath + fileName + " save OK", id);
                    } else {
                        apv.showConfirmDialog(ftpPath + fileName + "\r\n save fail");
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
                apv.showConfirmDialog(filePath + "\r\n save fail\r\n" + e.getLocalizedMessage());
                return false;
            }



//            return false;
        }
        return false;
    }

    public boolean radioCalibration1(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        if (apv.IQlog.containsKey("RESERT")) {    //寻找测试项目

            String[] details = (String[]) apv.IQlog.get("RESERT");

            for (int j = 0; j < details.length; j++) {
                if (details[j].contains(si.ii.diagCmd[i])) {
                    addLog(details[j], id);
                    if (details[j].contains(si.ii.spec[i])) {
//                        this.addLog(details[j], id);
                        return false;
                    }
                }
            }
        } else {
            this.addLog(" read wifi IQ log.txt erro", id);
            return false;
        }
        resultLog = "PASS";
        return true;
    }

    public boolean ambitWriteEthernetMacs(StationInfo si, int i, int id) {
        resultLog = apv.ethMac[id - 1];
        if (!apv.getSfisStatus()) {
            addLog("cancelled  tiem", id);
//            resultLog = apv.ethMac[id - 1];
            return true;


        }
        String eth0 = macTranslate(apv.ethMac[id - 1]).toLowerCase();
        long num = Long.parseLong(apv.ethMac[id - 1], 16);
        String eth1 = Long.toHexString(num + 1);
        eth1 = macTranslate(eth1).toLowerCase();


//        resultLog = apv.ethMac[id - 1];
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }

        try {
            to.readUntil(si.ii.diagCmd[i], 1);

            String cmd = si.ii.cmd1[i] + " " + eth0.toLowerCase();

            if (!to.sendCommandAndRead(cmd, si.ii.diagCmd[i], 3)) {  //write mac
                addLog("CMD " + cmd + " Fail!", id);
                return false;
            }
            cmd = si.ii.cmd2[i] + " " + eth1.toLowerCase();
            if (!to.sendCommandAndRead(cmd, si.ii.diagCmd[i], 3)) {  //write mac
                addLog("CMD " + cmd + " Fail!", id);
                return false;
            }
            return true;
//            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean ambitWriteEth0Macs(StationInfo si, int i, int id) {
        resultLog = "";
        if (!apv.getSfisStatus()) {
            addLog("cancelled  tiem", id);
//            resultLog = apv.ethMac[id - 1];
            return true;


        }
        String eth0 = macTranslate(apv.ethMac[id - 1]).toLowerCase();
        resultLog = eth0;
        ComPort dut = new ComPort(apv, id, 1);




        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            String cmd = si.ii.cmd[i] + " " + eth0.toLowerCase();
            addLog(cmd);
            dut.write(cmd + "\r\n");
            return true;
//            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
        }
        return false;
    }

    public boolean ambitWriteEth1Macs(StationInfo si, int i, int id) {
        resultLog = "";
        if (!apv.getSfisStatus()) {
            addLog("cancelled  tiem", id);
//            resultLog = apv.ethMac[id - 1];
            return true;


        }
//        String eth0 = macTranslate(apv.ethMac[id - 1]).toLowerCase();

        long num = Long.parseLong(apv.ethMac[id - 1], 16);
        String eth1 = Long.toHexString(num + 1);
        eth1 = macTranslate(eth1).toLowerCase();
        resultLog = eth1;

//        resultLog = apv.ethMac[id - 1];
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }

        try {
            to.readUntil(si.ii.diagCmd[i], 1);

            String cmd = si.ii.cmd[i] + " " + eth1.toLowerCase();

            if (!to.sendCommandAndRead(cmd, si.ii.diagCmd[i], 3)) {  //write mac
                addLog("CMD " + cmd + " Fail!", id);
                return false;
            }

            return true;
//            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean ambitWriteMacs(StationInfo si, int i, int id) {

        if (!apv.getSfisStatus()) {
            addLog("cancelled  tiem", id);
//            resultLog = apv.ethMac[id - 1];
            return true;


        }
        ComPort dut = new ComPort(apv, id, 1);
        String eth0 = macTranslate(apv.ethMac[id - 1]).toLowerCase();
        resultLog = eth0;
        long num = Long.parseLong(apv.ethMac[id - 1], 16);
        String eth1 = Long.toHexString(num + 1);
        eth1 = macTranslate(eth1).toLowerCase();



        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            String cmd = si.ii.cmd[i] + " " + eth0.toLowerCase();
            addLog(cmd);
            dut.write(cmd + "\r\n");
            return true;
//            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
        }
        return false;
    }

    public boolean setUBootVersion(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            String cmd = si.ii.cmd[i].trim() + " " + apv.getImageProject();
            addLog(cmd, 1, id);
            if (!to.sendCommandAndRead(cmd, si.ii.diagCmd[i], 3)) {  //write mac
                addLog("CMD " + cmd + " Fail!", id);
                return false;
            }
            resultLog = "PASS";
            return true;
//            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean ambitEthernetMacCheck(StationInfo si, int i, int id) {
        resultLog = "FAIL";

        String eth0 = macTranslate(apv.ethMac[id - 1]).toLowerCase();
        long num = Long.parseLong(apv.ethMac[id - 1], 16);
        String eth1 = macTranslate(Long.toHexString(num + 1)).toLowerCase();
        //apv.phase_items = new JSONObject[1];
        //apv.phase_items[0] = new JSONObject();
        //apv.phase_items[0].put("eth0", eth0);
        //apv.phase_items[0].put("eth1", eth1);
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {

            to.readUntil(si.ii.diagCmd[i], 1);

            if (!to.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], 3)) {   //get  mac
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);
            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);

            String eth[] = details.split("\n");
            //apv.phase_items[0].put("eth0", eth[0]);
            //apv.phase_items[1].put("eth1", eth[1]);
            if (eth0.equals(eth[0]) && eth1.equals(eth[1])) {
                resultLog = "PASS";
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean writeProductSerialNumber(StationInfo si, int i, int id) {
        resultLog = "";
        if (!apv.getSfisStatus()) {
            addLog("cancelled  tiem", id);
            resultLog = apv.mlbSn[id - 1];
            return true;
        }

        ComPort dut = new ComPort(apv, id, 1);
        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            String cmd = si.ii.cmd[i] + apv.mlbSn[id - 1];
            addLog(cmd, 1, id);
            dut.write(cmd + "\r\n");

            resultLog = apv.mlbSn[id - 1];
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
            return false;
        } finally {
            dut.close();
        }

    }

    public boolean ambitSubsystemTest(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String[] cmd = {si.ii.cmd1[i], si.ii.cmd2[i], si.ii.cmd3[i], si.ii.cmd4[i], si.ii.cmd5[i], si.ii.cmd6[i]};
        String[] spec = {si.ii.diagCmd1[i], si.ii.diagCmd2[i], si.ii.diagCmd3[i], si.ii.diagCmd4[i], si.ii.diagCmd5[i], si.ii.diagCmd6[i]};
        String[] item = si.ii.cmd[i].split(",");
        //apv.phase_items = new JSONObject[item.length];
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            to.readUntil(si.ii.diagCmd[i], 3);

            boolean result = true;
            for (int j = 0; j < item.length; j++) {

                if (!to.sendCommandAndRead(cmd[j], si.ii.diagCmd[i], 3)) {
                    addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                    return false;
                }
                String value = substring(to.getString, cmd[j], si.ii.diagCmd[i]);
                //addLog(to.getString, 1, id);
                if (!value.contains(spec[j])) {
                    addLog(item[j] + " Fail", id);
                    result = false;
                }
                //apv.phase_items[j] = new JSONObject();
                //apv.phase_items[j].put("name", item[j]);
                //apv.phase_items[j].put("value", value);
                //apv.phase_items[j].put("spec", spec[j]);
            }

            if (result) {
                resultLog = "PASS";
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean ambitResetButtonTest(StationInfo si, int i, int id) {
        resultLog = "FAIL";
//        TipWindow tw = new TipWindow(si.ii.diagCmdTime[i]);          //提示框时间
        ComPort cp = new ComPort(apv, id);
//        //apv.phase_items = new JSONObject[1];
//        //apv.phase_items[0] = new JSONObject();
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        to.readUntil(si.ii.diagCmd[i], 1);
        if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
            addLog(si.ii.comPort[i] + " Fail!", id);
            cp.close();
            return false;
        }
        try {

//            to.write("\r\n");
//            to.readUntil(si.ii.diagCmd[i], 1);
//            if (cp.writeAndReadUntil(si.ii.cmd1[i], "OK", 10)) {
//                addLog(si.ii.cmd1[i] + " Fail!", id);
//            }
            cp.write(si.ii.cmd1[i]);
//            cp.readUntil("OK", 1);
            //按下复位键
//            Thread.sleep(si.ii.diagCmdTime[i] * 1000);
            //松开复位键
//            //apv.phase_items[0].put("spec", si.ii.diagCmdTime[i]);

            if (to.readUntil(si.ii.spec[i], si.ii.diagCmdTime[i])) {
                addLog(to.getString, 1, id);
//                //apv.phase_items[0].put("value", to.getString);
                addLog("Reset button  PASS!", id);
                resultLog = "PASS";
                return true;
            }
            addLog(to.getString, 1, id);
            //addLog(to.getString, 1, id);
//            //apv.phase_items[0].put("value", to.getString);

            addLog("Reset button  Fail!", id);
            return false;

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
//             cp.readString(1);
//            cp.write(si.ii.cmd2[i]);
            cp.writeAndReadUntil(si.ii.cmd2[i], "OK", 10);
//            cp.readms(1);
            to.disconnect();
            cp.close();
        }
        return false;
    }

    public boolean ambitResetButtonTest2(StationInfo si, int i, int id) {
        resultLog = "";
//        TipWindow tw = new TipWindow(si.ii.diagCmdTime[i]);          //提示框时间
        ComPort cp = new ComPort(apv, id);
        ComPort dut = new ComPort(apv, 1, id);
//        //apv.phase_items = new JSONObject[1];
//        //apv.phase_items[0] = new JSONObject();  

        if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
            addLog(si.ii.comPort[i] + " Fail!", id);
            cp.close();
            return false;
        }
        String DUTcom[] = si.ii.diagCmd[i].split(",");
        if (!dut.open(DUTcom[0].trim(), Integer.parseInt(DUTcom[1].trim()))) {
            return false;
        }
        try {
//            to.write("\r\n");
//            to.readUntil(si.ii.diagCmd[i], 1);
            for (int j = 0; j < 3; j++) {
                cp.write(si.ii.cmd1[i]);                 //按下复位键
                if (dut.readUntil(si.ii.spec[i], si.ii.diagCmdTime[i])) {
//                //apv.phase_items[0].put("value", to.getString);
                    addLog("Reset button  PASS!", id);
                    resultLog = si.ii.spec[i];
                    return true;
                }
                cp.write(si.ii.cmd2[i]);
            }

            addLog("Reset button  Fail!", id);
            return false;

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cp.write(si.ii.cmd2[i]);
            dut.close();
            cp.close();
        }
        return false;
    }

    public boolean ambitResetButtonTest1(StationInfo si, int i, int id) {
        resultLog = "";
//        TipWindow tw = new TipWindow(si.ii.diagCmdTime[i]);          //提示框时间
        ComPort cp = new ComPort(apv, id);

//        //apv.phase_items = new JSONObject[1];
//        //apv.phase_items[0] = new JSONObject();
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        to.readUntil(si.ii.diagCmd[i], 1);
        if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
            addLog(si.ii.comPort[i] + " Fail!", id);
            cp.close();
            return false;
        }
        try {
//            to.write("\r\n");
//            to.readUntil(si.ii.diagCmd[i], 1);
            for (int j = 0; j < 3; j++) {
                cp.write(si.ii.cmd1[i]);                 //按下复位键
                if (to.readUntil(si.ii.spec[i], si.ii.diagCmdTime[i])) {
//                //apv.phase_items[0].put("value", to.getString);
                    addLog("Reset button  PASS!", id);
                    resultLog = si.ii.spec[i];
                    return true;
                }
                cp.write(si.ii.cmd2[i]);
            }

            addLog("Reset button  Fail!", id);
            return false;

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
//             cp.readUntil("OK", 5);
//            cp.writeAndReadUntil(si.ii.cmd2[i], "OK", 5);
            cp.write(si.ii.cmd2[i]);
            to.disconnect();
            cp.close();
        }
        return false;
    }

    public boolean ResetButtonBooster(StationInfo si, int i, int id) {
        resultLog = "";
//        TipWindow tw = new TipWindow(si.ii.diagCmdTime[i]);          //提示框时间
        ComPort cp = new ComPort(apv, id);
//        //apv.phase_items = new JSONObject[1];
//        //apv.phase_items[0] = new JSONObject();
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        to.readUntil(si.ii.diagCmd[i], 1);
        if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
            addLog(si.ii.comPort[i] + " Fail!", id);
            cp.close();
            return false;
        }
        try {
//            to.write("\r\n");
//            to.readUntil(si.ii.diagCmd[i], 1);
            for (int j = 0; j < 3; j++) {
                if (!cp.writeAndReadUntilToUpperCase(si.ii.cmd1[i] + "\r\n", "}", si.ii.diagCmdTime[i])) {     //按下复位键
                    addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                    return false;
                }
                if (!fixtureBooster(cp.readAll, si.ii.cmd1[i], si.ii.cmd3[i])) {
                    addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                    return false;
                }
                if (to.readUntil(si.ii.spec[i], si.ii.diagCmdTime[i])) {
//                //apv.phase_items[0].put("value", to.getString);
                    addLog("Reset button  PASS!", id);
                    resultLog = si.ii.spec[i];
                    return true;
                }
            }

            addLog("Reset button  Fail!", id);
            return false;

        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            if (!cp.writeAndReadUntilToUpperCase(si.ii.cmd2[i] + "\r\n", "}", si.ii.diagCmdTime[i])) {     //按下复位键
                addLog("CMD " + si.ii.cmd2[i] + " Fail!", id);
                return false;
            }

            to.disconnect();
            cp.close();
        }
        return false;
    }

    public boolean firmwareUpdate(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        ArrayList<String> command = new ArrayList<String>();
        String[] cmd = {si.ii.diagCmd1[i], si.ii.diagCmd2[i], si.ii.diagCmd3[i],
            si.ii.diagCmd4[i], si.ii.diagCmd5[i], si.ii.diagCmd6[i], si.ii.diagCmd7[i],
            si.ii.diagCmd8[i], si.ii.diagCmd9[i], si.ii.diagCmd10[i]};//最多可以放10个指令
        for (int j = 0; j < cmd.length; j++) { //调整指令有效指令集合在一起
            if (!"".equals(cmd[j])) {
                command.add(cmd[j]);
            }
        }
        cmd = command.toArray(new String[command.size()]);
        TipWindow tw = new TipWindow(si.ii.diagCmdTime[i]);          //提示框时间
        ComPort cp = new ComPort(apv, 1, id);
        if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
            addLog("open " + si.ii.comPort[i] + " Fail!", id);
            return false;
        }
        try {
            tw.start(question[21]);
            for (int j = 0; j < si.ii.diagCmdTime[i]; j++) {
                if (cp.writeAndReadUntil("\r\n", si.ii.diagCmd[i], 1)) {
                    tw.stop();
                    break;
                }
                if (cp.readAll.contains("root@eero-test:/#")) {
                    cp.write("reboot");
                    try {
                        Thread.sleep(1000);
                    } catch (EnumConstantNotPresentException e) {
                        e.notifyAll();
                    }
                }
                if (j >= si.ii.diagCmdTime[i] - 1) {
                    addLog("login bootloader fail", id);
                    return false;
                }
            }
            cp.writeAndReadUntil(si.ii.cmd1[i] + "\r\n", si.ii.diagCmd[i], 1);
            cp.writeAndReadUntil(si.ii.cmd2[i] + "\r\n", si.ii.diagCmd[i], 1);
            for (int j = 0; j < 10; j++) {
                cp.writeAndReadUntil(si.ii.cmd3[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i]);
                if (cp.readAll.contains("is alive")) {
                    break;
                }
                try {
                    Thread.sleep(1000);
                } catch (EnumConstantNotPresentException e) {
                    e.notifyAll();
                }
            }
            if (!cp.readAll.contains("is alive")) {
                addLog("cmd fail: " + si.ii.cmd3[i], id);
                return false;
            }

            cp.writeAndReadUntil(si.ii.cmd4[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i]);
//            if (!cp.readAll.contains(si.ii.Cut0[i])) {
//                addLog("cmd fail: " + si.ii.cmd4[i], id);
//                return false;
//            }
            cp.writeAndReadUntil(si.ii.cmd5[i] + "\r\n", si.ii.diagCmd[i], 1);
            cp.writeAndReadUntil(si.ii.cmd6[i] + "\r\n", si.ii.diagCmd[i], 3);
//            cp.writeAndReadUntil(si.ii.cmd7[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i]);
            String[] details = cp.readAll.split("\n");

            int count = 0;
            for (int j = 0; j < details.length; j++) {
                if (details[j].contains("[ done ]")) {
                    count++;
                }

            }
            int spec = Integer.parseInt(si.ii.spec[i].trim());
            if (spec != count) {
                addLog("done count=" + count + "  spec=" + spec, id);
                return false;

            }
            for (int j = 0; j < cmd.length; j++) {
                cp.writeAndReadUntil(cmd[j] + "\r\n", si.ii.diagCmd[i], 1);

            }
//            cp.write("reset");
            cp.readString(2);
            for (int j = 0; j < si.ii.diagCmdTime[i]; j++) {
                if (cp.writeAndReadUntil("\r\n", si.ii.diagCmd[i], 1)) {
                    tw.stop();
                    break;
                }
                if (cp.readAll.contains("root@eero-test:/#")) {
                    cp.write("reboot");
                    try {
                        Thread.sleep(1000);
                    } catch (EnumConstantNotPresentException e) {
                        e.notifyAll();
                    }
                }
                if (j >= si.ii.diagCmdTime[i] - 1) {
                    addLog("login bootloader fail", id);
                    return false;
                }
            }




            resultLog = "PASS";
            return true;

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cp.close();
            tw.stop();
        }
        return false;
    }

    public boolean ambitLEDIrradianceTest(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String[] erroCode = si.ii.errorCode[i].split(",");
        try {

            String on = si.ii.spec[i].split(",")[0].trim();
            String off = si.ii.spec[i].split(",")[1].trim();
            String cmd[] = {si.ii.cmd1[i], si.ii.cmd2[i], si.ii.cmd3[i], si.ii.cmd4[i]};
            String ledName[] = {"blue", "green", "red", "white"};

            boolean status = true;
            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }

            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                si.ii.errorCode[i] = erroCode[0];
                return false;
            }
            for (int j = 0; j < cmd.length; j++) {
                QuestionWindow qw = new QuestionWindow(si.ii.diagCmdTime[i]);
                if (!to.sendCommandAndRead(cmd[j] + " " + on, si.ii.diagCmd[i], 3)) {   //打开灯
                    addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                    return false;
                }
                qw.start(question[6 + j]);
                if (!qw.getResult(si.ii.diagCmdTime[i])) {
                    addLog("LED " + ledName[j] + " Fail!", id);
                    si.ii.errorCode[i] = erroCode[j + 1];
                    status = false;
                }
                qw.stop();
                if (!to.sendCommandAndRead(cmd[j] + " " + off, si.ii.diagCmd[i], 3)) {  //关闭
                    addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                    return false;
                }
            }
            if (status) {
                resultLog = "PASS";
                return true;
            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

//    public boolean LEDIrradianceTestFixtureBooster(StationInfo si, int i, int id) {
//        resultLog = "FAIL";
//        String[] errorCode = si.ii.errorCodes[i].split(",");
//        String[] errorDes = si.ii.errorDeses[i].split(",");
//        si.ii.errorCode[i] = errorCode[0];
//        si.ii.errorDes[i] = errorDes[0];
//        if (errorDes.length != 5 || errorCode.length != 5) {
//            addLog("ambitconfig.txt erro, ERR_CODE and ERR_CODE_DES's  length both  must be five", id);
//            return false;
//        }
//        ComPort cp = new ComPort(apv, id);
//        String log = "";
//        String Items = "";
//
//        try {
//            String on = si.ii.spec[i].split(",")[0].trim();
//            String off = si.ii.spec[i].split(",")[1].trim();
//            String[] cmd = {si.ii.cmd1[i], si.ii.cmd2[i], si.ii.cmd3[i], si.ii.cmd4[i]};
//            String[] ledName = si.ii.Cut0[i].split(",");
//
//            String[] spec_up = {si.ii.diagCmd1[i], si.ii.diagCmd2[i], si.ii.diagCmd3[i], si.ii.diagCmd4[i], si.ii.diagCmd5[i]};
//            String[] spec_down = {si.ii.Cut1[i], si.ii.Cut2[i], si.ii.Cut3[i], si.ii.Cut4[i], si.ii.Cut5[i]};
//
//            boolean status = true;
//            if (!to.connect(si.ii.socketIp[i])) {
//                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
//                return false;
//            }
//            if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
//                addLog(si.ii.comPort[i] + " Fail!", id);
//                cp.close();
//                return false;
//            }
////            to.readUntil(si.ii.diagCmd[i], 1);
////            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
////                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
////                si.ii.errorCode[i] = errorCode[0];
////                return false;
////            }
//            //apv.phase_items = new JSONObject[ledName.length * 3];
//
//            for (int j = 0; j < ledName.length; j++) {  //红 绿 蓝 白 off
//                ledName[j] = ledName[j].trim();
//                if (j < ledName.length - 1) {
//                    String command = cmd[j] + " " + on;
////                    if (ledName[j].equals("green")) {
////                        command = cmd[j] + " 0xFF";
////                    }
////                     addLog(command, id);
//                        addLog(command, id);
//                    if (!to.sendCommandAndRead(command, si.ii.diagCmd[i], 3)) {   //打开灯
//                        addLog("CMD " + command + " Fail!", id);
//                        return false;
//                    }
//                }
////                cp.write("\r\n");
//                cp.read(5); //等待一秒,顺便清除COM内容
//
//                String[] FixtureCommand = si.ii.cmd10[i].split(",");
//                if (!cp.writeAndReadUntil(FixtureCommand[0].trim() + "\r\n", "OK", 3)) {
//                    addLog(FixtureCommand[0] + "Fixture command erro ", id);
//                    return false;
//                }
//                if (!cp.writeAndReadUntil(FixtureCommand[1].trim() + "\r\n", "\r\n", 3)) {
//                    addLog(FixtureCommand[0] + "Fixture command erro ", id);
//                    return false;
//                }
//                if (cp.readAll.split(" ").length < 3) {  //重新下一次
//                    if (!cp.writeAndReadUntil(FixtureCommand[1].trim() + "\r\n", "\r\n", 3)) {
//                        addLog(FixtureCommand[0] + "Fixture command erro ", id);
//                        return false;
//                    }
//                }
//                String details[] = cp.readAll.trim().split("\n")[0].trim().split(" ");
//
//                int[] rgb = new int[3];
//                for (int s = 0; s < rgb.length; s++) {
//                    rgb[s] = Integer.parseInt(details[s].trim());
//
//                }
//
//                Image_RGB imageRgb = new Image_RGB();
//                imageRgb.RGBtoXYZxy(rgb[0], rgb[1], rgb[2]);
//                String[] Up = spec_up[j].split(",");
//                String[] Down = spec_down[j].split(",");
//                String name[] = {"x", "y", "Y"};
//                double xyY[] = {imageRgb.x, imageRgb.y, imageRgb.Y};
//                DecimalFormat df = new DecimalFormat("0.00");
//                String xyYString[] = {df.format(xyY[0]), df.format(xyY[1]), df.format(xyY[2])};
////                addLog(ledName[j] + "RGB: " + rgb[0] + "," + rgb[1] + "," + rgb[2], id);
//                addLog(ledName[j] + " x: " + xyYString[0] + " y: " + xyYString[1] + " Y: " + xyYString[2], id);
//
//                for (int s = 0; s < xyY.length; s++) {
//                    //apv.phase_items[3 * j + s] = new JSONObject();
//                    //apv.phase_items[3 * j + s].put("led", ledName[j]);
//                    //apv.phase_items[3 * j + s].put("name", name[s]);
//                    //apv.phase_items[3 * j + s].put("value", xyYString[s]);
//                    //apv.phase_items[3 * j + s].put("limit_min", Down[s].trim());
//                    //apv.phase_items[3 * j + s].put("limit_max", Up[s].trim());
//                    double up = Double.valueOf(Up[s].trim());
//                    double down = Double.valueOf(Down[s].trim());
//                    if (xyY[s] > up) {
//                        addLog("spec_UL: " + Up[0] + "," + Up[1] + "," + Up[2], id);
//                        status = false;
//                        si.ii.errorCode[i] = errorCode[j];
//                        si.ii.errorDes[i] = "led " + ledName + " " + name[s] + " UL fail";
//                        break;
//                    } else if (xyY[s] < down) {
//                        addLog("spec_LL: " + Down[0] + "," + Down[1] + "," + Down[2], id);
//                        status = false;
//                        si.ii.errorCode[i] = errorCode[j];
//                        si.ii.errorDes[i] = "led " + ledName + " " + name[s] + " LL fail";
//                        break;
//                    }
//                
//                }
//                    if (j < ledName.length - 1) {
//                            addLog(cmd[j] + " " + off, id);
//                    if (!to.sendCommandAndRead(cmd[j] + " " + off, si.ii.diagCmd[i], 3)) {  //关闭
//                        addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
//                        return false;
//                    }
//                }
//
//                log += "," + rgb[0] + " " + rgb[1] + " " + rgb[2];
//                Items += "," + ledName[j];
//            }
//
//            if (status) {
//                resultLog = "PASS";
//                return true;
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//            addLog(e.toString(), id);
//
//        } finally {
//            if (si.ii.testLog[i] == null) {
//                si.ii.testLog[i] = apv.testLog[id - 1];
//            }
//
//            si.ii.resultType[i] = si.ii.itemDes[i] + Items;
//            apv.testLog[id - 1] = si.ii.testLog[i] + resultLog + log;
//            resultLog = "";
//            cp.close();
//            to.disconnect();
//
//        }
//        return false;
//    }
    public boolean LEDTestFixtureRGB(StationInfo si, int i, int id) {
        resultLog = "FAIL";

        String ApiName[] = si.ii.apiName[i].split(",");
        String value[] = {"", "", ""};
        boolean Status[] = {false, false, false};
        ComPort cp = new ComPort(apv, id);

        try {
            apv.getAPIJsonConfig(ApiName[0], si, i);
            String on = si.ii.spec[i].split(",")[0].trim();
            String off = si.ii.spec[i].split(",")[1].trim();


            boolean status = true;
            if (!to.connect(si.ii.socketIp[i])) {   //先telnet
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1); //清除telnet开头内容

            String[] cmd = {si.ii.Cut1[i], si.ii.Cut2[i], si.ii.Cut3[i],
                si.ii.Cut4[i], si.ii.Cut5[i]};
            for (int j = 0; j < cmd.length; j++) {
//                    addLog(cmd[j], 1, id);
                if (!to.sendCommandAndRead(cmd[j], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    //addLog(to.getString, 1, id);
                    addLog("CMD " + cmd[j] + " Fail!", id);
                    return false;
                }
            }
            if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
                addLog(si.ii.comPort[i] + " Fail!", id);
                cp.close();
                return false;
            }
//            String ledName = si.ii.itemDes[i];
            if (!si.ii.cmd1[i].equals("")) {
                String command = si.ii.cmd1[i] + " " + on;

                if (!to.sendCommandAndRead(command, si.ii.diagCmd[i], 3)) {   //打开灯
                    addLog("CMD " + command + " Fail!", id);

                    return false;
                }

                try {
                    Thread.sleep(si.ii.diagCmdTime[i] * 1000);
                } catch (EnumConstantNotPresentException e) {
                    e.notifyAll();
                }
            }
//            String spec = ledName[j].toUpperCase() + "ON";
            if (!cp.writeAndReadUntil(si.ii.diagCmd1[i], "\r\n", 3)) {
                addLog(cp.readAll + " command erro ", id);
                return false;
            }
            int[] rgb = new int[3];
//                cp.readAll = "LED_R=200,LED_G=200,LED_B=200";
            String str = cp.readAll.substring(cp.readAll.indexOf("R=") + 2).trim();
            value[0] = str.substring(0, str.indexOf(",")).trim();
            rgb[0] = Integer.parseInt(value[0]);

            str = cp.readAll.substring(cp.readAll.indexOf("G=") + 2).trim();
            value[1] = str.substring(0, str.indexOf(",")).trim();
            rgb[1] = Integer.parseInt(value[1]);
            str = cp.readAll.substring(cp.readAll.indexOf("B=") + 2).trim();
            value[2] = str.trim();
            rgb[2] = Integer.parseInt(str.trim());
            resultLog = "";
            String rgbName[] = {"R", "G", "B"};
            for (int k = 0; k < rgb.length; k++) {
                apv.getAPIJsonConfig(ApiName[k], si, i);
                double up = Double.valueOf(si.ii.limitUp[i]);
                double down = Double.valueOf(si.ii.limitDown[i]);
                Status[k] = true;
                resultLog += rgb[k] + " ";
                if (rgb[k] > up) {
                    addLog(rgbName[k] + " spec_UL: " + si.ii.limitUp[i], id);
                    status = false;;
                    Status[k] = false;
                } else if (rgb[k] < down) {
                    addLog(rgbName[k] + " spec_LL: " + si.ii.limitDown[i], id);
                    status = false;
                    Status[k] = false;
                }
            }
            if (!si.ii.cmd1[i].equals("")) {
                String command = si.ii.cmd1[i] + " " + off;
                if (!to.sendCommandAndRead(command, si.ii.diagCmd[i], 3)) {  //关闭
                    addLog("CMD " + command + " Fail!", id);
                    return false;
                }
            }

            if (status) {
//                resultLog = "PASS";
                return true;
            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);

        } finally {
            apv.addApiJson(ApiName, value, Status, i, id);
            cp.close();
            to.disconnect();

        }
        return false;
    }

    public boolean LEDTestFixtureXYLUM(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String ApiName[] = si.ii.apiName[i].split(",");
        String value[] = {"", "", ""};
        boolean Status[] = {false, false, false};
        ComPort cp = new ComPort(apv, id);

        try {
            apv.getAPIJsonConfig(ApiName[0], si, i);
            String on = si.ii.spec[i].split(",")[0].trim();
            String off = si.ii.spec[i].split(",")[1].trim();

            boolean status = true;
            if (!to.connect(si.ii.socketIp[i])) {   //先telnet
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1); //清除telnet开头内容

            String[] cmd = {si.ii.Cut1[i], si.ii.Cut2[i], si.ii.Cut3[i],
                si.ii.Cut4[i], si.ii.Cut5[i]};
            for (int j = 0; j < cmd.length; j++) {
//                    addLog(cmd[j], 1, id);
                if (!to.sendCommandAndRead(cmd[j], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    //addLog(to.getString, 1, id);
                    addLog("CMD " + cmd[j] + " Fail!", id);
                    return false;
                }
            }
            if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
                addLog(si.ii.comPort[i] + " Fail!", id);
                cp.close();
                return false;
            }

            if (!si.ii.cmd1[i].equals("")) {
                String command = si.ii.cmd1[i] + " " + on;

                if (!to.sendCommandAndRead(command, si.ii.diagCmd[i], 3)) {   //打开灯
                    addLog("CMD " + command + " Fail!", id);

                    return false;
                }

                try {
                    Thread.sleep(si.ii.diagCmdTime[i] * 1000);
                } catch (EnumConstantNotPresentException e) {
                    e.notifyAll();
                }
            }
//            String spec = ledName[j].toUpperCase() + "ON";
            if (!cp.writeAndReadUntil(si.ii.diagCmd1[i], "\r\n", 3)) {
                addLog(cp.readAll + " command erro ", id);
                return false;
            }
            double[] rgb = new double[3];
//                cp.readAll = "LED_R=200,LED_G=200,LED_B=200";
            String str = cp.readAll.substring(cp.readAll.indexOf("X=") + 2).trim();
            value[0] = str.substring(0, str.indexOf(",")).trim();
            rgb[0] = Double.parseDouble(value[0]);

            str = cp.readAll.substring(cp.readAll.indexOf("Y=") + 2).trim();
            value[1] = str.substring(0, str.indexOf(",")).trim();
            rgb[1] = Double.parseDouble(value[1]);
            str = cp.readAll.substring(cp.readAll.indexOf("LUM=") + 4).trim();
            value[2] = str.trim();
            rgb[2] = Double.parseDouble(str.trim());
            resultLog = "";
            String rgbName[] = {"x", "y", "lum"};
            for (int k = 0; k < value.length; k++) {
                apv.getAPIJsonConfig(ApiName[k], si, i);
                double up = 0;
                double down = 0;
                if ("".equals(si.ii.limitUp[i])) {
                    up = rgb[k];
                } else {
                    up = Double.valueOf(si.ii.limitUp[i].trim());
                }
                if ("".equals(si.ii.limitDown[i])) {
                    down = rgb[k];
                } else {
                    down = Double.valueOf(si.ii.limitDown[i].trim());
                }
                Status[k] = true;
                resultLog += value[k] + " ";
                if (rgb[k] > up) {
                    addLog(rgbName[k] + " spec_UL: " + si.ii.limitUp[i], id);
                    status = false;;
                    Status[k] = false;
                } else if (rgb[k] < down) {
                    addLog(rgbName[k] + " spec_LL: " + si.ii.limitDown[i], id);
                    status = false;
                    Status[k] = false;
                }
            }
            if (!si.ii.cmd1[i].equals("")) {
                String command = si.ii.cmd1[i] + " " + off;
                if (!to.sendCommandAndRead(command, si.ii.diagCmd[i], 3)) {  //关闭
                    addLog("CMD " + command + " Fail!", id);
                    return false;
                }
            }

            if (status) {
//                resultLog = "PASS";
                return true;
            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);

        } finally {
            apv.addApiJson(ApiName, value, Status, i, id);
            cp.close();
            to.disconnect();

        }
        return false;
    }

    public boolean LEDTestFixtureBoosterXYLUM(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        String ApiName[] = si.ii.apiName[i].split(",");
        String value[] = {"", "", ""};
        boolean Status[] = {false, false, false};
        ComPort cp = new ComPort(apv, id);

        try {
            apv.getAPIJsonConfig(ApiName[0], si, i);
            String on = si.ii.spec[i].split(",")[0].trim();
            String off = si.ii.spec[i].split(",")[1].trim();

            boolean status = true;
            if (!to.connect(si.ii.socketIp[i])) {   //先telnet
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1); //清除telnet开头内容

            String[] cmd = {si.ii.Cut1[i], si.ii.Cut2[i], si.ii.Cut3[i],
                si.ii.Cut4[i], si.ii.Cut5[i]};
            for (int j = 0; j < cmd.length; j++) {
//                    addLog(cmd[j], 1, id);
                if (!to.sendCommandAndRead(cmd[j], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    //addLog(to.getString, 1, id);
                    addLog("CMD " + cmd[j] + " Fail!", id);
                    return false;
                }
            }
            if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
                addLog(si.ii.comPort[i] + " Fail!", id);
                cp.close();
                return false;
            }

            if (!si.ii.cmd1[i].equals("")) {
                String command = si.ii.cmd1[i] + " " + on;

                if (!to.sendCommandAndRead(command, si.ii.diagCmd[i], 3)) {   //打开灯
                    addLog("CMD " + command + " Fail!", id);

                    return false;
                }

                try {
                    Thread.sleep(si.ii.diagCmdTime[i] * 1000);
                } catch (EnumConstantNotPresentException e) {
                    e.notifyAll();
                }
            }
//            String spec = ledName[j].toUpperCase() + "ON";
            if (!cp.writeAndReadUntil(si.ii.diagCmd1[i] + "\r\n", "OK", 5)) {
                addLog(cp.readAll + " command erro ", id);
                return false;
            }
            if (!cp.writeAndReadUntil(si.ii.diagCmd2[i] + "\r\n", "\r\n", 1)) {
                addLog(cp.readAll + " command erro ", id);
                return false;
            }
            String xy[] = cp.readAll.trim().split(" ");
            if (!cp.writeAndReadUntil(si.ii.diagCmd3[i] + "\r\n", "\r\n", 1)) {
                addLog(cp.readAll + " command erro ", id);
                return false;
            }
            String rgblum[] = cp.readAll.trim().split(" ");
            double[] xylum = new double[3];
            value[0] = xy[0].trim();
            xylum[0] = Double.parseDouble(xy[0]);
            value[1] = xy[1].trim();
            xylum[1] = Double.parseDouble(xy[1]);



            value[2] = rgblum[3];
            xylum[2] = Double.parseDouble(rgblum[3]);
            resultLog = "";
            String rgbName[] = {"x", "y", "lum"};
            for (int k = 0; k < value.length; k++) {
                apv.getAPIJsonConfig(ApiName[k], si, i);
                double up = 0;
                double down = 0;
                if ("".equals(si.ii.limitUp[i])) {
                    up = xylum[k];
                } else {
                    up = Double.valueOf(si.ii.limitUp[i].trim());
                }
                if ("".equals(si.ii.limitDown[i])) {
                    down = xylum[k];
                } else {
                    down = Double.valueOf(si.ii.limitDown[i].trim());
                }
                Status[k] = true;
                resultLog += value[k] + " ";
                if (xylum[k] > up) {
                    addLog(rgbName[k] + " spec_UL: " + si.ii.limitUp[i], id);
                    status = false;;
                    Status[k] = false;
                } else if (xylum[k] < down) {
                    addLog(rgbName[k] + " spec_LL: " + si.ii.limitDown[i], id);
                    status = false;
                    Status[k] = false;
                }
            }
            if (!si.ii.cmd1[i].equals("")) {
                String command = si.ii.cmd1[i] + " " + off;
                if (!to.sendCommandAndRead(command, si.ii.diagCmd[i], 3)) {  //关闭
                    addLog("CMD " + command + " Fail!", id);
                    return false;
                }
            }

            if (status) {
//                resultLog = "PASS";
                return true;
            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);

        } finally {
            apv.addApiJson(ApiName, value, Status, i, id);
            cp.close();
            to.disconnect();

        }
        return false;
    }

    public boolean ambitHWVerCheck(StationInfo si, int i, int id) {
        resultLog = "";
        boolean flat = false;
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }

        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                //addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);

            //String details = to.getString.substring(to.getString.indexOf(si.ii.cmd[i]) + si.ii.cmd[i].length(), to.getString.indexOf(si.ii.diagCmd[i])).trim();
            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
//            details = PatternStarts(details, "\\d+").trim();

            resultLog = details;
            String spec[] = si.ii.limitDown[i].split("\\|");
            String spect1[] = si.ii.spec[i].split(",");
            for (int j = 0; j < spec.length; j++) {
                addLog("spec: " + spec[j] + " value" + details, id);
                if (spec[j].equals(details)) {
                    flat = true;
                    break;
                }
            }
            if (!flat) {
                addLog("spec: " + si.ii.limitDown[i], id);
                return false;
            }
            flat = false;
            for (int j = 0; j < spect1.length; j++) {
                addLog("spec: " + spec[j] + " value" + details, id);
                if (spect1[j].equals(details)) {
                    flat = true;
                    break;
                }
            }
            if (!flat) {
                addLog("get : " + details, id);
                addLog("ambitconfig spec: " + si.ii.spec[i], id);
                return false;
            }
//            if (!si.ii.limitDown[i].equals("")) {
//                spec = si.ii.limitDown[i];
//            }
            String value[] = details.split("\r\n");
            if (flat) {
            }
            addLog("spec: " + si.ii.limitDown[i], id);
            return flat;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean USBHighSpeedTest(StationInfo si, int i, int id) {
        resultLog = "";
        ComPort cp = new ComPort(apv, id);
        try {
            if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            cp.writeAndReadUntil(si.ii.diagCmd1[i], "OK", 1);
            Thread.sleep(si.ii.diagCmdTime[i] * 1000);
            cp.writeAndReadUntil(si.ii.diagCmd2[i], "OK", 1);
            Thread.sleep(si.ii.diagCmdTime[i] * 1000);

            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);
            String cmd[] = si.ii.cmd[i].split(",");
            for (int j = 0; j < cmd.length; j++) {
                if (!to.sendCommandAndRead(cmd[j], si.ii.diagCmd[i], 3)) {
                    addLog("CMD " + cmd[j] + " Fail!", id);
                    return false;
                }

                String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
                resultLog = details;
                if (details.contains("No such file or directory")) {
//            return false;
                    continue;
                } else if (details.contains(si.ii.spec[i])) {
                    resultLog = si.ii.spec[i];
                    return true;
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cp.close();
            to.disconnect();
        }



        return false;
    }

    public boolean USBReadandWriteTest(StationInfo si, int i, int id, int retryTime) {
        StringBuilder Value = new StringBuilder();
        StringBuilder Items = new StringBuilder();
        String apiName[] = si.ii.apiName[i].split(",");
        String value[] = {"", ""};
        double readWrite[] = new double[2];
        boolean Status[] = {false, false};
        resultLog = "FAIL";
        ComPort cp = new ComPort(apv, id);

        try {

            if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            if (retryTime > 0) {
                cp.writeAndReadUntil(si.ii.diagCmd1[i], "OK", 1);
                cp.writeAndReadUntil(si.ii.diagCmd2[i], "OK", 1);
                Thread.sleep(si.ii.diagCmdTime[i] * 1000);
            }
            if (!apv.getAPIJsonConfig(apiName[0], si, i)) {
                addLog("not have API " + apiName[0], id);
                return false;
            }

            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 10)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            addLog(details, 1, id);

            if (details.indexOf("Writing") < 0) {
                return false;
            }
            boolean bool = true;
            int value_seat = details.indexOf("seconds, ") + 8;

            value[0] = details.substring(value_seat, details.indexOf("MB/s")).trim();
            readWrite[0] = Double.valueOf(value[0]);
            addLog("write=" + value[0] + "MB/s", id);
            if (details.indexOf("Reading") < 0) {
                return false;
            }
            details = details.substring(details.indexOf("Reading"));

            value_seat = details.indexOf("seconds, ") + 8;
            value[1] = details.substring(value_seat, details.indexOf("MB/s")).trim();
            readWrite[1] = Double.valueOf(value[1]);
            addLog("read=" + value[1] + "MB/s", id);
            resultLog = readWrite[0] + "-" + readWrite[1];
            String[] name = {"usb_write", "ubs_read"};
            for (int j = 0; j < apiName.length; j++) {
                apv.getAPIJsonConfig(apiName[j], si, i);
                double up = 0;
                double down = 0;
                if ("".equals(si.ii.limitUp[i])) {
                    up = readWrite[j];
                } else {
                    up = Double.valueOf(si.ii.limitUp[i].trim());
                }
                if ("".equals(si.ii.limitDown[i])) {
                    down = readWrite[j];
                } else {
                    down = Double.valueOf(si.ii.limitDown[i].trim());
                }
                Status[j] = true;
                if (readWrite[j] < Double.valueOf(down)) {
                    addLog("read " + value[j] + "< " + si.ii.limitDown[i], id);
                    bool = false;
                    Status[j] = bool;
                } else if (readWrite[j] > Double.valueOf(up)) {
                    addLog("read " + value[j] + "> " + si.ii.limitUp[i], id);
                    bool = false;
                    Status[j] = bool;

                }

                Items.append(",").append(name[j]);
                Value.append(",").append(value[j]);

            }

            if (bool) {
//                apv.testGrrLog.append(grrValue.toString());
//                apv.testGrrItem.append(grrItem.toString());
                resultLog = "PASS";
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
//            cp.writeAndReadUntil(si.ii.diagCmd2[i], "OK", 1);
            apv.addApiJson(apiName, value, Status, i, id);

            cp.close();

            to.disconnect();
        }
        return false;

    }

    public boolean USBReadandWriteTest1(StationInfo si, int i, int id, int retryTime) {
        StringBuilder Value = new StringBuilder();
        StringBuilder Items = new StringBuilder();
        String apiName[] = si.ii.apiName[i].split(",");
        String value[] = {"-1", "-1"};
        double readWrite[] = new double[2];
        boolean Status[] = {false, false};
        resultLog = "FAIL";
        ComPort cp = new ComPort(apv, id);

        try {
            if (!apv.getAPIJsonConfig(apiName[0], si, i)) {
                addLog("not have API " + apiName[0], id);
                return false;
            }

            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 10)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            addLog(details, 1, id);

            if (details.indexOf("Writing") < 0) {
                return false;
            }
            boolean bool = true;
            int value_seat = details.indexOf("seconds, ") + 8;

            value[0] = details.substring(value_seat, details.indexOf("MB/s")).trim();
            readWrite[0] = Double.valueOf(value[0]);
            addLog("write=" + value[0] + "MB/s", id);
            if (details.indexOf("Reading") < 0) {
                return false;
            }
            details = details.substring(details.indexOf("Reading"));

            value_seat = details.indexOf("seconds, ") + 8;
            value[1] = details.substring(value_seat, details.indexOf("MB/s")).trim();
            readWrite[1] = Double.valueOf(value[1]);
            addLog("read=" + value[1] + "MB/s", id);
            resultLog = readWrite[0] + "-" + readWrite[1];
            String[] name = {"usb_write", "ubs_read"};
            for (int j = 0; j < apiName.length; j++) {
                apv.getAPIJsonConfig(apiName[j], si, i);
                double up = 0;
                double down = 0;
                if ("".equals(si.ii.limitUp[i])) {
                    up = readWrite[j];
                } else {
                    up = Double.valueOf(si.ii.limitUp[i].trim());
                }
                if ("".equals(si.ii.limitDown[i])) {
                    down = readWrite[j];
                } else {
                    down = Double.valueOf(si.ii.limitDown[i].trim());
                }
                Status[j] = true;
                if (readWrite[j] < Double.valueOf(down)) {
                    addLog("read " + value[j] + "< " + si.ii.limitDown[i], id);
                    bool = false;
                    Status[j] = bool;
                } else if (readWrite[j] > Double.valueOf(up)) {
                    addLog("read " + value[j] + "> " + si.ii.limitUp[i], id);
                    bool = false;
                    Status[j] = bool;

                }

                Items.append(",").append(name[j]);
                Value.append(",").append(value[j]);

            }

            if (bool) {
//                apv.testGrrLog.append(grrValue.toString());
//                apv.testGrrItem.append(grrItem.toString());
                resultLog = "PASS";
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            apv.addApiJson(apiName, value, Status, i, id);

            cp.close();

            to.disconnect();
        }
        return false;

    }

    public boolean telnetBatchProcessingFile(StationInfo si, int i, int id) {
        resultLog = "FAIL";
//        //apv.phase_items = new JSONObject[1];
//        //apv.phase_items[0] = new JSONObject();
//        //apv.phase_items[0].put("ip", si.ii.socketIp[i]);
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }

        File CmdFile = new File(si.ii.cmd[i]);

        if (!CmdFile.exists()) {
            this.addLog("not have file " + si.ii.cmd[i], id);
            return false;
        }

        BufferedReader br = null;

        String iqLogLine = "";
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
            int num = 0;
            while ((iqLogLine = br.readLine()) != null) {
//                if (iqLogLine.trim().length() <= 1) {
//                    to.sendCommand("\r\n");
//                }
                Thread.sleep(3000);
                to.sendCommand(iqLogLine);
//                //apv.phase_items[0].put("command" + num, iqLogLine);
                num++;
                try {
                    if (!si.ii.diagCmd[i].equals("")) {
                        int time = si.ii.diagCmdTime[i];
                        Thread.sleep(time);
                    } else {
                        Thread.sleep(300);















                    }
                    //                to.readUntil(si.ii.diagCmd[i], 5);
                } catch (InterruptedException ex) {
                    Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            to.readUntil(si.ii.diagCmd[i], 1);

            resultLog = "PASS";
            return true;

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean flashStation1(StationInfo si, int i, int id) {
        resultLog = "FAIL";
//        if (!apv.getSfisStatus() || apv.ApiModel.equals("debug") || apv.checkGolden()) {
//            addLog("cancelled  tiem", id);
//            resultLog = "PASS";
//            return true;
//
//        }

//        addLog("MODEL=" + apv.model[id - 1], id);
//        if (apv.model[id - 1].equals("NF")) {
//            resultLog = "PASS";
//            return true;
//        } else if (apv.model[id - 1].equals("F0")) {
////            resultLog = "PASS";
////            return true;
//        } else if (apv.model[id - 1].equals("F1")) {
////            resultLog = "PASS";
////            return true;
//        } else if (apv.model[id - 1].equals("F2")) {
////            resultLog = "PASS";
////            return true;
//        } else {
//            addLog("SFIS  ERRO", id);
//            return false;
//        }



        if (apv.mlbSn[id - 1].equals("") && apv.ethMac.equals("")) {
            addLog("SFIS  ERRO", id);
            return false;
        }
        if (!to.connect(si.ii.socketIp[i])) {   //先telnet
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        ArrayList<String> command = new ArrayList<String>();
        String[] cmd = {si.ii.diagCmd1[i], si.ii.diagCmd2[i], si.ii.diagCmd3[i],
            si.ii.diagCmd4[i], si.ii.diagCmd5[i]};//最多可以放5个指令
        for (int j = 0; j < cmd.length; j++) { //调整指令有效指令集合在一起
            if (!"".equals(cmd[j])) {
                command.add(cmd[j]);
            }
        }
        cmd = command.toArray(new String[command.size()]);

        try {

            to.readUntil(si.ii.diagCmd[i], 1); //清除telnet开头内容

//            String substring = "fw_setenv ";
            for (int j = 0; j < cmd.length; j++) {
                //下指令 命令  结束语句 最长时间S

                addLog(cmd[j], 1, id);
                if (!to.sendCommandAndRead(cmd[j], si.ii.diagCmd[i], 3)) {
                    addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                    return false;
                }

            }
            if (!to.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = to.getString;
            addLog(details, 1, id);
            String[] Details = details.split("\n");
            String spec[] = si.ii.spec[i].split(",");
            int num = 0;
            for (int a = 0; a < spec.length; a++) {
                for (int j = 0; j < Details.length; j++) {
                    if (Details[j].contains(spec[a])) {
                        num++;
                        break;
                    }
                }

            }
            if (num == spec.length) {
                resultLog = "PASS";
                return true;
            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean flashStation(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        if (!apv.getSfisStatus() || apv.ApiModel.equals("debug") || apv.checkGolden()) {
            addLog("cancelled  item", id);
            resultLog = "PASS";
            return true;

        }

        addLog("MODEL=" + apv.model[id - 1], id);
//        if (apv.model[id - 1].equals("NF")) {
//            resultLog = "PASS";
//            return true;
//        } else if (apv.model[id - 1].equals("F0")) {
////            resultLog = "PASS";
////            return true;
//        } else if (apv.model[id - 1].equals("F1")) {
////            resultLog = "PASS";
////            return true;
//        } else if (apv.model[id - 1].equals("F2")) {
////            resultLog = "PASS";
////            return true;
//        } else {
//            addLog("SFIS  ERRO", id);
//            return false;
//        }



        if (apv.mlbSn[id - 1].equals("") && apv.ethMac.equals("")) {
            addLog("SFIS  ERRO", id);
            return false;
        }
        if (!to.connect(si.ii.socketIp[i])) {   //先telnet
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        ArrayList<String> command = new ArrayList<String>();
        String[] cmd = {si.ii.diagCmd1[i], si.ii.diagCmd2[i], si.ii.diagCmd3[i],
            si.ii.diagCmd4[i], si.ii.diagCmd5[i]};//最多可以放5个指令
        for (int j = 0; j < cmd.length; j++) { //调整指令有效指令集合在一起
            if (!"".equals(cmd[j])) {
                command.add(cmd[j]);
            }
        }
        cmd = command.toArray(new String[command.size()]);

        try {

            to.readUntil(si.ii.diagCmd[i], 1); //清除telnet开头内容

//            String substring = "fw_setenv ";
            for (int j = 0; j < cmd.length; j++) {
                //下指令 命令  结束语句 最长时间S

                addLog(cmd[j], 1, id);
                if (!to.sendCommandAndRead(cmd[j], si.ii.diagCmd[i], 3)) {
                    addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                    return false;
                }

            }
            if (!to.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = to.getString;
            addLog(details, 1, id);
            String[] Details = details.split("\n");
            String spec[] = si.ii.spec[i].split(",");
            int num = 0;
            for (int a = 0; a < spec.length; a++) {
                for (int j = 0; j < Details.length; j++) {
                    if (Details[j].contains(spec[a])) {
                        num++;
                        break;
                    }
                }

            }
            if (num == spec.length) {
                resultLog = "PASS";
                return true;
            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean telnetBatchProcessing(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        if (!to.connect(si.ii.socketIp[i])) {   //先telnet
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        to.readUntil(si.ii.diagCmd[i], 1);
        ArrayList<String> command = new ArrayList<String>();
        String[] cmd = {si.ii.diagCmd1[i], si.ii.diagCmd2[i], si.ii.diagCmd3[i],
            si.ii.diagCmd4[i], si.ii.diagCmd5[i], si.ii.diagCmd6[i],
            si.ii.diagCmd7[i], si.ii.diagCmd8[i], si.ii.diagCmd9[i],
            si.ii.diagCmd10[i], si.ii.diagCmd11[i], si.ii.diagCmd12[i],
            si.ii.diagCmd13[i], si.ii.diagCmd14[i], si.ii.diagCmd15[i],
            si.ii.diagCmd16[i]};//最多可以放16个指令
        for (int j = 0; j < cmd.length; j++) { //调整指令有效指令集合在一起
            if (!"".equals(cmd[j])) {
                command.add(cmd[j]);
            }
        }
        cmd = command.toArray(new String[command.size()]);

        try {

            to.readUntil(si.ii.diagCmd[i], 1); //清除telnet开头内容

            for (int j = 0; j < cmd.length; j++) {

//                addLog(cmd[j], 1, id);
                if (!to.sendCommandAndRead(cmd[j], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    //addLog(to.getString, 1, id);
                    addLog("CMD " + cmd[j] + " Fail!", id);
                    return false;
                }
            }
//            to.readAll(si.ii.diagCmdTime[i]);
            //addLog(to.getString, 1, id);
//            if (to.getString.contains(si.ii.spec[i])) {//判断最后一个指令有没包含si.ii.spec[i]
            resultLog = "PASS";
            return true;
//            }
//            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean setIfconfigIP(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        ComPort cp = new ComPort(apv, id);
        if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
            addLog("open " + si.ii.comPort[i] + " Fail!", id);
            return false;

        }
        to.readUntil(si.ii.diagCmd[i], 1);
        ArrayList<String> command = new ArrayList<String>();
        String[] cmd = {si.ii.diagCmd1[i], si.ii.diagCmd2[i], si.ii.diagCmd3[i],
            si.ii.diagCmd4[i], si.ii.diagCmd5[i], si.ii.diagCmd6[i],
            si.ii.diagCmd7[i], si.ii.diagCmd8[i], si.ii.diagCmd9[i],
            si.ii.diagCmd10[i], si.ii.diagCmd11[i], si.ii.diagCmd12[i],
            si.ii.diagCmd13[i], si.ii.diagCmd14[i], si.ii.diagCmd15[i],
            si.ii.diagCmd16[i]};//最多可以放16个指令
        for (int j = 0; j < cmd.length; j++) { //调整指令有效指令集合在一起
            if (!"".equals(cmd[j])) {
                command.add(cmd[j]);
            }
        }
        cmd = command.toArray(new String[command.size()]);

        try {

            cp.readUntil(si.ii.diagCmd[i], 1); //清除telnet开头内容
            for (int a = 0; a < 5; a++) {
                for (int j = 0; j < cmd.length; j++) {

//                addLog(cmd[j], 1, id);
                    if (!cp.writeAndReadUntil(cmd[j] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                        //addLog(to.getString, 1, id);
                        addLog("CMD " + cmd[j] + " Fail!", id);
                        return false;
                    }
                }
//                if (ping(si.ii.cmd[i], 1)) {
//                    addLog("Ping " + si.ii.cmd[i] + " PASS!", id);
                resultLog = "PASS";
                return true;
//                }
            }
            return false;
//            }
//            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            cp.close();
        }
        return false;
    }

    public boolean forRUNIN(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        ComPort cp = new ComPort(apv, id);
        try {
            if (!to.connect(si.ii.socketIp[i])) {   //先telnet
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
                cp.close();
                return false;
            }

//                cp.readms(1);
            to.readUntil(si.ii.diagCmd[i], 1);
            ArrayList<String> command = new ArrayList<String>();
            String[] cmd = {si.ii.diagCmd1[i], si.ii.diagCmd2[i], si.ii.diagCmd3[i],
                si.ii.diagCmd4[i], si.ii.diagCmd5[i], si.ii.diagCmd6[i],
                si.ii.diagCmd7[i], si.ii.diagCmd8[i], si.ii.diagCmd9[i],
                si.ii.diagCmd10[i], si.ii.diagCmd11[i], si.ii.diagCmd12[i],
                si.ii.diagCmd13[i], si.ii.diagCmd14[i], si.ii.diagCmd15[i],
                si.ii.diagCmd16[i]};//最多可以放16个指令
            for (int j = 0; j < cmd.length; j++) { //调整指令有效指令集合在一起
                if (!"".equals(cmd[j])) {
                    command.add(cmd[j]);
                }
            }
            cmd = command.toArray(new String[command.size()]);



            to.readUntil(si.ii.diagCmd[i], 1); //清除telnet开头内容

            for (int j = 0; j < cmd.length; j++) {

//                addLog(cmd[j], 1, id);
                if (!to.sendCommandAndRead(cmd[j], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    //addLog(to.getString, 1, id);
                    addLog("CMD " + cmd[j] + " Fail!", id);
                    return false;
                }
            }



            to.disconnect();

            String cpcmd[] = si.ii.cmd1[i].split(",");
            for (int k = 0; k < cpcmd.length; k++) {
                if (!cp.writeAndReadUntil(cpcmd[k] + "\r\n", "OK", 10)) {
                    addLog("cmd " + si.ii.cmd1[i] + " FAIL!", id);

                    addLog(cp.readAll, 2, id);
                    return false;
                }

            }

            int num = si.ii.diagCmdTime[i] / 2 + 1;
            boolean boot = false;
            for (int j = 0; j < num; j++) {


                if (ping(si.ii.socketIp[i], si.ii.cmd[i], 1)) {
                    addLog("Ping " + si.ii.socketIp[i] + " PASS!", id);
//                resultLog = "PASS";
                    boot = true;
                    break;
                }
                if (ping(si.ii.socketIp[i], 1)) {
                    addLog("Ping " + si.ii.socketIp[i] + " PASS!", id);
//                resultLog = "PASS";
                    boot = true;
                    break;
                }

            }
            if (!boot) {
                return false;
            }


            if (!to.connect(si.ii.socketIp[i])) {   //先telnet
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);

            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                //addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            String str[] = to.getString.split("\r\n");
            num = 0;
            int spec = 0;
//             addLog("*********************************");


            for (int j = 0; j < str.length; j++) {
                if (str[j].contains("config ")) {
                    num++;
                    if (spec == 2) {
                        resultLog = "PASS";
                        return true;
                    }
                }
                if (num == 3) {
                    addLog(str[j]);
                    if (str[j].contains("option input 'ACCEPT'")) {
                        spec++;
                    }
                    if (str[j].contains("option forward 'ACCEPT'")) {
                        spec++;
                    }
                }

            }



        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
            cp.close();
        }
        return false;
    }

    public boolean commandBatchProcessing(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        ComPort cp = new ComPort(apv, id);
        if (!cp.open(si.ii.comPort[i], si.ii.transRate[i])) {
            addLog("open " + si.ii.comPort[i] + " Fail!", id);
            return false;

        }

        try {

            ArrayList<String> command = new ArrayList<String>();
            String[] cmd = {si.ii.diagCmd1[i], si.ii.diagCmd2[i], si.ii.diagCmd3[i],
                si.ii.diagCmd4[i], si.ii.diagCmd5[i], si.ii.diagCmd6[i],
                si.ii.diagCmd7[i], si.ii.diagCmd8[i], si.ii.diagCmd9[i],
                si.ii.diagCmd10[i], si.ii.diagCmd11[i], si.ii.diagCmd12[i],
                si.ii.diagCmd13[i], si.ii.diagCmd14[i], si.ii.diagCmd15[i],
                si.ii.diagCmd16[i]};//最多可以放16个指令
            for (int j = 0; j < cmd.length; j++) { //调整指令有效指令集合在一起
                if (!"".equals(cmd[j])) {
                    command.add(cmd[j]);
                }
            }
            cmd = command.toArray(new String[command.size()]);
            cp.readms(1);

            for (int j = 0; j < cmd.length; j++) {
                if (!cp.writeAndReadUntil(cmd[j] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    addLog(cmd[j] + " fail", id, id);
                    return false;
                }
            }



            resultLog = "PASS";
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            cp.close();
        }
        return false;
    }

    public boolean BLETest(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        TelnetOper dut = new TelnetOper(apv, 1, id);
        TelnetOper Golden = new TelnetOper(apv, 2, id);
        String dutIP = si.ii.socketIp[i];
        int hz = Integer.parseInt(si.ii.Cut0[i].trim());
        String GoldenIP = apv.getGoldenIP(hz);
        if (GoldenIP == null || GoldenIP.equals("")) {
            GoldenIP = si.ii.socketIp[i];
        }
        try {



//*************************dut******************************
            if (!dut.connect(dutIP)) {
                addLog("Telnet " + dutIP + " Fail!", id);
                return false;
            }

            addLog("Telnet " + dutIP + " Pass!", id);
            dut.readUntil(si.ii.diagCmd[i], 1);
//            String[] DutCmd = {si.ii.cmd1[i], si.ii.cmd2[i]};

//            for (int j = 0; j < DutCmd.length; j++) {
            String[] dutCmd = si.ii.cmd1[i].split(",");
//                addLog(dutCmd[0], 1, id);
            dut.sendCommandAndRead(dutCmd[0], si.ii.diagCmd[i], si.ii.diagCmdTime[i]);
//            addLog(dut.getString, 1, id);

            if (!dut.getString.contains(dutCmd[1])) {
                addLog("CMD " + dutCmd[0] + " Fail!", id);
                return false;
            }
            dutCmd = si.ii.cmd2[i].split(",");
            if (!dut.sendCommandAndRead(dutCmd[0], dutCmd[1], si.ii.diagCmdTime[i])) {
//                addLog(dut.getString, 1, id);
                addLog("CMD " + dutCmd[0] + " Fail!", id);
                return false;
            }
//            addLog(dut.getString, 1, id);

//            }

            dut.sendCommandAndRead(si.ii.cmd3[i], si.ii.cmd3[i], 1);
//            addLog(dut.getString, 1, id);

//*************************Golden******************************
            if (!Golden.connect(GoldenIP)) {
                addLog("Telnet " + GoldenIP + " Fail!", id);
                return false;
            }
            addLog("Telnet " + GoldenIP + " Pass!", id);
            Golden.readUntil(si.ii.diagCmd[i], 1);
//            String[] GoldenCmd = {si.ii.diagCmd1[i], si.ii.diagCmd2[i]};

//            for (int j = 0; j < GoldenCmd.length; j++) {
            String[] goldenCmd = si.ii.diagCmd1[i].split(",");
//                addLog(goldenCmd[0], 2, id);
            Golden.sendCommandAndRead(goldenCmd[0], si.ii.diagCmd[i], si.ii.diagCmdTime[i]);

//            addLog(Golden.getString, 2, id);
            if (!Golden.getString.contains(goldenCmd[1])) {
                addLog("CMD " + goldenCmd[0] + " Fail!", id);
                return false;
            }
            goldenCmd = si.ii.diagCmd2[i].split(",");
            if (!Golden.sendCommandAndRead(goldenCmd[0], goldenCmd[1], si.ii.diagCmdTime[i])) {
//                addLog(Golden.getString, 2, id);
                addLog("CMD " + goldenCmd[0] + " Fail!", id);
                return false;
            }
//            }

            Golden.sendCommandAndRead(si.ii.diagCmd3[i], si.ii.diagCmd3[i], 1);
            addLog(Golden.getString, 2, id);
            //***************************DUT******************************************         
            dutCmd = si.ii.cmd4[i].split(",");
//                addLog(dutCmd[0], 1, id);
            if (!dut.sendCommandAndRead(dutCmd[0], dutCmd[1], si.ii.diagCmdTime[i])) {
//                addLog(dut.getString, 1, id);
                addLog("CMD " + dutCmd[0] + " Fail!", id);

                return false;
            }
//            addLog(dut.getString, 1, id);
            dut.readAllms(1);
            //********************************Golden*********************************
            goldenCmd = si.ii.diagCmd4[i].split(",");
//                addLog(goldenCmd[0], 2, id);
            if (!Golden.sendCommandAndRead(goldenCmd[0], goldenCmd[1], si.ii.diagCmdTime[i])) {
//                addLog(Golden.getString, 2, id);
                addLog("CMD " + goldenCmd[0] + " Fail!", id);

                return false;
            }
//            addLog(Golden.getString, 2, id);
            Golden.readAllms(1);
            resultLog = "PASS";
            return true;

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {

            dut.disconnect();

            Golden.disconnect();
        }
        return false;
    }

    public boolean GoldenBringup(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        int hz = Integer.parseInt(si.ii.Cut0[i].trim());
        String ip = apv.getGoldenIP(hz);
        if (ip == null || ip.equals("")) {
            ip = si.ii.socketIp[i];
        }
        addLog("getGolden IP: " + ip, id);
        if (!to.connect(ip)) {
            addLog("Telnet " + ip + " Fail!", id);
            return false;
        }
        to.readUntil(si.ii.diagCmd[i], 1);
        File CmdFile = new File(si.ii.cmd[i]);

        if (!CmdFile.exists()) {
            this.addLog("not have file " + si.ii.cmd[i], id);
            return false;
        }

        BufferedReader br = null;

        String iqLogLine = "";
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));

            while ((iqLogLine = br.readLine()) != null) {
                if (iqLogLine.trim().length() <= 1) {

                    to.sendCommand("\r\n");

                }
                addLog(iqLogLine, 2, id);
                if (!to.sendCommandAndRead(iqLogLine, si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                    return false;
                }
            }
            addLog(si.ii.diagCmd1[i], 2, id);
            to.sendCommandAndRead(si.ii.diagCmd1[i], si.ii.diagCmd[i], 1);
            resultLog = "PASS";
            return true;

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean GoldenWifiUp(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        TelnetOper to = new TelnetOper(apv, 2, 1);
//         int hz =2;
//        int hz = Integer.parseInt(si.ii.Cut0[i].trim());
//        String ip = apv.getGoldenIP(hz);
//        if (ip == null || ip.equals("")) {
        String ip = si.ii.socketIp[i];
//        }
        addLog("getGolden IP: " + ip, id);
        if (!to.connect(ip)) {
            addLog("Telnet " + ip + " Fail!", id);
            return false;
        }
        to.readUntil(si.ii.diagCmd[i], 1);

        try {
            if (!to.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                return false;
            }
            if (!to.sendCommandAndRead(si.ii.cmd2[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                addLog("CMD " + si.ii.cmd2[i] + " Fail!", id);
                return false;
            }
            if (!to.sendCommandAndRead(si.ii.cmd3[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                addLog("CMD " + si.ii.cmd3[i] + " Fail!", id);
                return false;
            }

            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd4[i] + " Fail!", id);
                return false;
            }
            String details[] = to.getString.split("\r\n");
            String ssid = "";
            for (int j = 0; j < details.length; j++) {
                if (details[j].contains("SSID:")) {
                    ssid = details[j].substring(details[j].indexOf("SSID:\"") + 6, details[j].lastIndexOf("\""));
                    if (!ssid.equals(si.ii.spec[i])) {
                        return false;
                    }
                }
            }
            addLog("SSID: " + ssid, id);
            if (ssid.equals(si.ii.spec[i])) {
                resultLog = "PASS";
                return true;
            }
            addLog("SPEC SSID: " + si.ii.spec[i], id);

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean GoldenBringup1(StationInfo si, int i, int id) {


        resultLog = "FAIL";
        //apv.phase_items = new JSONObject[1];
        //apv.phase_items[0] = new JSONObject();
        //apv.phase_items[0].put("ip", si.ii.socketIp[i]);
        try {
            Runtime.getRuntime().exec("cmd /c  arp -d");














        } catch (IOException ex) {
            Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ping(si.ii.socketIp[i], 6)) {
            addLog("Ping " + si.ii.socketIp[i] + " PASS!", id);
            resultLog = "PASS";
            return true;
        }

        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }

        File CmdFile = new File(si.ii.cmd[i]);

        if (!CmdFile.exists()) {
            this.addLog("not have file " + si.ii.cmd[i], id);
            return false;
        }

        BufferedReader br = null;

        String iqLogLine = "";
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
            int num = 0;
            while ((iqLogLine = br.readLine()) != null) {
                if (iqLogLine.trim().length() <= 1) {
                    to.sendCommand("\r\n");
                }
                to.sendCommand(iqLogLine);
                //apv.phase_items[0].put("command" + num, iqLogLine);
                num++;
                try {

                    Thread.sleep(200);

                    //                to.readUntil(si.ii.diagCmd[i], 5);














                } catch (InterruptedException ex) {
                    Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (iqLogLine.contains("wifi up")) {
                    to.sendCommand(iqLogLine.trim());
                    try {

                        Thread.sleep(2000);

                        //                to.readUntil(si.ii.diagCmd[i], 5);














                    } catch (InterruptedException ex) {
                        Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            to.readAll(si.ii.diagCmdTime[i]);
            to.sendCommandAndRead(si.ii.diagCmd1[i], si.ii.diagCmd[i], 1);
            resultLog = "PASS";
            return true;

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean TelnetBatchProcessingFile1(StationInfo si, int i, int id) {
        resultLog = "FAIL";

        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        to.readUntil(si.ii.diagCmd[i], 1);
        //-------------------------start dut command---------------
        File CmdFile = new File(si.ii.cmd[i]);
        if (!CmdFile.exists()) {
            this.addLog("not have file " + si.ii.cmd[i], id);
            return false;
        }
        BufferedReader br = null;
        String iqLogLine = "";
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
            while ((iqLogLine = br.readLine()) != null) {
//                this.addLog(iqLogLine, 1, id);
                if (!to.sendCommandAndRead(iqLogLine, si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    this.//addLog(to.getString, 1, id);
                            addLog("CMD " + iqLogLine + " Fail!", id);

                    return false;
                }
//                this.//addLog(to.getString, 1, id);
            }

//            try {
//                //            if (!to.getString.contains(si.ii.spec[i])) {
//                //             
//                //                return false;
//                //            }
//                                Thread.sleep(2000);
//            } catch (InterruptedException ex) {
//                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
//            }
        } catch (IOException e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

//        this.addLog("cmd file " + si.ii.cmd[i] + " OK", id);
        resultLog = "PASS";
        return true;
        //------------------------run  iQ----------------------------------

    }

    public boolean BleStart(StationInfo si, int i, int id) {
        resultLog = "FAIL";

        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        to.readUntil(si.ii.diagCmd[i], 1);
        //-------------------------start dut command---------------

        BufferedReader br = null;
        String iqLogLine = "";
        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                return false;
            }
            String details = substring(to.getString, si.ii.cmd1[i], si.ii.diagCmd[i]).trim();
            if (!details.contains(si.ii.spec[i])) {
                return false;
            }
            if (!to.sendCommandAndRead(si.ii.cmd2[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                addLog("CMD " + si.ii.cmd2[i] + " Fail!", id);
                return false;
            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

//        this.addLog("cmd file " + si.ii.cmd[i] + " OK", id);
        resultLog = "PASS";
        return true;
        //------------------------run  iQ----------------------------------

    }

    public boolean BleStart1(StationInfo si, int i, int id) {
        resultLog = "FAIL";

        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        to.readAll(1);
        //-------------------------start dut command---------------
        File CmdFile = new File(si.ii.cmd[i]);
        if (!CmdFile.exists()) {
            this.addLog("not have file " + si.ii.cmd[i], id);
            return false;
        }
        BufferedReader br = null;
        String iqLogLine = "";
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
            while ((iqLogLine = br.readLine()) != null) {
                if (!to.sendCommandAndRead(iqLogLine, si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    this.//addLog(to.getString, 1, id);
                            addLog("CMD " + iqLogLine + " Fail!", id);

                    return false;
                }
            }
            if (to.readUntil("hb", si.ii.diagCmdTime[i])) {
            }
//            this.//addLog(to.getString, 1, id);
//            try {
//                //            if (!to.getString.contains(si.ii.spec[i])) {
//                //             
//                //                return false;
//                //            }
//                                Thread.sleep(2000);
//            } catch (InterruptedException ex) {
//                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
//            }
        } catch (IOException e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

//        this.addLog("cmd file " + si.ii.cmd[i] + " OK", id);
        resultLog = "PASS";
        return true;
        //------------------------run  iQ----------------------------------

    }

    public boolean ComBatchProcessingFile(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        ComPort dut = new ComPort(apv, id, 1);

        //-------------------------start dut command---------------
        File CmdFile = new File(si.ii.cmd[i]);
        if (!CmdFile.exists()) {
            this.addLog("not have file " + si.ii.cmd[i], id);
            return false;
        }
        BufferedReader br = null;
        String iqLogLine = "";
        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
            while ((iqLogLine = br.readLine()) != null) {
//                this.addLog(iqLogLine, 1, id);
                if (!dut.writeAndReadUntil(iqLogLine + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    this.addLog("CMD " + iqLogLine + " Fail!", id);
                    return false;
                }

            }


        } catch (IOException e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
        }

        resultLog = "PASS";
        return true;
        //------------------------run  iQ----------------------------------

    }

    public boolean ComBatchProcessingFileWifi(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        ComPort dut = new ComPort(apv, id, 1);

        //-------------------------start dut command---------------
        File CmdFile = new File(si.ii.cmd[i]);
        if (!CmdFile.exists()) {
            this.addLog("not have file " + si.ii.cmd[i], id);
            return false;
        }
        BufferedReader br = null;
        String iqLogLine = "";
        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            if (!dut.writeAndReadUntil("\r\n", si.ii.diagCmd[i], 1)) {
            }
            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
            while ((iqLogLine = br.readLine()) != null) {
//                this.addLog(iqLogLine, 1, id);
                if (!dut.writeAndReadUntil(iqLogLine + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    this.addLog("CMD " + iqLogLine + " Fail!", id);
                    return false;
                }

            }
            dut.readms(1);
            if (!dut.writeAndReadUntil(si.ii.cmd1[i] + "\r\n", si.ii.diagCmd[i], 1)) {
                this.addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                return false;
            }

            String details[] = dut.readAll.split("\r\n");
            String spec[] = si.ii.spec[i].split(",");
//          String ssid[]=new String[spec.length];
            int num = 0;
            for (int j = 0; j < details.length; j++) {
                if (details[j].contains("SSID:")) {
                    String ssid = details[j].substring(details[j].indexOf("SSID:\"") + 6, details[j].lastIndexOf("\""));
                    addLog("SSID: " + ssid, id);
                    if (!ssid.equals(spec[num])) {
                        addLog("SPEC SSID: " + spec[num], id);
                        return false;
                    }
                    num++;
                }

            }

        } catch (IOException e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
        }

        resultLog = "PASS";
        return true;
        //------------------------run  iQ----------------------------------

    }

    public boolean wifiSetupCom(StationInfo si, int i, int id) {
        resultLog = "";
        ComPort dut = new ComPort(apv, id, 1);

        //-------------------------start dut command---------------
        BufferedReader br = null;

        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            dut.writeAndReadUntil("\r\n", si.ii.diagCmd[i], 1);
            if (!dut.writeAndReadUntil(si.ii.cmd1[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                this.addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                return false;
            }
            if (dut.readAll.contains(si.ii.spec[i]) && !dut.readAll.contains(si.ii.diagCmd1[i])) {
                resultLog = si.ii.spec[i];
                return true;
            } else {
                if (!dut.writeAndReadUntil(si.ii.cmd2[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {  //开wifi
                    this.addLog("CMD " + si.ii.cmd2[i] + " Fail!", id);
                    return false;
                }
                if (!dut.writeAndReadUntil(si.ii.cmd1[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    this.addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                    return false;
                }
                if (dut.readAll.contains(si.ii.spec[i]) && !dut.readAll.contains(si.ii.diagCmd1[i])) {
                    resultLog = si.ii.spec[i];
                    return true;
                }
            }


        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
        }
        return false;

        //------------------------run  iQ----------------------------------

    }

    public boolean wifiSetupCom1(StationInfo si, int i, int id) {
        resultLog = "";
        ComPort dut = new ComPort(apv, id, 1);

        //-------------------------start dut command---------------
        BufferedReader br = null;

        try {
            if (!dut.open(si.ii.comPort[i], si.ii.transRate[i])) {
                return false;
            }
            dut.writeAndReadUntil("\r\n", si.ii.diagCmd[i], 1);
            if (!dut.writeAndReadUntil(si.ii.cmd2[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {  //开wifi
                this.addLog("CMD " + si.ii.cmd2[i] + " Fail!", id);
                return false;
            }
            if (!dut.writeAndReadUntil(si.ii.cmd1[i] + "\r\n", si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                this.addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                return false;
            }
            if (dut.readAll.contains(si.ii.spec[i]) && !dut.readAll.contains(si.ii.diagCmd1[i])) {
                resultLog = si.ii.spec[i];
                return true;
            }



        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            dut.close();
        }
        return false;

        //------------------------run  iQ----------------------------------

    }

    public boolean wifiSetup(StationInfo si, int i, int id) {
        resultLog = "";
        try {
            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                //   this.addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                return false;
            }
            String details = substring(to.getString, si.ii.cmd1[i], si.ii.diagCmd[i]);
            resultLog = details;
            if (details.contains(si.ii.spec[i]) && !details.contains(si.ii.diagCmd1[i])) {
                resultLog = si.ii.spec[i];
                return true;
            } else {
                if (!to.sendCommandAndRead(si.ii.cmd2[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    //   this.addLog(to.getString, 1, id);
                    addLog("CMD " + si.ii.cmd2[i] + " Fail!", id);
                    return false;
                }
                if (!to.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    //   this.addLog(to.getString, 1, id);
                    addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                    return false;
                }
                details = substring(to.getString, si.ii.cmd1[i], si.ii.diagCmd[i]);
                resultLog = details;
                if (details.contains(si.ii.spec[i]) && !details.contains(si.ii.diagCmd1[i])) {
                    resultLog = si.ii.spec[i];
                    return true;
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

        return false;
        //------------------------run  iQ----------------------------------

    }

    public boolean checkBrctl2G(StationInfo si, int i, int id) {
        resultLog = "";


        //-------------------------start dut command---------------

        try {
            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);

            if (!to.sendCommandAndRead(si.ii.diagCmd1[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                //   this.addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.diagCmd1[i] + " Fail!", id);
                return false;
            }
            if (!to.sendCommandAndRead(si.ii.diagCmd2[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                //   this.addLog(to.getString, 1, id);
                addLog("CMD " + si.ii.diagCmd2[i] + " Fail!", id);
                return false;
            }
            if (!to.getString.contains(si.ii.spec[i])) {
                addLog("CMD " + si.ii.diagCmd1[i] + " Fail!", id);
            }
            for (int j = 0; j < si.ii.diagCmdTime[i]; j++) {
//                addLog("111111", id);
                if (to.sendCommandAndRead(si.ii.diagCmd3[i], si.ii.diagCmd[i], 1)) {
                    break;
                } else {
                    to.disconnect();
                    Runtime.getRuntime().exec("arp -d");
                    Thread.sleep(1000);
                    if (!to.connect(si.ii.socketIp[i])) {
                        addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                        return false;
                    }
                    to.readAll(si.ii.diagCmd[i], 1);
                }
            }


            resultLog = "PASS";
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

        resultLog = si.ii.spec[i];
        return true;
        //------------------------run  iQ----------------------------------

    }

    public boolean TelnetBatchProcessingThread(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        ArrayList<String> Cmd = new ArrayList<String>();
//        if (!to.connect(si.ii.socketIp[i])) {
//            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
//            return false;
//        }
//        to.readUntil(  si.ii.diagCmd[i],1);
        //-------------------------start dut command---------------
        File CmdFile = new File(si.ii.cmd[i]);
        if (!CmdFile.exists()) {
            this.addLog("not have file " + si.ii.cmd[i], id);
            return false;
        }
        BufferedReader br = null;
        String iqLogLine = "";
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
            while ((iqLogLine = br.readLine()) != null) {
                this.addLog(iqLogLine, 1, id);
                Cmd.add(iqLogLine);
//                if (!to.sendCommandAndRead(iqLogLine, si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
//                    this.//addLog(to.getString, 1, id);
//                    addLog("CMD " + iqLogLine + " Fail!", id);
//
//                    return false;
//                }
//                this.//addLog(to.getString, 1, id);
            }

            String[] cmd = Cmd.toArray(new String[Cmd.size()]);
            TelnetBatchProcessingThread(si.ii.socketIp[i], cmd, si.ii.diagCmd[i], si.ii.diagCmdTime[i]);
//            try {
//                //            if (!to.getString.contains(si.ii.spec[i])) {
//                //             
//                //                return false;
//                //            }
//                                Thread.sleep(2000);
//            } catch (InterruptedException ex) {
//                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
//            }
        } catch (IOException e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

//        this.addLog("cmd file " + si.ii.cmd[i] + " OK", id);
        resultLog = "PASS";
        return true;
        //------------------------run  iQ----------------------------------

    }

    public boolean TelnetGoldenBatchProcessingFile(StationInfo si, int i, int id) {
        resultLog = "FAIL";

        int hz = Integer.parseInt(si.ii.Cut0[i].trim());
        String ip = apv.getGoldenIP(hz);
        if (!to.connect(ip)) {
            addLog("Telnet " + ip + " Fail!", id);
            return false;
        }
        addLog("getGolden IP: " + ip, id);
        to.readUntil(si.ii.diagCmd[i], 1);
        //-------------------------start dut command---------------
        File CmdFile = new File(si.ii.cmd[i]);
        if (!CmdFile.exists()) {
            this.addLog("not have file " + si.ii.cmd[i], id);
            return false;
        }
        BufferedReader br = null;
        String iqLogLine = "";
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
            while ((iqLogLine = br.readLine()) != null) {
                if (!to.sendCommandAndRead(iqLogLine, si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    //   this.addLog(to.getString, 1, id);
                    addLog("CMD " + iqLogLine + " Fail!", id);

                    return false;
                }
            }
            //   this.addLog(to.getString, 1, id);
//            try {
//                //            if (!to.getString.contains(si.ii.spec[i])) {
//                //             
//                //                return false;
//                //            }
//                                Thread.sleep(2000);
//            } catch (InterruptedException ex) {
//                Logger.getLogger(TestScript.class.getName()).log(Level.SEVERE, null, ex);
//            }
        } catch (IOException e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

//        this.addLog("cmd file " + si.ii.cmd[i] + " OK", id);
        resultLog = "PASS";
        return true;
        //------------------------run  iQ----------------------------------

    }

    public boolean initializeDUTAPMode(StationInfo si, int i, int id) {
        resultLog = "FAIL";

        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        to.readAll(1);
        //-------------------------start dut command---------------
        File CmdFile = new File(si.ii.cmd[i]);
        if (!CmdFile.exists()) {
            this.addLog("not have file " + si.ii.cmd[i], id);
            return false;
        }
        BufferedReader br = null;
        String readLine = "";
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
            while ((readLine = br.readLine()) != null) {
//                if (readLine.contains("channel=")) {
//                    int radio = Integer.parseInt(readLine.substring(readLine.indexOf("[") + 1, readLine.indexOf("[") + 2));
//                    int channel = Integer.parseInt(readLine.substring(readLine.indexOf("channel=") + 8));
//                    String frequency = "0";
//                    if (channel <= 11) {
//                        frequency = String.valueOf(2407 + channel * 5);
//                    } else if (channel >= 36) {
//                        frequency = String.valueOf(5000 + channel * 5);
//                    }
//                  
//                } else if (readLine.contains("ssid=")) {
//                    int radio = Integer.parseInt(readLine.substring(readLine.indexOf("[") + 1, readLine.indexOf("[") + 2));
//                    String ssid = readLine.substring(readLine.indexOf("ssid=") + 5);
//                
//                }
//                System.out.println(readLine);
//                to.sendCommand(readLine);

                if (!to.sendCommandAndRead(readLine, si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                    return false;
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

        this.addLog("cmd file " + si.ii.cmd[i] + " OK", id);
        resultLog = "PASS";
        return true;
        //------------------------run  iQ----------------------------------

    }

    public boolean telnetGolden(StationInfo si, int i, int id) {
        resultLog = "FAIL";
//        TelnetOper telnetGolden = new TelnetOper(apv, 2, id);
        String GoldenIP = "";
        try {
//            type = Integer.parseInt(si.ii.Cut0[i]);
            int hz = Integer.parseInt(si.ii.Cut0[i].trim());
            GoldenIP = apv.getGoldenIP(hz);
        } catch (Exception e) {
            addLog(si.ii.Cut0[i] + " Fail!  1 DUT 2 Golden 3  Windows", id);
        }

        TelnetOper telnetGolden = new TelnetOper(apv, 2, 1);
        if (!telnetGolden.connect(GoldenIP)) {
            addLog("Telnet " + GoldenIP + " Fail!", id);
            return false;
        }
        addLog("Telnet " + GoldenIP + " PASS!", id);
//        if (!telnetGolden.connect(GoldenIP)) {
//            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
//            return false;
//        }

        telnetGolden.readUntil(si.ii.diagCmd[i], 1);
        //-------------------------start dut command---------------
        if (!telnetGolden.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], 5)) {
            addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
            return false;
        }
        String details[] = telnetGolden.getString.split("\r\n");
        String spec[] = si.ii.spec[i].split(",");
//          String ssid[]=new String[spec.length];
        int num = 0;
        for (int j = 0; j < details.length; j++) {
            if (details[j].contains("SSID:")) {
                String ssid = details[j].substring(details[j].indexOf("SSID:\"") + 6, details[j].lastIndexOf("\""));
                addLog("SSID: " + ssid, id);
                if (!ssid.equals(spec[num])) {
                    addLog("SPEC SSID: " + spec[num], id);
                }
                num++;
            }

        }
        if (num >= spec.length) {
            resultLog = "PASS";
            return true;
        }

        File CmdFile = new File(si.ii.cmd[i]);
        if (!CmdFile.exists()) {
            this.addLog("not have file " + si.ii.cmd[i], id);
            return false;
        }
        BufferedReader br = null;
        String readLine = "";
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
            while ((readLine = br.readLine()) != null) {
                if (!telnetGolden.sendCommandAndRead(readLine, si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    telnetGolden.disconnect();
                    if (!telnetGolden.connect(si.ii.socketIp[i])) {
                        addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                        return false;
                    }
                    telnetGolden.readUntil(si.ii.diagCmd[i], 1);
//                    addLog("CMD " + readLine + " Fail!", id);
//                    return false;
                }

            }
            this.addLog("cmd file " + si.ii.cmd[i] + " OK", id);
            if (!telnetGolden.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                return false;
            }
            details = telnetGolden.getString.split("\r\n");
            spec = si.ii.spec[i].split(",");
//          String ssid[]=new String[spec.length];
            num = 0;
            for (int j = 0; j < details.length; j++) {
                if (details[j].contains("SSID:")) {
                    String ssid = details[j].substring(details[j].indexOf("SSID:\"") + 6, details[j].lastIndexOf("\""));
                    addLog("SSID: " + ssid, id);
                    if (!ssid.equals(spec[num])) {
                        addLog("SPEC SSID: " + spec[num], id);
                        return false;
                    }
                    num++;
                }

            }
//            to.sendCommandAndRead(si.ii.cmd2[i], si.ii.diagCmd[i], 1);
            if (num >= spec.length) {
                resultLog = "PASS";
                return true;
            }


        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            telnetGolden.disconnect();
        }
        return false;


        //------------------------run  iQ----------------------------------

    }

    public boolean initializeDUTAPMode1(StationInfo si, int i, int id) {
        resultLog = "FAIL";


        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        to.readUntil(si.ii.diagCmd[i], 1);
        //-------------------------start dut command---------------
        File CmdFile = new File(si.ii.cmd[i]);
        if (!CmdFile.exists()) {
            this.addLog("not have file " + si.ii.cmd[i], id);
            return false;
        }
        BufferedReader br = null;
        String readLine = "";
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(CmdFile)));
            while ((readLine = br.readLine()) != null) {
                to.sendCommand(readLine);
//                if (!to.sendCommandAndRead(readLine, si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
//                    to.disconnect();
//                    if (!to.connect(si.ii.socketIp[i])) {
//                        addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
//                        return false;
//                    }
//                    to.readUntil(  si.ii.diagCmd[i],1);
////                    addLog("CMD " + readLine + " Fail!", id);
////                    return false;
//                }

            }

            this.addLog("cmd file " + si.ii.cmd[i] + " OK", id);
            if (!to.sendCommandAndRead(si.ii.cmd1[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd1[i] + " Fail!", id);
                return false;
            }
            String details[] = to.getString.split("\r\n");
            String spec[] = si.ii.spec[i].split(",");
//          String ssid[]=new String[spec.length];
            int num = 0;
            for (int j = 0; j < details.length; j++) {
                if (details[j].contains("SSID:")) {
                    String ssid = details[j].substring(details[j].indexOf("SSID:\"") + 6, details[j].lastIndexOf("\""));
                    addLog("SSID: " + ssid, id);
                    if (!ssid.equals(spec[num])) {
                        addLog("SPEC SSID: " + spec[num], id);
                        return false;
                    }
                    num++;
                }

            }
            resultLog = "PASS";
            return true;

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;


        //------------------------run  iQ----------------------------------

    }

    public boolean ambitVerifyBootcodeVersion(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        try {

            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            addLog(details, 1, id);
            if (details.contains(si.ii.spec[i])) {
                resultLog = "PASS";
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean testImageVersion(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

            String version = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            addLog(version, 1, id);
            version = version.substring(version.lastIndexOf(":"));
            resultLog = version;
            addLog("get Version:" + resultLog, id);
            if (!si.ii.limitDown[i].equals("")) {
                addLog("spec Version:" + si.ii.limitDown[i], id);
                if (!version.contains(si.ii.limitDown[i])) {
                    return false;
                }
                resultLog = si.ii.limitDown[i];
            }
            if (!si.ii.limitUp[i].equals("")) {
                addLog("spec Version:" + si.ii.limitUp[i], id);
                if (!version.contains(si.ii.limitUp[i])) {
                    return false;
                }
                resultLog = si.ii.limitUp[i];
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean CPUStressTest(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }

//            String details = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            String details = to.getString;
            addLog(details, 1, id);
//            apv.uploadAPI.setValue("test_image_version", version);
            if (details.contains(si.ii.spec[i])) {
                resultLog = "PASS";
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean MMCBadblocksTest(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        String[] command = {si.ii.cmd1[i], si.ii.cmd2[i]};
        try {
            boolean result = true;
            for (int j = 0; j < command.length; j++) {
                addLog("Command: " + command[j], id);
                to.readUntil(si.ii.diagCmd[i], 1);
                to.sendCommand(command[j]);
                to.readAll(si.ii.diagCmd[i], si.ii.diagCmdTime[i]);
                //addLog(to.getString, 1, id);
                String details = to.getString.replaceAll(")", ")\r\n");
//                String value = "";
//                while (true) {
//                    int index = details.indexOf("done ") + 5;
////                      System.out.println(index);
//                    if (index <= 5) {
//                        break;
//                    }
//                    details = details.substring(index).trim();
//                    System.out.println(details);
//                    index = details.indexOf(")");
//                    value = details.substring(0, index + 1).trim();
//                    addLog(value, id);
//
//
//                }
                addLog(details, id);
                if (!details.contains(si.ii.spec[i])) {
                    result = false;
                }
            }
            if (result) {
                resultLog = "PASS";
                return true;
            }

        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean RAMStressTest(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        String[] command = {si.ii.cmd1[i], si.ii.cmd2[i], si.ii.cmd3[i]};
        try {
            to.readUntil(si.ii.diagCmd[i], 1);

            for (int j = 0; j < command.length; j++) {
                addLog("CMD " + command[j], id);
                if (!to.sendCommandAndRead(command[j], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                    addLog("CMD " + command[j] + " Fail!", id);
                    return false;
                }

                String details = to.getString;
                addLog(details, 1, id);
                if (!details.contains(si.ii.spec[i])) {

                    return false;
                }
            }
            resultLog = "PASS";
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }

        return false;
    }

    public boolean ambitPowerTest(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        if (!to.connect(si.ii.socketIp[i])) {
            addLog("Telnet " + si.ii.socketIp[i] + " Fail!", id);
            return false;
        }
        try {
            to.readUntil(si.ii.diagCmd[i], 1);
            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], 3)) {
                addLog("CMD " + si.ii.cmd[i] + " Fail!", id);
                return false;
            }
            //addLog(to.getString, 1, id);
            String version = substring(to.getString, si.ii.cmd[i], si.ii.diagCmd[i]);
            addLog(version, id);

            if (to.getString.contains(si.ii.spec[i])) {
                resultLog = "PASS";
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
        } finally {
            to.disconnect();
        }
        return false;
    }

    public boolean CPUStressTest1(StationInfo si, int i, int id) {
        resultLog = "FAIL";
        try {

            addLog("Telnet:".concat(si.ii.socketIp[i]), id);
            if (!to.connect(si.ii.socketIp[i])) {
                addLog("Telnet:".concat(si.ii.socketIp[i]).concat(" Failed;"), id);
                return false;
            }
            to.readUntil(si.ii.diagCmd[i], 1);
            addLog("Telnet:".concat(si.ii.socketIp[i]).concat(" Pass"), id);

            if (!to.sendCommandAndRead(si.ii.cmd[i], si.ii.diagCmd[i], si.ii.diagCmdTime[i])) {
                addLog("CMD::".concat(si.ii.cmd[i]).concat(" Failed;"), id);
                return false;
            }
            addLog("CMD::".concat(si.ii.cmd[i]).concat(" Pass"), id);
            String dataCMD[] = to.getString.split("\r\n");
            for (String line : dataCMD) {
                addLog(line, id);
                if (line.contains(si.ii.spec[i])) {
                    resultLog = "PASS";
                    return true;
                }
            }
            addLog("......Nothing.....", id);
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            addLog(e.toString(), id);
            return false;
        } finally {
            to.disconnect();
        }
    }
}
