/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View.subUI.SubUI.SmallUI;

import Model.DataTest.FunctionData.FunctionData;
import View.subUI.FormDetail.FormShow;
import View.subUI.SubUI.AbsSubUi;
import java.awt.Color;
import java.util.List;

/**
 *
 * @author Administrator
 */
public class SmallUI extends AbsSubUi {

    private final FormShow formShow;
    private List<FunctionData> list;

    /**
     * Creates new form SmallUI
     *
     * @param indexName
     */
    public SmallUI(String indexName) {
        super(indexName, 1000);
        initComponents();
        this.lbTime.setToolTipText(indexName);
        this.lbTime.setText(indexName);
        this.formShow = new FormShow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTime = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        lbTime.setBackground(new java.awt.Color(102, 102, 255));
        lbTime.setFont(new java.awt.Font("Tahoma", 1, 12));
        lbTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTime.setText("00:00");
        lbTime.setOpaque(true);
        lbTime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbTimeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbTimeMouseEntered(evt);
            }
        });
        add(lbTime, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void lbTimeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbTimeMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() > 1) {
            this.formShow.showDetail(tabDetail);
        }
    }//GEN-LAST:event_lbTimeMouseClicked

    private void lbTimeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbTimeMouseEntered
        // TODO add your handling code here:
        if (this.uiStatus.isTesting()) {
            StringBuilder mess = new StringBuilder("<html><span style=\"font-size: 20px\">");
            mess.append(String.format("<tr><td>Mode: %s</td></tr>", this.uiStatus.getModeTest().getModeName()));
            List<FunctionData> dataBoxs = this.uiStatus.getProcessData().getDataBoxs();
            for (FunctionData dataBox : dataBoxs) {
                if (dataBox.isTesting()) {
                    mess.append(String.format("<tr><td>%s</td></tr>", dataBox.getFunctionName()));
                }
            }
            mess.append("</span></html>");
            this.lbTime.setToolTipText(mess.toString());
        } else {
            String text = this.uiStatus.getProcessData().getMassage();
            String mess = String.format("<html><center>%s</html>", text == null ? "Finished!": text.replaceAll("\r\n", "<br>"));
            this.lbTime.setToolTipText(mess);
        }
    }//GEN-LAST:event_lbTimeMouseEntered

    
    
    @Override
    public void startTest() {
        this.list = uiStatus.getProcessData().getDataBoxs();
        super.startTest(); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
        this.lbTime.setBackground(this.uiStatus.getModeTest().getTestColor());
        if (this.formShow.isVisible()) {
            this.formShow.dispose();
        }
    }

    @Override
    public void endTest() {
        super.endTest(); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
        updateData();
        if (this.uiStatus.getProcessData().isPass()) {
            this.lbTime.setBackground(Color.GREEN);
        } else {
            this.lbTime.setBackground(Color.red);
            lbTime.setText(String.format("<html><center>%s</br><center>%s</center>%s</html>",
                    getName(), this.uiStatus.getProcessData().getFirstFail().getLocalErrorCode(), getTestTime()));
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JLabel lbTime;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setText(String txt) {
        this.lbTime.setText(txt);
    }

    @Override
    public void updateData() {
        if (list == null) {
            lbTime.setText(String.format("<html><center>%s</center>%s</html>",
                    getName(), getTestTime()));
        } else {
            lbTime.setText(String.format("<html><center>%s</br><center>%s</center>%s</html>",
                    getName(), list.size(), getTestTime()));
        }
    }
}
